schema {
  query: Query
  mutation: Mutation
}

input AddDocumentToSkillInput {
  id: ID!
  uri: String!
}

input AddWorkoutPlanToClubInput {
  WorkoutPlan: ConnectRelationInput!
  id: ID!
}

input AddWorkoutPlanToCollectionInput {
  WorkoutPlan: ConnectRelationInput!
  collectionId: ID!
}

input AddWorkoutToClubInput {
  Workout: ConnectRelationInput!
  id: ID!
}

input AddWorkoutToCollectionInput {
  Workout: ConnectRelationInput!
  collectionId: ID!
}

type AmrapMove {
  Equipment: Equipment
  Move: Move!
  createdAt: DateTime!
  id: ID!
  note: String
  updatedAt: DateTime!
}

type AmrapSection {
  AmrapMoves: [AmrapMove!]!
  createdAt: DateTime!
  id: ID!
  moveOrder: [String!]!
  name: String
  note: String
  updatedAt: DateTime!
}

type AmrapSession {
  AmrapSections: [AmrapSection!]!
  createdAt: DateTime!
  id: ID!
  name: String
  note: String
  sectionOrder: [String!]!
  updatedAt: DateTime!
}

type AnnouncementUpdate {
  actions: [AnnouncementUpdateAction!]!
  articleUrl: String
  audioUri: String
  bodyOne: String
  bodyTwo: String
  createdAt: DateTime!
  id: ID!
  imageUri: String
  subtitle: String
  title: String!
  videoUri: String
}

type AnnouncementUpdateAction {
  createdAt: DateTime!
  id: ID!
  routeTo: String!
  text: String!
}

type BestBenchmarkScoreSummary {
  benchmarkName: String!
  benchmarkType: FitnessBenchmarkScoreType!
  bestScore: Float!
  videoUri: String
}

type BodyArea {
  altNames: String
  frontBack: BodyAreaFrontBack!
  id: ID!
  name: String!
  upperLower: BodyAreaUpperLower!
}

"""
Enums
"""
enum BodyAreaFrontBack {
  BACK
  BOTH
  FRONT
}

type BodyAreaMoveScore {
  BodyArea: BodyArea!
  score: Int!
}

input BodyAreaMoveScoreInput {
  BodyArea: ConnectRelationInput!
  score: Float!
}

enum BodyAreaUpperLower {
  CORE
  LOWER
  UPPER
}

type BodyTrackingEntry {
  bodyweight: Float
  bodyweightUnit: BodyweightUnit
  createdAt: DateTime!
  fatPercent: Float
  id: ID!
  note: String
  photoUris: [String!]!
}

enum BodyweightUnit {
  KG
  LB
}

type CardioExercise {
  Move: Move
  cardioZone: CardioZone!
  createdAt: DateTime!
  distance: Float
  distanceUnit: DistanceUnit!
  id: ID!
  note: String
  time: Float
  timeUnit: TimeUnit!
  updatedAt: DateTime!
}

type CardioSession {
  CardioExercises: [CardioExercise!]!
  createdAt: DateTime!
  exerciseOrder: [String!]!
  id: ID!
  name: String
  note: String
  updatedAt: DateTime!
}

enum CardioZone {
  FIVE
  FOUR
  ONE
  THREE
  TWO
}

union CheckClubInviteTokenResult = ClubInviteTokenData | InviteTokenError

type Club {
  Admins: [UserAvatarData!]!
  ClubInviteTokens: [ClubInviteToken!]
  Members: [UserAvatarData!]!
  Owner: UserAvatarData!
  WorkoutPlans: [WorkoutPlanSummary!]
  Workouts: [WorkoutSummary!]
  contentAccessScope: ContentAccessScope!
  coverImageUri: String
  createdAt: DateTime!
  description: String
  id: ID!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  location: String
  name: String!
}

type ClubChatSummary {
  Admins: [UserAvatarData!]!
  Members: [UserAvatarData!]!
  Owner: UserAvatarData!
  coverImageUri: String
  id: ID!
  name: String!
}

type ClubInviteToken {
  active: Boolean!
  createdAt: DateTime!
  id: ID!
  inviteLimit: Int!
  joinedUserIds: [String!]!
  name: String!
}

type ClubInviteTokenData {
  Club: ClubSummary!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  token: String!
}

type ClubInviteTokens {
  id: ID!
  tokens: [ClubInviteToken!]!
}

type ClubMemberNote {
  User: UserAvatarData
  createdAt: DateTime!
  id: ID!
  note: String!
  tags: [String!]!
  updatedAt: DateTime!
}

type ClubMemberSummary {
  avatarUri: String
  countryCode: String
  displayName: String!
  id: ID!
  skills: [String!]!
  tagline: String
  townCity: String
}

type ClubMembers {
  Admins: [ClubMemberSummary!]!
  Members: [ClubMemberSummary!]!
  Owner: ClubMemberSummary!
  id: ID!
}

type ClubSummary {
  Admins: [UserAvatarData!]!
  Owner: UserAvatarData!
  contentAccessScope: ContentAccessScope!
  coverImageUri: String
  createdAt: DateTime!
  description: String
  id: ID!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  location: String
  memberCount: Int!
  name: String!
  planCount: Int!
  workoutCount: Int!
}

type ClubWithMetaDataAdmin {
  Admins: [UserAvatarData!]!
  ClubInviteTokens: [ClubInviteToken!]
  Members: [UserAvatarData!]!
  Owner: UserAvatarData!
  WorkoutPlans: [WorkoutPlanSummary!]
  Workouts: [WorkoutSummary!]
  contentAccessScope: ContentAccessScope!
  coverImageUri: String
  createdAt: DateTime!
  description: String
  id: ID!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  location: String
  metaTags: [String!]!
  name: String!
  reasonNotValidated: String
  validated: PublicContentValidationStatus!
}

type ClubWorkoutPlans {
  id: ID!
  workoutPlans: [WorkoutPlanSummary!]!
}

type ClubWorkouts {
  id: ID!
  workouts: [WorkoutSummary!]!
}

type Collection {
  WorkoutPlans: [WorkoutPlanSummary!]!
  Workouts: [WorkoutSummary!]!
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
}

type CompletedWorkoutPlanDayWorkout {
  id: ID!
  loggedWorkoutId: ID!
  workoutPlanDayWorkoutId: ID!
}

input ConnectRelationInput {
  id: ID!
}

enum ContentAccessScope {
  PRIVATE
  PUBLIC
}

input CopyWorkoutPlanDayToAnotherDayInput {
  copyToDay: Int!
  id: ID!
}

type CoreData {
  bodyAreas: [BodyArea!]!
  equipment: [Equipment!]!
  fitnessBenchmarkCategories: [FitnessBenchmarkCategory!]!
  moveTypes: [MoveType!]!
  progressWidgets: [ProgressWidget!]!
  standardMoves: [Move!]!
  workoutGoals: [WorkoutGoal!]!
  workoutSectionTypes: [WorkoutSectionType!]!
}

input CreateBodyTrackingEntryInput {
  bodyweight: Float
  bodyweightUnit: BodyweightUnit
  fatPercent: Float
  note: String
  photoUris: [String!]
}

input CreateClubInput {
  description: String
  location: String
  name: String!
}

input CreateClubInviteTokenInput {
  clubId: ID!
  inviteLimit: Int!
  name: String!
}

input CreateClubMemberNoteInput {
  clubId: ID!
  memberId: ID!
  note: String!
  tags: [String!]!
}

input CreateCollectionInput {
  description: String
  name: String!
}

input CreateCompletedWorkoutPlanDayWorkoutInput {
  loggedWorkoutId: ID!
  workoutPlanDayWorkoutId: ID!
  workoutPlanEnrolmentId: ID!
}

input CreateEquipmentInput {
  altNames: String
  loadAdjustable: Boolean!
  name: String!
}

input CreateFitnessBenchmarkInput {
  FitnessBenchmarkCategory: ConnectRelationInput!
  description: String
  instructionalVideoThumbUri: String
  instructionalVideoUri: String
  instructions: String
  name: String!
  scope: FitnessBenchmarkScope!
  type: FitnessBenchmarkScoreType!
}

input CreateFitnessBenchmarkScoreInput {
  FitnessBenchmark: ConnectRelationInput!
  completedOn: DateTime!
  note: String
  score: Float!
  videoThumbUri: String
  videoUri: String
}

input CreateFitnessBenchmarkWorkoutInput {
  FitnessBenchmarkWorkout: ConnectRelationInput!
  completedOn: DateTime!
  description: String
  instructionalVideoThumbUri: String
  instructionalVideoUri: String
  instructions: String
  moveDescriptions: [String!]!
  name: String!
  note: String
  pointsForMoveCompleted: [Int!]!
  rounds: Int!
  scope: FitnessBenchmarkScope!
  score: Int!
  type: FitnessBenchmarkWorkoutScoreType!
}

input CreateGymProfileInput {
  Equipments: [ConnectRelationInput!]
  description: String
  name: String!
}

input CreateLoggedWorkoutInput {
  GymProfile: ConnectRelationInput
  LoggedWorkoutSections: [CreateLoggedWorkoutSectionInLoggedWorkoutInput!]!
  ScheduledWorkout: ConnectRelationInput
  Workout: ConnectRelationInput
  WorkoutGoals: [ConnectRelationInput!]!
  WorkoutPlanDayWorkout: ConnectRelationInput
  WorkoutPlanEnrolment: ConnectRelationInput
  completedOn: DateTime!
  name: String!
  note: String
}

input CreateLoggedWorkoutMoveInLoggedWorkoutSetInput {
  Equipment: ConnectRelationInput
  Move: ConnectRelationInput!
  distanceUnit: DistanceUnit
  loadAmount: Float
  loadUnit: LoadUnit
  repType: WorkoutMoveRepType!
  reps: Float!
  sortPosition: Int!
  timeUnit: TimeUnit
}

input CreateLoggedWorkoutSectionInLoggedWorkoutInput {
  LoggedWorkoutSets: [CreateLoggedWorkoutSetInLoggedWorkoutSectionInput!]!
  WorkoutSectionType: ConnectRelationInput!
  name: String
  repScore: Int
  sortPosition: Int!
  timeTakenSeconds: Int!
}

input CreateLoggedWorkoutSetInLoggedWorkoutSectionInput {
  LoggedWorkoutMoves: [CreateLoggedWorkoutMoveInLoggedWorkoutSetInput!]!
  sectionRoundNumber: Int!
  sortPosition: Int!
  timeTakenSeconds: Int
}

input CreateMoveInput {
  BodyAreaMoveScores: [BodyAreaMoveScoreInput!]
  MoveType: ConnectRelationInput!
  RequiredEquipments: [ConnectRelationInput!]
  SelectableEquipments: [ConnectRelationInput!]
  demoVideoThumbUri: String
  demoVideoUri: String
  description: String
  name: String!
  scope: MoveScope
  searchTerms: String
  validRepTypes: [WorkoutMoveRepType!]!
}

input CreateScheduleForPlanEnrolmentInput {
  startDate: DateTime!
  workoutPlanEnrolmentId: ID!
}

input CreateScheduledWorkoutInput {
  GymProfile: ConnectRelationInput
  Workout: ConnectRelationInput!
  WorkoutPlanDayWorkout: ConnectRelationInput
  WorkoutPlanEnrolment: ConnectRelationInput
  note: String
  scheduledAt: DateTime!
}

input CreateSkillInput {
  experience: String
  name: String!
}

input CreateStreamFeedActivityExtraDataInput {
  articleUrl: String
  audioUrl: String
  caption: String
  creator: String
  imageUrl: String
  originalPostId: String
  tags: [String!]!
  title: String
  videoUrl: String
}

input CreateStreamFeedActivityInput {
  actor: String!
  extraData: CreateStreamFeedActivityExtraDataInput!
  object: String!
  verb: String!
}

input CreateUserDayLogMoodInput {
  energyScore: Int!
  moodScore: Int!
  note: String
  tags: [String!]
}

input CreateUserEatWellLogInput {
  dayNumber: Int!
  note: String
  rating: UserDayLogRating!
  year: Int!
}

input CreateUserExerciseLoadTrackerInput {
  Equipment: ConnectRelationInput
  Move: ConnectRelationInput!
  loadUnit: LoadUnit!
  reps: Int!
}

input CreateUserGoalInput {
  deadline: DateTime
  description: String
  name: String!
}

input CreateUserMeditationLogInput {
  dayNumber: Int!
  minutesLogged: Int!
  note: String
  year: Int!
}

input CreateUserSleepWellLogInput {
  dayNumber: Int!
  minutesSlept: Int
  note: String
  rating: UserDayLogRating!
  year: Int!
}

input CreateWorkoutInput {
  contentAccessScope: ContentAccessScope!
  name: String!
}

input CreateWorkoutMoveInSetInput {
  Equipment: ConnectRelationInput
  Move: ConnectRelationInput!
  distanceUnit: DistanceUnit
  loadAmount: Float!
  loadUnit: LoadUnit
  repType: WorkoutMoveRepType!
  reps: Float!
  sortPosition: Int!
  timeUnit: TimeUnit
}

input CreateWorkoutMoveInput {
  Equipment: ConnectRelationInput
  Move: ConnectRelationInput!
  WorkoutSet: ConnectRelationInput!
  distanceUnit: DistanceUnit
  loadAmount: Float!
  loadUnit: LoadUnit
  repType: WorkoutMoveRepType!
  reps: Float!
  sortPosition: Int!
  timeUnit: TimeUnit
}

input CreateWorkoutPlanDayWithWorkoutInput {
  Workout: ConnectRelationInput!
  WorkoutPlan: ConnectRelationInput!
  dayNumber: Int!
}

input CreateWorkoutPlanDayWorkoutInput {
  Workout: ConnectRelationInput!
  WorkoutPlanDay: ConnectRelationInput!
  note: String
  sortPosition: Int!
}

input CreateWorkoutPlanInput {
  contentAccessScope: ContentAccessScope!
  name: String!
}

input CreateWorkoutPlanReviewInput {
  WorkoutPlan: ConnectRelationInput!
  comment: String
  score: Float!
}

input CreateWorkoutSectionInput {
  Workout: ConnectRelationInput!
  WorkoutSectionType: ConnectRelationInput!
  classAudioUri: String
  classVideoThumbUri: String
  classVideoUri: String
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  name: String
  note: String
  rounds: Int
  sortPosition: Int!
  timecap: Int
}

input CreateWorkoutSetInput {
  WorkoutSection: ConnectRelationInput!
  duration: Int
  sortPosition: Int!
}

input CreateWorkoutSetWithWorkoutMovesInput {
  workoutMoves: [CreateWorkoutMoveInSetInput!]!
  workoutSet: CreateWorkoutSetInput!
}

input CreateWorkoutTagInput {
  tag: String!
}

scalar DateTime

input DeleteClubInviteTokenInput {
  clubId: ID!
  tokenId: ID!
}

input DeleteCompletedWorkoutPlanDayWorkoutInput {
  workoutPlanDayWorkoutId: ID!
  workoutPlanEnrolmentId: ID!
}

enum DifficultyLevel {
  ADVANCED
  CHALLENGING
  ELITE
  INTERMEDIATE
  LIGHT
}

enum DistanceUnit {
  KILOMETRES
  METRES
  MILES
  YARDS
}

type Equipment {
  altNames: String
  id: ID!
  loadAdjustable: Boolean!
  name: String!
}

type FitnessBenchmark {
  FitnessBenchmarkCategory: FitnessBenchmarkCategory!
  FitnessBenchmarkScores: [FitnessBenchmarkScore!]
  createdAt: DateTime!
  description: String
  id: ID!
  instructionalVideoThumbUri: String
  instructionalVideoUri: String
  instructions: String
  name: String!
  scope: FitnessBenchmarkScope!
  type: FitnessBenchmarkScoreType!
}

type FitnessBenchmarkCategory {
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
}

enum FitnessBenchmarkScope {
  CUSTOM
  STANDARD
}

type FitnessBenchmarkScore {
  User: UserAvatarData
  completedOn: DateTime!
  createdAt: DateTime!
  id: ID!
  note: String
  score: Float!
  videoThumbUri: String
  videoUri: String
}

enum FitnessBenchmarkScoreType {
  FASTESTTIMEDISTANCE
  FASTESTTIMEREPS
  LONGESTDISTANCE
  MAXLOAD
  TIMEDMAXREPS
  UNBROKENMAXREPS
  UNBROKENMAXTIME
}

type FitnessBenchmarkWorkout {
  FitnessBenchmarkWorkoutScores: [FitnessBenchmarkWorkoutScore!]
  createdAt: DateTime!
  description: String
  id: ID!
  instructionalVideoThumbUri: String
  instructionalVideoUri: String
  instructions: String
  moveDescriptions: [String!]!
  name: String!
  pointsForMoveCompleted: [Int!]!
  rounds: Int!
  scope: FitnessBenchmarkScope!
  type: FitnessBenchmarkWorkoutScoreType!
}

type FitnessBenchmarkWorkoutScore {
  User: UserAvatarData
  completedOn: DateTime!
  createdAt: DateTime!
  id: ID!
  note: String
  score: Int!
}

enum FitnessBenchmarkWorkoutScoreType {
  AMRAP
  FORTIME
}

type ForTimeMove {
  Equipment: Equipment
  Move: Move!
  createdAt: DateTime!
  id: ID!
  note: String
  updatedAt: DateTime!
}

type ForTimeSection {
  ForTimeMoves: [ForTimeMove!]!
  createdAt: DateTime!
  id: ID!
  moveOrder: [String!]!
  name: String
  note: String
  updatedAt: DateTime!
}

type ForTimeSession {
  ForTimeSections: [ForTimeSection!]!
  createdAt: DateTime!
  id: ID!
  name: String
  note: String
  repeats: Int!
  sectionOrder: [String!]!
  timecapSeconds: Int!
  updatedAt: DateTime!
}

enum Gender {
  FEMALE
  MALE
  NONBINARY
  PNTS
}

type GymProfile {
  Equipments: [Equipment!]!
  description: String
  id: ID!
  name: String!
}

type IntervalExercise {
  IntervalSets: [IntervalSet!]!
  createdAt: DateTime!
  id: ID!
  intervalSetOrder: [String!]!
  note: String
  updatedAt: DateTime!
}

type IntervalSession {
  IntervalExercises: [IntervalExercise!]!
  createdAt: DateTime!
  id: ID!
  intervalExerciseOrder: [String!]!
  intervals: [Int!]!
  name: String
  note: String
  repeats: Int!
  updatedAt: DateTime!
}

type IntervalSet {
  Equipment: Equipment
  Move: Move!
  createdAt: DateTime!
  id: ID!
  note: String
  updatedAt: DateTime!
}

type InviteTokenError {
  message: String!
}

scalar JSON

enum JoinClubRequestStatus {
  ACCEPTED
  PENDING
  REJECTED
}

type LifetimeLogStatsSummary {
  minutesWorked: Int!
  sessionsLogged: Int!
}

enum LoadUnit {
  BODYWEIGHTPERCENT
  KG
  LB
  PERCENTMAX
}

type LoggedWorkout {
  GymProfile: GymProfile
  LoggedWorkoutSections: [LoggedWorkoutSection!]!
  User: UserAvatarData
  WorkoutGoals: [WorkoutGoal!]!
  completedOn: DateTime!
  id: ID!
  name: String!
  note: String
  workoutId: ID
}

type LoggedWorkoutMove {
  Equipment: Equipment
  Move: Move!
  distanceUnit: DistanceUnit!
  id: ID!
  loadAmount: Float!
  loadUnit: LoadUnit!
  repType: WorkoutMoveRepType!
  reps: Float!
  sortPosition: Int!
  timeUnit: TimeUnit!
}

type LoggedWorkoutSection {
  LoggedWorkoutSets: [LoggedWorkoutSet!]!
  WorkoutSectionType: WorkoutSectionType!
  id: ID!
  name: String
  repScore: Int
  sortPosition: Int!
  timeTakenSeconds: Int!
}

type LoggedWorkoutSet {
  LoggedWorkoutMoves: [LoggedWorkoutMove!]!
  id: ID!
  sectionRoundNumber: Int!
  sortPosition: Int!
  timeTakenSeconds: Int
}

input MarkAnnouncementUpdateAsSeenInput {
  announcementUpdateId: ID!
  userId: ID!
}

input MarkWelcomeTodoItemAsSeenInput {
  userId: ID!
  welcomeTodoItemId: ID!
}

type MobilityMove {
  MobilityMoveType: MobilityMoveType!
  archived: Boolean!
  createdAt: DateTime!
  demoVideoThumbUri: String
  demoVideoUri: String
  description: String
  id: ID!
  name: String!
  scope: MoveScope!
  searchTerms: String
}

type MobilityMoveType {
  createdAt: DateTime!
  description: String
  id: ID!
  imageUri: String
  name: String!
}

type MobilitySession {
  MobilityMoves: [MobilityMove!]!
  createdAt: DateTime!
  id: ID!
  moveOrder: [String!]!
  name: String
  note: String
  updatedAt: DateTime!
}

type Move {
  BodyAreaMoveScores: [BodyAreaMoveScore!]!
  MoveType: MoveType!
  RequiredEquipments: [Equipment!]!
  SelectableEquipments: [Equipment!]!
  archived: Boolean!
  demoVideoThumbUri: String
  demoVideoUri: String
  description: String
  id: ID!
  name: String!
  scope: MoveScope!
  searchTerms: String
  validRepTypes: [WorkoutMoveRepType!]!
}

"""
Standard moves are built in / official.
Custom moves are created by users.
"""
enum MoveScope {
  CUSTOM
  STANDARD
}

type MoveType {
  description: String
  id: ID!
  imageUri: String
  name: String!
}

input MoveWorkoutPlanDayToAnotherDayInput {
  id: ID!
  moveToDay: Int!
}

type Mutation {
  addDocumentToSkill(data: AddDocumentToSkillInput!): Skill!
  addUserToClubViaInviteToken(clubInviteTokenId: ID!, userId: ID!): ID!
  addWorkoutPlanToClub(clubId: ID!, workoutPlanId: ID!): ClubWorkoutPlans!
  addWorkoutPlanToCollection(
    data: AddWorkoutPlanToCollectionInput!
  ): Collection!
  addWorkoutToClub(clubId: ID!, workoutId: ID!): ClubWorkouts!
  addWorkoutToCollection(data: AddWorkoutToCollectionInput!): Collection!
  archiveCustomMoveById(id: ID!): Move!
  archiveWorkoutById(id: ID!): Workout!
  archiveWorkoutPlanById(id: ID!): WorkoutPlan!
  clearScheduleForPlanEnrolment(enrolmentId: ID!): WorkoutPlanEnrolment!
  clearWorkoutPlanEnrolmentProgress(enrolmentId: ID!): WorkoutPlanEnrolment!
  copyWorkoutPlanDayToAnotherDay(
    data: CopyWorkoutPlanDayToAnotherDayInput!
  ): WorkoutPlanDay!
  createBodyTrackingEntry(
    data: CreateBodyTrackingEntryInput!
  ): BodyTrackingEntry!
  createClub(data: CreateClubInput!): ClubSummary!
  createClubInviteToken(data: CreateClubInviteTokenInput!): ClubInviteTokens!
  createClubMemberNote(data: CreateClubMemberNoteInput!): ClubMemberNote!
  createClubMembersFeedPost(
    clubId: ID!
    data: CreateStreamFeedActivityInput!
  ): StreamEnrichedActivity!
  createCollection(data: CreateCollectionInput!): Collection!
  createCompletedWorkoutPlanDayWorkout(
    data: CreateCompletedWorkoutPlanDayWorkoutInput!
  ): WorkoutPlanEnrolment!
  createEquipment(data: CreateEquipmentInput!): Equipment
  createFitnessBenchmark(data: CreateFitnessBenchmarkInput!): FitnessBenchmark!
  createFitnessBenchmarkScore(
    data: CreateFitnessBenchmarkScoreInput!
  ): FitnessBenchmark!
  createFitnessBenchmarkWorkout(
    data: CreateFitnessBenchmarkWorkoutInput!
  ): FitnessBenchmarkWorkout!
  createGymProfile(data: CreateGymProfileInput!): GymProfile!
  createLoggedWorkout(data: CreateLoggedWorkoutInput!): LoggedWorkout!
  createMove(data: CreateMoveInput!): Move!
  createScheduleForPlanEnrolment(
    data: CreateScheduleForPlanEnrolmentInput!
  ): WorkoutPlanEnrolment!
  createScheduledWorkout(data: CreateScheduledWorkoutInput!): ScheduledWorkout!
  createSkill(data: CreateSkillInput!): Skill!
  createUserDayLogMood(data: CreateUserDayLogMoodInput!): UserDayLogMood!
  createUserEatWellLog(data: CreateUserEatWellLogInput!): UserEatWellLog!
  createUserExerciseLoadTracker(
    data: CreateUserExerciseLoadTrackerInput!
  ): UserExerciseLoadTracker!
  createUserGoal(data: CreateUserGoalInput!): UserGoal!
  createUserMeditationLog(
    data: CreateUserMeditationLogInput!
  ): UserMeditationLog!
  createUserSleepWellLog(data: CreateUserSleepWellLogInput!): UserSleepWellLog!
  createWorkout(data: CreateWorkoutInput!): Workout!
  createWorkoutMove(data: CreateWorkoutMoveInput!): WorkoutMove!
  createWorkoutPlan(data: CreateWorkoutPlanInput!): WorkoutPlan!
  createWorkoutPlanDayWithWorkout(
    data: CreateWorkoutPlanDayWithWorkoutInput!
  ): WorkoutPlanDay!
  createWorkoutPlanDayWorkout(
    data: CreateWorkoutPlanDayWorkoutInput!
  ): WorkoutPlanDayWorkout!
  createWorkoutPlanEnrolment(workoutPlanId: ID!): WorkoutPlanEnrolmentWithPlan!
  createWorkoutPlanReview(
    data: CreateWorkoutPlanReviewInput!
  ): WorkoutPlanReview!
  createWorkoutSection(data: CreateWorkoutSectionInput!): WorkoutSection!
  createWorkoutSet(data: CreateWorkoutSetInput!): WorkoutSet!
  createWorkoutSetWithWorkoutMoves(
    data: CreateWorkoutSetWithWorkoutMovesInput!
  ): WorkoutSet!
  createWorkoutTag(data: CreateWorkoutTagInput!): WorkoutTag!
  deleteBodyTrackingEntryById(id: ID!): ID!
  deleteClub(id: ID!): ID!
  deleteClubInviteToken(data: DeleteClubInviteTokenInput!): ClubInviteTokens!
  deleteClubMembersFeedPost(activityId: ID!): ID!
  deleteCollectionById(id: ID!): ID!
  deleteCompletedWorkoutPlanDayWorkout(
    data: DeleteCompletedWorkoutPlanDayWorkoutInput!
  ): WorkoutPlanEnrolment!
  deleteFitnessBenchmark(id: ID!): ID!
  deleteFitnessBenchmarkScore(id: ID!): FitnessBenchmark!
  deleteFitnessBenchmarkWorkout(id: ID!): ID!
  deleteGymProfileById(id: ID!): ID
  deleteLoggedWorkoutById(id: ID!): ID!
  deleteLoggedWorkoutMove(id: ID!): ID!
  deleteScheduledWorkoutById(id: ID!): ID!
  deleteSkillById(id: ID!): ID!
  deleteUserDayLogMood(id: ID!): ID!
  deleteUserExerciseLoadTracker(id: ID!): ID!
  deleteUserGoal(id: ID!): ID!
  deleteWorkoutMoveById(id: ID!): ID!
  deleteWorkoutPlanDayWorkoutById(id: ID!): ID!
  deleteWorkoutPlanDaysById(ids: [ID!]!): [ID!]!
  deleteWorkoutPlanEnrolmentById(id: ID!): ID!
  deleteWorkoutPlanReviewById(id: ID!): ID!
  deleteWorkoutSectionById(id: ID!): ID!
  deleteWorkoutSetById(id: ID!): ID!
  deleteWorkoutTagById(id: ID!): ID!
  duplicateWorkoutById(id: ID!): Workout!
  duplicateWorkoutMoveById(id: ID!): WorkoutMove!
  duplicateWorkoutSetById(id: ID!): WorkoutSet!
  giveMemberAdminStatus(clubId: ID!, userId: ID!): ClubMembers!
  makeCopyWorkoutById(id: ID!): Workout!
  markAnnouncementUpdateAsSeen(data: MarkAnnouncementUpdateAsSeenInput!): ID!
  markWelcomeTodoItemAsSeen(data: MarkWelcomeTodoItemAsSeenInput!): ID!
  moveWorkoutPlanDayToAnotherDay(
    data: MoveWorkoutPlanDayToAnotherDayInput!
  ): WorkoutPlanDay!
  removeDocumentFromSkill(data: RemoveDocumentFromSkillInput!): Skill!
  removeMemberAdminStatus(clubId: ID!, userId: ID!): ClubMembers!
  removeUserFromClub(clubId: ID!, userToRemoveId: ID!): ClubMembers!
  removeWorkoutFromClub(clubId: ID!, workoutId: ID!): ClubWorkouts!
  removeWorkoutFromCollection(
    data: RemoveWorkoutFromCollectionInput!
  ): Collection!
  removeWorkoutPlanFromClub(clubId: ID!, workoutPlanId: ID!): ClubWorkoutPlans!
  removeWorkoutPlanFromCollection(
    data: RemoveWorkoutPlanFromCollectionInput!
  ): Collection!
  reorderWorkoutMoves(
    data: [UpdateSortPositionInput!]!
  ): [SortPositionUpdated!]!
  reorderWorkoutPlanDayWorkouts(
    data: [UpdateSortPositionInput!]!
  ): [SortPositionUpdated!]!
  reorderWorkoutSections(
    data: [UpdateSortPositionInput!]!
  ): [SortPositionUpdated!]!
  reorderWorkoutSets(data: [UpdateSortPositionInput!]!): [SortPositionUpdated!]!
  softDeleteMoveById(id: ID!): ID!
  softDeleteWorkoutPlanById(id: ID!): ID!
  unarchiveCustomMoveById(id: ID!): Move!
  unarchiveWorkoutById(id: ID!): Workout!
  unarchiveWorkoutPlanById(id: ID!): WorkoutPlan!
  updateBodyTrackingEntry(
    data: UpdateBodyTrackingEntryInput!
  ): BodyTrackingEntry!
  updateClubInviteToken(data: UpdateClubInviteTokenInput!): ClubInviteTokens!
  updateClubMemberNote(data: UpdateClubMemberNoteInput!): ClubMemberNote!
  updateClubMetaDataAdmin(
    data: UpdateClubMetaDataAdminInput!
  ): ClubWithMetaDataAdmin!
  updateClubSummary(data: UpdateClubSummaryInput!): ClubSummary!
  updateCollection(data: UpdateCollectionInput!): Collection!
  updateEquipment(data: UpdateEquipmentInput!): Equipment
  updateFitnessBenchmark(data: UpdateFitnessBenchmarkInput!): FitnessBenchmark!
  updateFitnessBenchmarkScore(
    data: UpdateFitnessBenchmarkScoreInput!
  ): FitnessBenchmark!
  updateFitnessBenchmarkWorkout(
    data: UpdateFitnessBenchmarkWorkoutInput!
  ): FitnessBenchmarkWorkout!
  updateGymProfile(data: UpdateGymProfileInput!): GymProfile!
  updateLoggedWorkout(data: UpdateLoggedWorkoutInput!): LoggedWorkout!
  updateLoggedWorkoutMove(
    data: UpdateLoggedWorkoutMoveInput!
  ): LoggedWorkoutMove!
  updateLoggedWorkoutSection(
    data: UpdateLoggedWorkoutSectionInput!
  ): LoggedWorkoutSection!
  updateLoggedWorkoutSet(data: UpdateLoggedWorkoutSetInput!): LoggedWorkoutSet!
  updateMove(data: UpdateMoveInput!): Move!
  updateScheduledWorkout(data: UpdateScheduledWorkoutInput!): ScheduledWorkout!
  updateSkill(data: UpdateSkillInput!): Skill!
  updateUserEatWellLog(data: UpdateUserEatWellLogInput!): UserEatWellLog!
  updateUserGoal(data: UpdateUserGoalInput!): UserGoal!
  updateUserMeditationLog(
    data: UpdateUserMeditationLogInput!
  ): UserMeditationLog!
  updateUserProfile(data: UpdateUserProfileInput!): UpdateUserProfileResult!
  updateUserSleepWellLog(data: UpdateUserSleepWellLogInput!): UserSleepWellLog!
  updateWorkout(data: UpdateWorkoutInput!): Workout!
  updateWorkoutMetaDataAdmin(
    data: UpdateWorkoutMetaDataAdminInput!
  ): WorkoutWithMetaDataAdmin!
  updateWorkoutMove(data: UpdateWorkoutMoveInput!): WorkoutMove!
  updateWorkoutMoves(data: [UpdateWorkoutMoveInput!]!): [WorkoutMove!]!
  updateWorkoutPlan(data: UpdateWorkoutPlanInput!): WorkoutPlan!
  updateWorkoutPlanDay(data: UpdateWorkoutPlanDayInput!): WorkoutPlanDay!
  updateWorkoutPlanDayWorkout(
    data: UpdateWorkoutPlanDayWorkoutInput!
  ): WorkoutPlanDayWorkout!
  updateWorkoutPlanMetaDataAdmin(
    data: UpdateWorkoutPlanMetaDataAdminInput!
  ): WorkoutPlanWithMetaDataAdmin
  updateWorkoutPlanReview(
    data: UpdateWorkoutPlanReviewInput!
  ): WorkoutPlanReview!
  updateWorkoutSection(data: UpdateWorkoutSectionInput!): WorkoutSection!
  updateWorkoutSet(data: UpdateWorkoutSetInput!): WorkoutSet!
  updateWorkoutTag(data: UpdateWorkoutTagInput!): WorkoutTag!
  userJoinPublicClub(clubId: ID!): ID!
}

type ProgressWidget {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  subtitle: String
}

type PublicClubCountsAdmin {
  invalid: Int!
  pending: Int!
  valid: Int!
}

type PublicClubSummaryAdmin {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

enum PublicContentValidationStatus {
  INVALID
  PENDING
  PENDINGUPDATED
  VALID
}

type PublicWorkoutCountsAdmin {
  invalid: Int!
  pending: Int!
  valid: Int!
}

type PublicWorkoutPlanCountsAdmin {
  invalid: Int!
  pending: Int!
  valid: Int!
}

type PublicWorkoutPlanSummaryAdmin {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type PublicWorkoutSummaryAdmin {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type Query {
  adminAllUsers: [UserProfileSummary!]!
  adminPublicClubById(id: ID!): ClubWithMetaDataAdmin!
  adminPublicClubCounts: PublicClubCountsAdmin!
  adminPublicClubSummaries(
    status: PublicContentValidationStatus!
  ): [PublicClubSummaryAdmin!]!
  adminPublicWorkoutById(id: ID!): WorkoutWithMetaDataAdmin!
  adminPublicWorkoutCounts: PublicWorkoutCountsAdmin!
  adminPublicWorkoutPlanById(id: ID!): WorkoutPlanWithMetaDataAdmin!
  adminPublicWorkoutPlanCounts: PublicWorkoutPlanCountsAdmin!
  adminPublicWorkoutPlanSummaries(
    status: PublicContentValidationStatus!
  ): [PublicWorkoutPlanSummaryAdmin!]!
  adminPublicWorkoutSummaries(
    status: PublicContentValidationStatus!
  ): [PublicWorkoutSummaryAdmin!]!
  adminStandardFitnessBenchmarkWorkouts: [FitnessBenchmarkWorkout!]!
  adminStandardFitnessBenchmarks: [FitnessBenchmark!]!
  announcementUpdates: [AnnouncementUpdate!]!
  bodyTrackingEntries: [BodyTrackingEntry!]!
  checkClubInviteToken(id: ID!): CheckClubInviteTokenResult!
  checkUniqueClubName(name: String!): Boolean!
  checkUniqueDisplayName(displayName: String!): Boolean!
  checkUserClubMemberStatus(clubId: ID!): UserClubMemberStatus!
  clubChatSummary(clubId: ID!): ClubChatSummary
  clubInviteTokens(clubId: ID!): ClubInviteTokens!
  clubMemberNotes(
    clubId: ID!
    cursor: ID
    memberId: ID!
    take: Int
  ): [ClubMemberNote!]!
  clubMembers(clubId: ID!): ClubMembers!
  clubMembersFeedPosts(
    clubId: ID!
    limit: Int!
    offset: Int!
  ): [StreamEnrichedActivity!]!
  clubSummaries(ids: [ID!]!): [ClubSummary!]!
  clubSummary(id: ID!): ClubSummary
  clubWorkoutPlans(clubId: ID!): ClubWorkoutPlans!
  clubWorkouts(clubId: ID!): ClubWorkouts!
  coreData: CoreData!
  customMoves: [Move!]!
  gymProfiles: [GymProfile!]!
  lifetimeLogStatsSummary(userId: ID!): LifetimeLogStatsSummary!
  logCountByWorkout(id: ID!): Int!
  loggedWorkoutById(id: ID!): LoggedWorkout
  publicClubs: [ClubSummary!]!
  publicWorkoutPlans(
    cursor: ID
    filters: WorkoutPlanFiltersInput
    take: Int
  ): [WorkoutPlanSummary!]!
  publicWorkouts(
    cursor: ID
    filters: WorkoutFiltersInput
    take: Int
  ): [WorkoutSummary!]!
  textSearchUserNames(text: String!): [TextSearchResult!]
  textSearchUserProfiles(text: String!): [UserProfileSummary!]
  textSearchWorkoutNames(text: String!): [TextSearchResult!]
  textSearchWorkoutPlanNames(text: String!): [TextSearchResult!]
  textSearchWorkoutPlans(text: String!): [WorkoutPlanSummary!]
  textSearchWorkouts(text: String!): [WorkoutSummary!]
  userArchivedCustomMoves: [Move!]!
  userArchivedWorkoutPlans: [WorkoutPlan!]!
  userArchivedWorkouts: [Workout!]!
  userAvatarById(id: ID!): UserAvatarData
  userAvatars(ids: [ID!]!): [UserAvatarData!]!
  userBenchmarkWorkouts: [FitnessBenchmarkWorkout!]!
  userClubs: [ClubSummary!]!
  userCollectionById(id: ID!): Collection!
  userCollections: [Collection!]!
  userDayLogMoods: [UserDayLogMood!]!
  userEatWellLogs: [UserEatWellLog!]!
  userExerciseLoadTrackers: [UserExerciseLoadTracker!]!
  userFitnessBenchmarks: [FitnessBenchmark!]!
  userGoals: [UserGoal!]!
  userLoggedWorkouts: [LoggedWorkout!]!
  userMeditationLogs: [UserMeditationLog!]!
  userProfile(userId: ID!): UserProfile
  userProfiles(cursor: ID, take: Int): [UserProfileSummary!]!
  userPublicWorkoutPlans(userId: ID!): [WorkoutPlanSummary!]!
  userPublicWorkouts(userId: ID!): [WorkoutSummary!]!
  userRecentlyViewedObjects: [UserRecentlyViewedObject!]!
  userScheduledWorkouts: [ScheduledWorkout!]!
  userSleepWellLogs: [UserSleepWellLog!]!
  userWorkoutPlans: [WorkoutPlanSummary!]!
  userWorkoutTags: [WorkoutTag!]!
  userWorkouts: [WorkoutSummary!]!
  validateToken: Boolean!
  welcomeTodoItems: [WelcomeTodoItem!]!
  workoutById(id: ID!): Workout
  workoutPlanById(id: ID!): WorkoutPlan
  workoutPlanEnrolmentById(id: ID!): WorkoutPlanEnrolmentWithPlan
  workoutPlanEnrolments: [WorkoutPlanEnrolmentSummary!]!
}

input RemoveDocumentFromSkillInput {
  id: ID!
}

input RemoveWorkoutFromClubInput {
  Workout: ConnectRelationInput!
  id: ID!
}

input RemoveWorkoutFromCollectionInput {
  Workout: ConnectRelationInput!
  collectionId: ID!
}

input RemoveWorkoutPlanFromClubInput {
  WorkoutPlan: ConnectRelationInput!
  id: ID!
}

input RemoveWorkoutPlanFromCollectionInput {
  WorkoutPlan: ConnectRelationInput!
  collectionId: ID!
}

type ResistanceExercise {
  ResistanceSets: [ResistanceSet!]!
  createdAt: DateTime!
  id: ID!
  note: String
  setOrder: [String!]!
  updatedAt: DateTime!
}

type ResistanceSession {
  ResistanceExercises: [ResistanceExercise!]!
  createdAt: DateTime!
  id: ID!
  name: String
  note: String
  setOrder: [String!]!
  updatedAt: DateTime!
}

type ResistanceSet {
  Equipment: Equipment
  Move: Move!
  createdAt: DateTime!
  id: ID!
  note: String
  reps: Int
  updatedAt: DateTime!
}

type ScheduledWorkout {
  GymProfile: GymProfile
  Workout: WorkoutSummary
  createdAt: DateTime!
  id: ID!
  loggedWorkoutId: ID
  note: String
  scheduledAt: DateTime!
  workoutPlanDayWorkoutId: ID
  workoutPlanEnrolmentId: ID
  workoutPlanName: String
}

type Skill {
  awardingBody: String
  certificateRef: String
  certification: String
  createdAt: DateTime!
  documentUri: String
  experience: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type SortPositionUpdated {
  id: ID!
  sortPosition: Int!
}

type StreamActivityExtraData {
  articleUrl: String
  audioUrl: String
  caption: String
  club: StreamFeedClub
  creator: StreamFeedUser
  imageUrl: String
  originalPostId: String
  tags: [String!]!
  title: String
  videoUrl: String
}

type StreamActivityReactionCounts {
  comments: Int
  likes: Int
}

type StreamEnrichedActivity {
  actor: StreamFeedUser!
  extraData: StreamActivityExtraData!
  id: String!
  object: String!
  reactionCounts: StreamActivityReactionCounts
  time: DateTime!
  userLikeReactionId: String
  verb: String!
}

type StreamFeedClub {
  data: StreamFeedClubData!
  id: String!
}

type StreamFeedClubData {
  image: String
  name: String
}

type StreamFeedUser {
  data: StreamFeedUserData!
  id: String!
}

type StreamFeedUserData {
  image: String
  name: String
}

type TextSearchResult {
  id: ID!
  name: String!
}

enum TimeUnit {
  HOURS
  MINUTES
  SECONDS
}

input UpdateBodyTrackingEntryInput {
  bodyweight: Float
  bodyweightUnit: BodyweightUnit
  fatPercent: Float
  id: ID!
  note: String
  photoUris: [String!]
}

input UpdateClubInviteTokenInput {
  active: Boolean
  clubId: ID!
  id: ID!
  inviteLimit: Int
  name: String
}

input UpdateClubMemberNoteInput {
  id: ID!
  note: String
  tags: [String!]
}

input UpdateClubMetaDataAdminInput {
  id: ID!
  metaTags: [String!]
  reasonNotValidated: String
  validated: PublicContentValidationStatus
}

input UpdateClubSummaryInput {
  contentAccessScope: ContentAccessScope
  coverImageUri: String
  description: String
  id: ID!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  location: String
  name: String
}

input UpdateCollectionInput {
  description: String
  id: ID!
  name: String
}

input UpdateEquipmentInput {
  altNames: String
  id: ID!
  loadAdjustable: Boolean
  name: String
}

input UpdateFitnessBenchmarkInput {
  FitnessBenchmarkCategory: ConnectRelationInput
  description: String
  id: ID!
  instructionalVideoThumbUri: String
  instructionalVideoUri: String
  instructions: String
  name: String
  scope: FitnessBenchmarkScope
  type: FitnessBenchmarkScoreType
}

input UpdateFitnessBenchmarkScoreInput {
  completedOn: DateTime
  id: ID!
  note: String
  score: Float
  videoThumbUri: String
  videoUri: String
}

input UpdateFitnessBenchmarkWorkoutInput {
  description: String
  id: ID!
  instructionalVideoThumbUri: String
  instructionalVideoUri: String
  instructions: String
  moveDescriptions: [String!]
  name: String
  pointsForMoveCompleted: [Int!]
  rounds: Int
  scope: FitnessBenchmarkScope
  type: FitnessBenchmarkWorkoutScoreType
}

input UpdateGymProfileInput {
  Equipments: [ConnectRelationInput!]
  description: String
  id: ID!
  name: String
}

input UpdateLoggedWorkoutInput {
  GymProfile: ConnectRelationInput
  WorkoutGoals: [ConnectRelationInput!]!
  completedOn: DateTime
  id: ID!
  note: String
}

input UpdateLoggedWorkoutMoveInput {
  Equipment: ConnectRelationInput
  Move: ConnectRelationInput
  distanceUnit: DistanceUnit
  id: ID!
  loadAmount: Float
  loadUnit: LoadUnit
  repType: WorkoutMoveRepType
  reps: Float!
  timeUnit: TimeUnit
}

input UpdateLoggedWorkoutSectionInput {
  id: ID!
  repScore: Int
  timeTakenSeconds: Int
}

input UpdateLoggedWorkoutSetInput {
  id: ID!
  timeTakenSeconds: Int
}

input UpdateMoveInput {
  BodyAreaMoveScores: [BodyAreaMoveScoreInput!]
  MoveType: ConnectRelationInput
  RequiredEquipments: [ConnectRelationInput!]
  SelectableEquipments: [ConnectRelationInput!]
  demoVideoThumbUri: String
  demoVideoUri: String
  description: String
  id: ID!
  name: String
  scope: MoveScope
  searchTerms: String
  validRepTypes: [WorkoutMoveRepType!]
}

input UpdateScheduledWorkoutInput {
  GymProfile: ConnectRelationInput
  LoggedWorkout: ConnectRelationInput
  id: ID!
  note: String
  scheduledAt: DateTime
}

input UpdateSkillInput {
  awardingBody: String
  certificateRef: String
  certification: String
  documentUri: String
  experience: String
  id: ID!
  name: String
}

input UpdateSortPositionInput {
  id: ID!
  sortPosition: Int!
}

input UpdateUserEatWellLogInput {
  id: ID!
  note: String
  rating: UserDayLogRating
}

input UpdateUserGoalInput {
  completedDate: DateTime
  deadline: DateTime
  description: String
  id: ID!
  name: String
}

input UpdateUserMeditationLogInput {
  id: ID!
  minutesLogged: Int
  note: String
}

input UpdateUserProfileInput {
  activeFitnessBenchmarks: [String!]
  activeProgressWidgets: [String!]
  avatarUri: String
  bio: String
  birthdate: DateTime
  countryCode: String
  displayName: String
  firstname: String
  gender: Gender
  hasOnboarded: Boolean
  instagramHandle: String
  introVideoThumbUri: String
  introVideoUri: String
  lastname: String
  linkedinHandle: String
  tagline: String
  tiktokHandle: String
  townCity: String
  userProfileScope: UserProfileScope
  workoutsPerWeekTarget: Int
  youtubeHandle: String
}

type UpdateUserProfileResult {
  activeFitnessBenchmarks: [String!]
  activeProgressWidgets: [String!]
  avatarUri: String
  bio: String
  birthdate: DateTime
  countryCode: String
  displayName: String
  firstname: String
  gender: Gender
  hasOnboarded: Boolean
  id: ID!
  instagramHandle: String
  introVideoThumbUri: String
  introVideoUri: String
  lastname: String
  linkedinHandle: String
  tagline: String
  tiktokHandle: String
  townCity: String
  userProfileScope: UserProfileScope
  workoutsPerWeekTarget: Int
  youtubeHandle: String
}

input UpdateUserSleepWellLogInput {
  id: ID!
  minutesSlept: Int
  note: String
  rating: UserDayLogRating
}

input UpdateWorkoutInput {
  WorkoutGoals: [ConnectRelationInput!]
  WorkoutTags: [ConnectRelationInput!]
  contentAccessScope: ContentAccessScope
  coverImageUri: String
  description: String
  id: ID!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  lengthMinutes: Int
  name: String
}

input UpdateWorkoutMetaDataAdminInput {
  difficultyLevel: DifficultyLevel
  id: ID!
  metaTags: [String!]
  reasonNotValidated: String
  validated: PublicContentValidationStatus
}

input UpdateWorkoutMoveInput {
  Equipment: ConnectRelationInput
  Move: ConnectRelationInput
  distanceUnit: DistanceUnit
  id: ID!
  loadAmount: Float
  loadUnit: LoadUnit
  repType: WorkoutMoveRepType
  reps: Float
  timeUnit: TimeUnit
}

input UpdateWorkoutPlanDayInput {
  dayNumber: Int
  id: ID!
  note: String
}

input UpdateWorkoutPlanDayWorkoutInput {
  Workout: ConnectRelationInput
  WorkoutPlanDay: ConnectRelationInput
  id: ID!
  note: String
}

input UpdateWorkoutPlanInput {
  WorkoutTags: [ConnectRelationInput!]
  contentAccessScope: ContentAccessScope
  coverImageUri: String
  daysPerWeek: Int
  description: String
  id: ID!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  lengthWeeks: Int
  name: String
}

input UpdateWorkoutPlanMetaDataAdminInput {
  difficultyLevel: DifficultyLevel
  id: ID!
  metaTags: [String!]
  reasonNotValidated: String
  validated: PublicContentValidationStatus
}

input UpdateWorkoutPlanReviewInput {
  comment: String
  id: ID!
  score: Float
}

input UpdateWorkoutSectionInput {
  WorkoutSectionType: ConnectRelationInput
  classAudioUri: String
  classVideoThumbUri: String
  classVideoUri: String
  id: ID!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  name: String
  note: String
  rounds: Int
  timecap: Int
}

input UpdateWorkoutSetInput {
  duration: Int
  id: ID!
}

input UpdateWorkoutTagInput {
  id: ID!
  tag: String!
}

type UserAvatarData {
  avatarUri: String
  displayName: String!
  id: ID!
}

enum UserClubMemberStatus {
  ADMIN
  MEMBER
  NONE
  OWNER
}

type UserDayLogMood {
  createdAt: DateTime!
  energyScore: Int!
  id: ID!
  moodScore: Int!
  note: String
  tags: [String!]!
}

enum UserDayLogRating {
  AVERAGE
  BAD
  GOOD
}

type UserEatWellLog {
  createdAt: DateTime!
  dayNumber: Int!
  id: ID!
  note: String
  rating: UserDayLogRating!
  year: Int!
}

type UserExerciseLoadTracker {
  Equipment: Equipment
  Move: Move!
  createdAt: DateTime!
  id: ID!
  loadUnit: LoadUnit!
  reps: Int!
}

type UserGoal {
  completedDate: DateTime
  createdAt: DateTime!
  deadline: DateTime
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type UserMeditationLog {
  createdAt: DateTime!
  dayNumber: Int!
  id: ID!
  minutesLogged: Int!
  note: String
  year: Int!
}

type UserProfile {
  Clubs: [ClubSummary!]!
  LifetimeLogStatsSummary: LifetimeLogStatsSummary
  Skills: [Skill!]!
  activeFitnessBenchmarks: [String!]
  activeProgressWidgets: [String!]
  avatarUri: String
  bestBenchmarkScores: [BestBenchmarkScoreSummary!]
  bio: String
  birthdate: DateTime
  countryCode: String
  displayName: String!
  followerCount: Int
  gender: Gender
  id: ID!
  instagramHandle: String
  introVideoThumbUri: String
  introVideoUri: String
  linkedinHandle: String
  planCount: Int
  tagline: String
  tiktokHandle: String
  townCity: String
  userProfileScope: UserProfileScope!
  workoutCount: Int
  workoutsPerWeekTarget: Int
  youtubeHandle: String
}

enum UserProfileScope {
  PRIVATE
  PUBLIC
}

type UserProfileSummary {
  Clubs: [ClubSummary!]!
  avatarUri: String
  countryCode: String
  displayName: String!
  id: ID!
  planCount: Int!
  skills: [String!]!
  tagline: String
  townCity: String
  userProfileScope: UserProfileScope!
  workoutCount: Int!
}

type UserRecentlyViewedObject {
  Club: ClubSummary
  Workout: WorkoutSummary
  WorkoutPlan: WorkoutPlanSummary
}

type UserSleepWellLog {
  createdAt: DateTime!
  dayNumber: Int!
  id: ID!
  minutesSlept: Int
  note: String
  rating: UserDayLogRating!
  year: Int!
}

type WelcomeTodoItem {
  createdAt: DateTime!
  id: ID!
  routeTo: String
  title: String!
  videoUri: String
}

type Workout {
  User: UserAvatarData!
  WorkoutGoals: [WorkoutGoal!]!
  WorkoutSections: [WorkoutSection!]!
  WorkoutTags: [WorkoutTag!]!
  archived: Boolean!
  contentAccessScope: ContentAccessScope!
  coverImageUri: String
  createdAt: DateTime!
  description: String
  difficultyLevel: DifficultyLevel
  id: ID!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  lengthMinutes: Int
  name: String!
  updatedAt: DateTime!
}

input WorkoutFiltersInput {
  availableEquipments: [ID!]!
  bodyweightOnly: Boolean
  difficultyLevel: DifficultyLevel
  excludedMoves: [ID!]!
  hasClassAudio: Boolean
  hasClassVideo: Boolean
  maxLength: Int
  minLength: Int
  requiredMoves: [ID!]!
  targetedBodyAreas: [ID!]!
  workoutGoals: [ID!]!
  workoutSectionTypes: [ID!]!
}

type WorkoutGoal {
  description: String!
  hexColor: String!
  id: ID!
  name: String!
}

type WorkoutMove {
  Equipment: Equipment
  Move: Move!
  distanceUnit: DistanceUnit!
  id: ID!
  loadAmount: Float!
  loadUnit: LoadUnit!
  repType: WorkoutMoveRepType!
  reps: Float!
  sortPosition: Int!
  timeUnit: TimeUnit!
}

enum WorkoutMoveRepType {
  CALORIES
  DISTANCE
  REPS
  TIME
}

type WorkoutPlan {
  User: UserAvatarData!
  WorkoutPlanDays: [WorkoutPlanDay!]!
  WorkoutPlanEnrolments: [WorkoutPlanEnrolment!]!
  WorkoutPlanReviews: [WorkoutPlanReview!]!
  WorkoutTags: [WorkoutTag!]!
  archived: Boolean!
  contentAccessScope: ContentAccessScope!
  coverImageUri: String
  createdAt: DateTime!
  daysPerWeek: Int!
  description: String
  id: ID!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  lengthWeeks: Int!
  name: String!
  updatedAt: DateTime!
}

type WorkoutPlanDay {
  WorkoutPlanDayWorkouts: [WorkoutPlanDayWorkout!]!
  dayNumber: Int!
  id: ID!
  note: String
}

type WorkoutPlanDayWorkout {
  Workout: Workout!
  id: ID!
  note: String
  sortPosition: Int!
}

type WorkoutPlanEnrolment {
  CompletedWorkoutPlanDayWorkouts: [CompletedWorkoutPlanDayWorkout!]!
  User: UserAvatarData!
  id: ID!
  startDate: DateTime
}

type WorkoutPlanEnrolmentSummary {
  WorkoutPlan: WorkoutPlanSummary!
  completedWorkoutsCount: Int!
  id: ID!
  startDate: DateTime
}

type WorkoutPlanEnrolmentWithPlan {
  WorkoutPlan: WorkoutPlan!
  WorkoutPlanEnrolment: WorkoutPlanEnrolment!
}

input WorkoutPlanFiltersInput {
  bodyweightOnly: Boolean
  daysPerWeek: Int
  difficultyLevel: DifficultyLevel
  lengthWeeks: Int
  workoutGoals: [ID!]!
}

type WorkoutPlanReview {
  User: UserAvatarData!
  comment: String
  createdAt: DateTime!
  id: ID!
  score: Float!
}

type WorkoutPlanSummary {
  User: UserAvatarData!
  archived: Boolean!
  coverImageUri: String
  createdAt: DateTime!
  daysPerWeek: Int!
  description: String
  enrolmentsCount: Int!
  goals: [WorkoutGoal!]!
  id: ID!
  lengthWeeks: Int!
  name: String!
  reviewCount: Int!
  reviewScore: Float
  tags: [String!]!
  updatedAt: DateTime!
  workoutsCount: Int!
}

type WorkoutPlanWithMetaDataAdmin {
  User: UserAvatarData!
  WorkoutPlanDays: [WorkoutPlanDay!]!
  WorkoutPlanEnrolments: [WorkoutPlanEnrolment!]!
  WorkoutPlanReviews: [WorkoutPlanReview!]!
  WorkoutTags: [WorkoutTag!]!
  archived: Boolean!
  contentAccessScope: ContentAccessScope!
  coverImageUri: String
  createdAt: DateTime!
  daysPerWeek: Int!
  description: String
  difficultyLevel: DifficultyLevel
  id: ID!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  lengthWeeks: Int!
  metaTags: [String!]!
  name: String!
  reasonNotValidated: String
  updatedAt: DateTime!
  validated: PublicContentValidationStatus!
}

type WorkoutSection {
  WorkoutSectionType: WorkoutSectionType!
  WorkoutSets: [WorkoutSet!]!
  classAudioUri: String
  classVideoThumbUri: String
  classVideoUri: String
  id: ID!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  name: String
  note: String
  rounds: Int!
  sortPosition: Int!
  timecap: Int!
}

type WorkoutSectionType {
  description: String!
  id: ID!
  name: String!
  subtitle: String!
  validRepTypes: [WorkoutMoveRepType!]!
}

type WorkoutSession {
  AmrapSessions: [AmrapSession!]!
  CardioSessions: [CardioSession!]!
  ForTimeSessions: [ForTimeSession!]!
  IntervalSessions: [IntervalSession!]!
  MobilitySessions: [MobilitySession!]!
  ResistanceSessions: [ResistanceSession!]!
  User: UserAvatarData!
  archived: Boolean!
  coverImageUri: String
  createdAt: DateTime!
  description: String
  id: ID!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  name: String!
  sessionOrder: [String!]!
  updatedAt: DateTime!
}

type WorkoutSet {
  WorkoutMoves: [WorkoutMove!]!
  duration: Int!
  id: ID!
  sortPosition: Int!
}

enum WorkoutSetGeneratorTarget {
  LOAD
  REPS
}

enum WorkoutSetGeneratorType {
  LADDERDOWN
  LADDERUP
  PYRAMIDDOWN
  PYRAMIDUP
}

type WorkoutSummary {
  User: UserAvatarData!
  archived: Boolean!
  bodyAreas: [ID!]!
  coverImageUri: String
  createdAt: DateTime!
  description: String
  difficultyLevel: DifficultyLevel
  equipments: [String!]!
  goals: [String!]!
  hasClassAudio: Boolean!
  hasClassVideo: Boolean!
  id: ID!
  lengthMinutes: Int
  loggedSessionsCount: Int!
  name: String!
  sectionTypes: [String!]!
  tags: [String!]!
  updatedAt: DateTime!
}

type WorkoutTag {
  id: ID!
  tag: String!
}

type WorkoutWithMetaDataAdmin {
  User: UserAvatarData!
  WorkoutGoals: [WorkoutGoal!]!
  WorkoutSections: [WorkoutSection!]!
  WorkoutTags: [WorkoutTag!]!
  archived: Boolean!
  contentAccessScope: ContentAccessScope!
  coverImageUri: String
  createdAt: DateTime!
  description: String
  difficultyLevel: DifficultyLevel
  id: ID!
  introAudioUri: String
  introVideoThumbUri: String
  introVideoUri: String
  lengthMinutes: Int
  metaTags: [String!]!
  name: String!
  reasonNotValidated: String
  updatedAt: DateTime!
  validated: PublicContentValidationStatus!
}
