import 'package:auto_route/src/router/auto_router_x.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/gestures.dart';
import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart';
import 'package:sofie_ui/components/animated/mounting.dart';
import 'package:sofie_ui/components/layout.dart';
import 'package:sofie_ui/components/media/images/user_avatar.dart';
import 'package:sofie_ui/components/my_custom_icons.dart';
import 'package:sofie_ui/components/social/feeds_and_follows/feed_utils.dart';
import 'package:sofie_ui/components/text.dart';
import 'package:sofie_ui/constants.dart';
import 'package:sofie_ui/extensions/context_extensions.dart';
import 'package:sofie_ui/model/enum.dart';
import 'package:sofie_ui/router.gr.dart';
import 'package:sofie_ui/services/utils.dart';
import 'package:stream_feed/stream_feed.dart';
import 'package:stream_feed/src/client/notification_feed.dart';
import 'package:sofie_ui/extensions/type_extensions.dart';
import 'package:sofie_ui/generated/api/graphql_api.dart';

const kThumbsUpIconSize = 14.0;
const kNotificationAvatarSize = 36.0;

class NotificationsPage extends StatefulWidget {
  const NotificationsPage({Key? key}) : super(key: key);

  @override
  State<NotificationsPage> createState() => _NotificationsPageState();
}

class _NotificationsPageState extends State<NotificationsPage> {
  /// Notifications - activities generated by the app and pushed to the user.
  late NotificationFeed _notificationFeed;

  late PagingController<
          int,
          NotificationGroup<
              GenericEnrichedActivity<User, dynamic, String, String>>>
      _pagingController;

  /// GetStream uses integer offset for making api calls to get more activities when paginating.
  final int _postsPerPage = 10;

  @override
  void initState() {
    super.initState();
    _notificationFeed = context.notificationFeed;

    _pagingController = PagingController<
            int,
            NotificationGroup<
                GenericEnrichedActivity<User, dynamic, String, String>>>(
        firstPageKey: 0, invisibleItemsThreshold: 5);

    _pagingController.addPageRequestListener((nextPageKey) {
      _getNotifications(offset: nextPageKey);
    });
  }

  Future<void> _getNotifications({required int offset}) async {
    try {
      final feedActivities = await _notificationFeed
          .getEnrichedActivities<User, dynamic, String, String>(
              limit: _postsPerPage,
              offset: offset,
              marker: ActivityMarker().allSeen().allRead());

      final int numNotificationsBefore =
          _pagingController.itemList?.length ?? 0;
      final int numNewNotifications = feedActivities.length;

      if (feedActivities.length < _postsPerPage) {
        _pagingController.appendLastPage(feedActivities);
      } else {
        _pagingController.appendPage(
            feedActivities, numNotificationsBefore + numNewNotifications);
      }
    } catch (e) {
      printLog(e.toString());
      _pagingController.error = e.toString();
      context.showToast(
          message: 'Sorry there was a problem loading your notifications.',
          toastType: ToastType.destructive);
    }
  }

  @override
  void dispose() {
    _pagingController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MyPageScaffold(
      navigationBar: MyNavBar(
        middle: Builder(builder: (context) {
          return const NavBarTitle('Notifications');
        }),
      ),
      child: PagedListView<
          int,
          NotificationGroup<
              GenericEnrichedActivity<User, dynamic, String, String>>>(
        pagingController: _pagingController,
        cacheExtent: 1000,
        physics: const AlwaysScrollableScrollPhysics(),
        builderDelegate: PagedChildBuilderDelegate<
            NotificationGroup<
                GenericEnrichedActivity<User, dynamic, String, String>>>(
          itemBuilder: (context, notificationGroup, index) {
            return FadeInUp(
              duration: 50,
              delay: index,
              delayBasis: 10,
              child: Padding(
                padding: const EdgeInsets.all(2.0),
                child: _NotificationGroup(
                  notificationGroup: notificationGroup,
                ),
              ),
            );
          },
          firstPageErrorIndicatorBuilder: (context) => MyText(
            'Oh dear, ${_pagingController.error.toString()}',
            maxLines: 5,
            textAlign: TextAlign.center,
          ),
          newPageErrorIndicatorBuilder: (context) => MyText(
            'Oh dear, ${_pagingController.error.toString()}',
            maxLines: 5,
            textAlign: TextAlign.center,
          ),
          firstPageProgressIndicatorBuilder: (c) =>
              const CupertinoActivityIndicator(),
          newPageProgressIndicatorBuilder: (c) =>
              const CupertinoActivityIndicator(),
          noItemsFoundIndicatorBuilder: (c) =>
              const Center(child: MyText('No notifications...')),
        ),
      ),
    );
  }
}

class _NotificationGroup extends StatelessWidget {
  final NotificationGroup<
      GenericEnrichedActivity<User, dynamic, String, String>> notificationGroup;
  const _NotificationGroup({Key? key, required this.notificationGroup})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 4.0, horizontal: 8.0),
          child: notificationGroup.activities != null &&
                  notificationGroup.activities!.isNotEmpty
              ? Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    SizedBox(
                      width: 30,
                      child: _NotificationIcon(
                        activity: notificationGroup.activities![0],
                      ),
                    ),
                    Expanded(
                      child: Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 10.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: notificationGroup.activities!
                              .map((a) => Padding(
                                    padding: const EdgeInsets.symmetric(
                                        vertical: 2.0),
                                    child: NotificationActivity(activity: a),
                                  ))
                              .toList(),
                        ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.only(left: 12.0),
                      child: MyText(
                        notificationGroup.updatedAt?.timeAgo ?? '',
                        subtext: true,
                        size: FONTSIZE.two,
                      ),
                    ),
                  ],
                )
              : const MyText(
                  'Could not retrieve this message...',
                  subtext: true,
                ),
        ),
        const HorizontalLine()
      ],
    );
  }
}

/*
 * Example. User ID 123 has joined your Club ID 456.
 * [activity.actor] is user that has caused the notification. i.e. User ID 123 
 * [activity.verb] indicates the type of event that has happened. i.e. join-club
 * Verbs:
 * notify (admin update), [activity.actor] will be the admin user.
 * join-club / leave-club (when someone joins / leaves a club you are owner or admin of)
 * join-plan / leave-plan (when someone joins / leaves a plan you own)
 * follow (when someone follows you)
 * comment (when someone comments on your post or post comment)
 * like (when someone likes your post)
 * log-workout (when someone logs a workout you own)
 * [activity.object] is the id of the acted on object. i.e. club:456, post:7, workoutplan:1, comment:8
 * [activity.foreign_id] can be used for the name of the app content. i.e. the name of the workout or workoutplan.
*/
class _NotificationIcon extends StatelessWidget {
  final GenericEnrichedActivity<User, dynamic, String, String> activity;
  const _NotificationIcon({Key? key, required this.activity}) : super(key: key);

  Widget _buildIcon(IconData iconData) => Opacity(
        opacity: 0.9,
        child: Icon(
          iconData,
          size: 20,
        ),
      );

  @override
  Widget build(BuildContext context) {
    switch (activity.verb) {
      case kNotifyNotificationVerb:
        return _buildIcon(CupertinoIcons.bell_fill);
      case kJoinClubNotificationVerb:
      case kLeaveClubNotificationVerb:
        return _buildIcon(MyCustomIcons.clubsIcon);
      case kJoinPlanNotificationVerb:
      case kLeavePlanNotificationVerb:
        return _buildIcon(MyCustomIcons.plansIcon);
      case kLogWorkoutNotificationVerb:
        return _buildIcon(MyCustomIcons.dumbbell);
      case kFollowNotificationVerb:
        return _buildIcon(CupertinoIcons.person_add_solid);
      case kCommentNotificationVerb:
        return _buildIcon(CupertinoIcons.chat_bubble_text_fill);
      case kLikeNotificationVerb:
        return _buildIcon(CupertinoIcons.heart_fill);

      default:
        printLog(
            'No icon has been defined for ${activity.verb} - _NotificationIcon builder');
        return Container();
    }
  }
}

class NotificationActivity extends StatelessWidget {
  final GenericEnrichedActivity<User, dynamic, String, String> activity;
  const NotificationActivity({Key? key, required this.activity})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    final user = activity.actor != null
        ? FeedUtils.formatStreamFeedUser(activity.actor!)
        : null;

    final actorId = user?.id;
    final actorName = user?.data.name ?? 'Someone';
    final object = activity.object ?? 'something';

    switch (activity.verb) {
      case kNotifyNotificationVerb:
        // Notification from app / admin.
        return MyText(
          activity.object ?? 'There was an update...',
          maxLines: 3,
          lineHeight: 1.4,
        );
      case kJoinClubNotificationVerb:
        return NotificationActivityJoinClub(
            actorId: actorId,
            actorName: actorName,
            club: FeedUtils.formatStreamFeedClub(
                CollectionEntry.fromJson(object)));
      case kLeaveClubNotificationVerb:
        return NotificationActivityLeaveClub(
          actorId: actorId,
          actorName: actorName,
          club:
              FeedUtils.formatStreamFeedClub(CollectionEntry.fromJson(object)),
        );
      case kJoinPlanNotificationVerb:
        return NotificationActivityJoinLeavePlan(
          actorId: actorId,
          actorName: actorName,
          workoutPlanId: FeedUtils.getObjectIdFromRef(activity.object),
          workoutPlanName: activity.foreignId,
          isJoin: true,
        );
      case kLeavePlanNotificationVerb:
        return NotificationActivityJoinLeavePlan(
          actorId: actorId,
          actorName: actorName,
          workoutPlanId: FeedUtils.getObjectIdFromRef(activity.object),
          workoutPlanName: activity.foreignId,
          isJoin: false,
        );
      case kLogWorkoutNotificationVerb:
        return NotificationActivityLogWorkout(
          actorId: actorId,
          actorName: actorName,
          workoutId: FeedUtils.getObjectIdFromRef(activity.object),
          workoutName: activity.foreignId,
        );
      case kFollowNotificationVerb:
        return NotificationActivityFollow(
          actorId: actorId,
          actorName: actorName,
        );

      default:
        printLog(
            'No builder has been defined for ${activity.verb} - NotificationActivity builder');
        return Container();
    }
  }
}

class NotificationActivityFollow extends StatelessWidget {
  final String? actorId;
  final String actorName;
  const NotificationActivityFollow({
    Key? key,
    required this.actorName,
    this.actorId,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Expanded(
            child: MyRichText(children: [
          TextSpan(
            text: actorName,
            style: const TextStyle(fontWeight: FontWeight.bold),
            recognizer: TapGestureRecognizer()
              ..onTap = actorId != null
                  ? () => context.navigateTo(
                      UserPublicProfileDetailsRoute(userId: actorId!))
                  : null,
          ),
          const TextSpan(text: ' followed you'),
        ])),
        const Padding(
          padding: EdgeInsets.only(left: 6.0),
          child:
              Icon(CupertinoIcons.hand_thumbsup_fill, size: kThumbsUpIconSize),
        )
      ],
    );
  }
}

class NotificationActivityJoinClub extends StatelessWidget {
  final String? actorId;
  final String actorName;
  final StreamFeedClub? club;
  const NotificationActivityJoinClub({
    Key? key,
    required this.actorName,
    required this.club,
    required this.actorId,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final clubId = club?.id;
    final clubName = club?.data.name != null ? ' ${club!.data.name}' : '';
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Expanded(
            child: MyRichText(children: [
          TextSpan(
            text: actorName,
            style: const TextStyle(fontWeight: FontWeight.bold),
            recognizer: TapGestureRecognizer()
              ..onTap = actorId != null
                  ? () => context.navigateTo(
                      UserPublicProfileDetailsRoute(userId: actorId!))
                  : null,
          ),
          const TextSpan(text: ' joined your club'),
          TextSpan(
            text: clubName,
            style: const TextStyle(fontWeight: FontWeight.bold),
            recognizer: TapGestureRecognizer()
              ..onTap = clubId != null
                  ? () => context.navigateTo(ClubDetailsRoute(id: clubId))
                  : null,
          ),
        ])),
        const Padding(
          padding: EdgeInsets.only(left: 6.0),
          child:
              Icon(CupertinoIcons.hand_thumbsup_fill, size: kThumbsUpIconSize),
        ),
      ],
    );
  }
}

class NotificationActivityLeaveClub extends StatelessWidget {
  final String? actorId;
  final String actorName;
  final StreamFeedClub? club;
  const NotificationActivityLeaveClub({
    Key? key,
    required this.actorName,
    this.club,
    this.actorId,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final clubId = club?.id;
    final clubName = club?.data.name != null ? ' ${club!.data.name}' : '';
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Expanded(
            child: MyRichText(children: [
          TextSpan(
            text: actorName,
            style: const TextStyle(fontWeight: FontWeight.bold),
            recognizer: TapGestureRecognizer()
              ..onTap = actorId != null
                  ? () => context.navigateTo(
                      UserPublicProfileDetailsRoute(userId: actorId!))
                  : null,
          ),
          const TextSpan(text: ' left your club'),
          TextSpan(
            text: clubName,
            style: const TextStyle(fontWeight: FontWeight.bold),
            recognizer: TapGestureRecognizer()
              ..onTap = clubId != null
                  ? () => context.navigateTo(ClubDetailsRoute(id: clubId))
                  : null,
          ),
        ])),
      ],
    );
  }
}

class NotificationActivityJoinLeavePlan extends StatelessWidget {
  final String? actorId;
  final String actorName;
  final String? workoutPlanId;
  final String? workoutPlanName;
  final bool isJoin;
  const NotificationActivityJoinLeavePlan({
    Key? key,
    this.actorId,
    required this.actorName,
    required this.workoutPlanId,
    required this.workoutPlanName,
    required this.isJoin,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final action = isJoin ? 'joined' : 'left';

    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Expanded(
            child: MyRichText(children: [
          TextSpan(
            text: actorName,
            style: const TextStyle(fontWeight: FontWeight.bold),
            recognizer: TapGestureRecognizer()
              ..onTap = actorId != null
                  ? () => context.navigateTo(
                      UserPublicProfileDetailsRoute(userId: actorId!))
                  : null,
          ),
          TextSpan(text: ' $action plan '),
          TextSpan(
            text: workoutPlanName,
            style: const TextStyle(fontWeight: FontWeight.bold),
            recognizer: TapGestureRecognizer()
              ..onTap = workoutPlanId != null
                  ? () => context
                      .navigateTo(WorkoutPlanDetailsRoute(id: workoutPlanId!))
                  : null,
          ),
        ])),
        if (isJoin)
          const Padding(
            padding: EdgeInsets.only(left: 6.0),
            child: Icon(CupertinoIcons.hand_thumbsup_fill,
                size: kThumbsUpIconSize),
          ),
      ],
    );
  }
}

class NotificationActivityLogWorkout extends StatelessWidget {
  final String? actorId;
  final String actorName;
  final String? workoutId;
  final String? workoutName;
  const NotificationActivityLogWorkout({
    Key? key,
    required this.actorName,
    this.workoutId,
    this.workoutName,
    this.actorId,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Expanded(
            child: MyRichText(children: [
          TextSpan(
            text: actorName,
            style: const TextStyle(fontWeight: FontWeight.bold),
            recognizer: TapGestureRecognizer()
              ..onTap = actorId != null
                  ? () => context.navigateTo(
                      UserPublicProfileDetailsRoute(userId: actorId!))
                  : null,
          ),
          const TextSpan(text: ' logged your workout '),
          TextSpan(
            text: workoutName,
            style: const TextStyle(fontWeight: FontWeight.bold),
            recognizer: TapGestureRecognizer()
              ..onTap = workoutId != null
                  ? () =>
                      context.navigateTo(WorkoutDetailsRoute(id: workoutId!))
                  : null,
          ),
        ])),
        const Padding(
          padding: EdgeInsets.only(left: 6.0),
          child:
              Icon(CupertinoIcons.hand_thumbsup_fill, size: kThumbsUpIconSize),
        ),
      ],
    );
  }
}
