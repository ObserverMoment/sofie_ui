// GENERATED CODE - DO NOT MODIFY BY HAND
// @dart = 2.12

import 'package:artemis/artemis.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:equatable/equatable.dart';
import 'package:gql/ast.dart';
import 'package:sofie_ui/coercers.dart';
part 'graphql_api.graphql.g.dart';

mixin ClubChatSummaryMixin {
  late String id;
  late String name;
  String? coverImageUri;
  @JsonKey(name: 'Owner')
  late UserAvatarData owner;
  @JsonKey(name: 'Admins')
  late List<UserAvatarData> admins;
  @JsonKey(name: 'Members')
  late List<UserAvatarData> members;
}
mixin UserAvatarDataMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  String? avatarUri;
  late String displayName;
}
mixin ClubSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late String name;
  String? description;
  String? coverImageUri;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? introAudioUri;
  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;
  String? location;
  late int memberCount;
  late int workoutCount;
  late int planCount;
}
mixin BodyTrackingEntryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(unknownEnumValue: BodyweightUnit.artemisUnknown)
  BodyweightUnit? bodyweightUnit;
  double? bodyweight;
  double? fatPercent;
  String? note;
  late List<String> photoUris;
}
mixin UserGoalMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime updatedAt;
  late String name;
  String? description;
  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? deadline;
  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? completedDate;
}
mixin UserSleepWellLogMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late int year;
  late int dayNumber;
  @JsonKey(unknownEnumValue: UserDayLogRating.artemisUnknown)
  late UserDayLogRating rating;
  int? minutesSlept;
  String? note;
}
mixin UserMeditationLogMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late int year;
  late int dayNumber;
  late int minutesLogged;
  String? note;
}
mixin UserEatWellLogMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late int year;
  late int dayNumber;
  @JsonKey(unknownEnumValue: UserDayLogRating.artemisUnknown)
  late UserDayLogRating rating;
  String? note;
}
mixin UserDayLogMoodMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late int moodScore;
  late int energyScore;
  late List<String> tags;
  String? note;
}
mixin EquipmentMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  late bool loadAdjustable;
}
mixin MoveTypeMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  String? description;
  String? imageUri;
}
mixin BodyAreaMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  @JsonKey(unknownEnumValue: BodyAreaFrontBack.artemisUnknown)
  late BodyAreaFrontBack frontBack;
  @JsonKey(unknownEnumValue: BodyAreaUpperLower.artemisUnknown)
  late BodyAreaUpperLower upperLower;
}
mixin MoveMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  String? searchTerms;
  String? description;
  String? demoVideoUri;
  String? demoVideoThumbUri;
  @JsonKey(unknownEnumValue: MoveScope.artemisUnknown)
  late MoveScope scope;
  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late List<WorkoutMoveRepType> validRepTypes;
}
mixin WorkoutMoveMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late int sortPosition;
  late double reps;
  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late WorkoutMoveRepType repType;
  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  late DistanceUnit distanceUnit;
  late double loadAmount;
  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  late LoadUnit loadUnit;
  @JsonKey(unknownEnumValue: TimeUnit.artemisUnknown)
  late TimeUnit timeUnit;
}
mixin WorkoutSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime updatedAt;
  late bool archived;
  late String name;
  @JsonKey(name: 'User')
  late UserAvatarData user;
  int? lengthMinutes;
  String? coverImageUri;
  String? description;
  @JsonKey(unknownEnumValue: DifficultyLevel.artemisUnknown)
  DifficultyLevel? difficultyLevel;
  late int loggedSessionsCount;
  late bool hasClassVideo;
  late bool hasClassAudio;
  late List<String> equipments;
  late List<String> sectionTypes;
  late List<String> goals;
  late List<String> tags;
  late List<String> bodyAreas;
}
mixin WorkoutPlanSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime updatedAt;
  late bool archived;
  late String name;
  String? description;
  String? coverImageUri;
  late int lengthWeeks;
  late int daysPerWeek;
  late int workoutsCount;
  @JsonKey(name: 'User')
  late UserAvatarData user;
  late int enrolmentsCount;
  late List<WorkoutGoal> goals;
  late List<String> tags;
  double? reviewScore;
  late int reviewCount;
}
mixin WorkoutGoalMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  late String description;
  late String hexColor;
}
mixin CollectionMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late String name;
  String? description;
}
mixin WelcomeTodoItemMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  String? videoUri;
  String? routeTo;
  late String title;
}
mixin WorkoutDataMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime updatedAt;
  late bool archived;
  late String name;
  String? description;
  int? lengthMinutes;
  @JsonKey(unknownEnumValue: DifficultyLevel.artemisUnknown)
  DifficultyLevel? difficultyLevel;
  String? coverImageUri;
  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? introAudioUri;
  @JsonKey(name: 'User')
  late UserAvatarData user;
  @JsonKey(name: 'WorkoutGoals')
  late List<WorkoutGoal> workoutGoals;
  @JsonKey(name: 'WorkoutTags')
  late List<WorkoutTag> workoutTags;
  @JsonKey(name: 'WorkoutSections')
  late List<WorkoutSection> workoutSections;
}
mixin WorkoutTagMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String tag;
}
mixin WorkoutSectionTypeMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  late String description;
}
mixin WorkoutSetMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late int sortPosition;
  late int duration;
}
mixin WorkoutSectionMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  String? name;
  String? note;
  late int rounds;
  late int timecap;
  late int sortPosition;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? introAudioUri;
  String? classVideoUri;
  String? classVideoThumbUri;
  String? classAudioUri;
}
mixin WorkoutPlanDayWorkoutMixin {
  late String id;
  @JsonKey(name: '__typename')
  String? $$typename;
  String? note;
  late int sortPosition;
}
mixin WorkoutPlanEnrolmentSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? startDate;
  late int completedWorkoutsCount;
  @JsonKey(name: 'WorkoutPlan')
  late WorkoutPlanSummary workoutPlan;
}
mixin CompletedWorkoutPlanDayWorkoutMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String loggedWorkoutId;
  late String workoutPlanDayWorkoutId;
}
mixin WorkoutPlanEnrolmentMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? startDate;
}
mixin WorkoutPlanDataMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime updatedAt;
  late bool archived;
  late String name;
  String? description;
  late int lengthWeeks;
  late int daysPerWeek;
  String? coverImageUri;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? introAudioUri;
  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;
  @JsonKey(name: 'User')
  late UserAvatarData user;
  @JsonKey(name: 'WorkoutPlanDays')
  late List<WorkoutPlanDay> workoutPlanDays;
  @JsonKey(name: 'WorkoutPlanReviews')
  late List<WorkoutPlanReview> workoutPlanReviews;
  @JsonKey(name: 'WorkoutTags')
  late List<WorkoutTag> workoutTags;
  @JsonKey(name: 'WorkoutPlanEnrolments')
  late List<WorkoutPlanEnrolment> workoutPlanEnrolments;
}
mixin WorkoutPlanDayMixin {
  late String id;
  @JsonKey(name: '__typename')
  String? $$typename;
  String? note;
  late int dayNumber;
}
mixin WorkoutPlanReviewMixin {
  late String id;
  @JsonKey(name: '__typename')
  String? $$typename;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late double score;
  String? comment;
}
mixin GymProfileMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  String? description;
}
mixin LoggedWorkoutMoveMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late int sortPosition;
  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late WorkoutMoveRepType repType;
  late double reps;
  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  late DistanceUnit distanceUnit;
  late double loadAmount;
  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  late LoadUnit loadUnit;
  @JsonKey(unknownEnumValue: TimeUnit.artemisUnknown)
  late TimeUnit timeUnit;
}
mixin LoggedWorkoutSetMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late int sortPosition;
  late int sectionRoundNumber;
  int? timeTakenSeconds;
}
mixin LoggedWorkoutSectionMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  String? name;
  int? repScore;
  late int timeTakenSeconds;
  late int sortPosition;
}
mixin LoggedWorkoutMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime completedOn;
  String? note;
  late String name;
  String? workoutId;
}
mixin LifetimeLogStatsSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late int minutesWorked;
  late int sessionsLogged;
}
mixin ClubWorkoutsMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late List<WorkoutSummary> workouts;
}
mixin ClubWorkoutPlansMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late List<WorkoutPlanSummary> workoutPlans;
}
mixin WorkoutPlanMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime updatedAt;
  late bool archived;
  late String name;
  String? description;
  late int lengthWeeks;
  late int daysPerWeek;
  String? coverImageUri;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? introAudioUri;
  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;
}
mixin UserProfileSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  @JsonKey(unknownEnumValue: UserProfileScope.artemisUnknown)
  late UserProfileScope userProfileScope;
  late String id;
  String? avatarUri;
  String? tagline;
  String? townCity;
  String? countryCode;
  late String displayName;
  late int workoutCount;
  late int planCount;
  late List<String> skills;
}
mixin ArchivedMoveMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  late bool archived;
}
mixin ArchivedWorkoutPlanMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  late bool archived;
}
mixin ArchivedWorkoutMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  late bool archived;
}
mixin UserProfileResultMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(unknownEnumValue: UserProfileScope.artemisUnknown)
  UserProfileScope? userProfileScope;
  String? avatarUri;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? bio;
  String? tagline;
  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? birthdate;
  String? townCity;
  String? countryCode;
  String? displayName;
  String? instagramHandle;
  String? tiktokHandle;
  String? youtubeHandle;
  String? linkedinHandle;
  String? firstname;
  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;
  bool? hasOnboarded;
  String? lastname;
  int? workoutsPerWeekTarget;
  List<String>? activeProgressWidgets;
  List<String>? activeLogDataWidgets;
}
mixin SkillMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime updatedAt;
  late String name;
  String? experience;
  String? certification;
  String? awardingBody;
  String? certificateRef;
  String? documentUri;
}
mixin UserBenchmarkSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime lastEntryAt;
  late String name;
  String? equipmentInfo;
  @JsonKey(unknownEnumValue: BenchmarkType.artemisUnknown)
  late BenchmarkType benchmarkType;
  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  late LoadUnit loadUnit;
}
mixin UserBenchmarkEntryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime completedOn;
  late double score;
  String? note;
  String? videoUri;
  String? videoThumbUri;
}
mixin UserProfileMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(unknownEnumValue: UserProfileScope.artemisUnknown)
  late UserProfileScope userProfileScope;
  String? avatarUri;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? bio;
  String? tagline;
  String? townCity;
  String? instagramHandle;
  String? tiktokHandle;
  String? youtubeHandle;
  String? linkedinHandle;
  String? countryCode;
  late String displayName;
  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;
  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? birthdate;
  int? followerCount;
  int? workoutCount;
  int? planCount;
  int? workoutsPerWeekTarget;
  List<String>? activeProgressWidgets;
  List<String>? activeLogDataWidgets;
}
mixin ProgressWidgetMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late String name;
  String? subtitle;
  String? description;
}
mixin UserBenchmarkMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime lastEntryAt;
  late String name;
  String? description;
  String? equipmentInfo;
  @JsonKey(unknownEnumValue: BenchmarkType.artemisUnknown)
  late BenchmarkType benchmarkType;
  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  late LoadUnit loadUnit;
}
mixin AnnouncementUpdateActionMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late String text;
  late String routeTo;
}
mixin AnnouncementUpdateMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  String? imageUri;
  String? videoUri;
  String? audioUri;
  String? articleUrl;
  late String title;
  String? subtitle;
  String? bodyOne;
  String? bodyTwo;
}
mixin ScheduledWorkoutMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime scheduledAt;
  String? note;
  String? workoutPlanName;
  String? workoutPlanEnrolmentId;
  String? workoutPlanDayWorkoutId;
  String? loggedWorkoutId;
}
mixin StreamActivityReactionCountsMixin {
  int? likes;
  int? comments;
}
mixin StreamActivityExtraDataMixin {
  String? title;
  String? caption;
  late List<String> tags;
  String? articleUrl;
  String? audioUrl;
  String? imageUrl;
  String? videoUrl;
  String? originalPostId;
}
mixin StreamEnrichedActivityMixin {
  late String id;
  late String verb;
  late String object;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime time;
  String? userLikeReactionId;
}
mixin WorkoutMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime updatedAt;
  late bool archived;
  late String name;
  String? description;
  int? lengthMinutes;
  @JsonKey(unknownEnumValue: DifficultyLevel.artemisUnknown)
  DifficultyLevel? difficultyLevel;
  String? coverImageUri;
  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? introAudioUri;
}
mixin ClubMemberNoteMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime updatedAt;
  late String note;
  late List<String> tags;
}
mixin UserMaxUnbrokenExerciseTrackerMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late WorkoutMoveRepType repType;
  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  late DistanceUnit distanceUnit;
  late double loadAmount;
  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  late LoadUnit loadUnit;
  @JsonKey(name: 'Move')
  late Move move;
  @JsonKey(name: 'Equipment')
  Equipment? equipment;
  @JsonKey(name: 'ExerciseTrackerManualEntries')
  late List<ExerciseTrackerManualEntry> exerciseTrackerManualEntries;
}
mixin ExerciseTrackerManualEntryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime completedOn;
  late double score;
  String? videoUri;
  String? videoThumbUri;
}
mixin UserMaxLoadExerciseTrackerMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late int reps;
  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  late LoadUnit loadUnit;
  @JsonKey(name: 'Move')
  late Move move;
  @JsonKey(name: 'Equipment')
  Equipment? equipment;
  @JsonKey(name: 'ExerciseTrackerManualEntries')
  late List<ExerciseTrackerManualEntry> exerciseTrackerManualEntries;
}
mixin UserFastestTimeExerciseTrackerMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late WorkoutMoveRepType repType;
  late double reps;
  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  late DistanceUnit distanceUnit;
  late double loadAmount;
  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  late LoadUnit loadUnit;
  @JsonKey(name: 'Move')
  late Move move;
  @JsonKey(name: 'Equipment')
  Equipment? equipment;
  @JsonKey(name: 'ExerciseTrackerManualEntries')
  late List<ExerciseTrackerManualEntry> exerciseTrackerManualEntries;
}
mixin ClubMemberSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String displayName;
  String? avatarUri;
  String? townCity;
  String? countryCode;
  String? tagline;
  late List<String> skills;
}
mixin ClubInviteTokenDataMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String token;
}
mixin InviteTokenErrorMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String message;
}
mixin ClubInviteTokenMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late String name;
  late bool active;
  late int inviteLimit;
  late List<String> joinedUserIds;
}

@JsonSerializable(explicitToJson: true)
class ClubChatSummary extends JsonSerializable
    with EquatableMixin, ClubChatSummaryMixin {
  ClubChatSummary();

  factory ClubChatSummary.fromJson(Map<String, dynamic> json) =>
      _$ClubChatSummaryFromJson(json);

  @override
  List<Object?> get props => [id, name, coverImageUri, owner, admins, members];
  @override
  Map<String, dynamic> toJson() => _$ClubChatSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubChatSummary$Query extends JsonSerializable with EquatableMixin {
  ClubChatSummary$Query();

  factory ClubChatSummary$Query.fromJson(Map<String, dynamic> json) =>
      _$ClubChatSummary$QueryFromJson(json);

  ClubChatSummary? clubChatSummary;

  @override
  List<Object?> get props => [clubChatSummary];
  @override
  Map<String, dynamic> toJson() => _$ClubChatSummary$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubChatSummaryMixin$UserAvatarData extends JsonSerializable
    with EquatableMixin, UserAvatarDataMixin {
  ClubChatSummaryMixin$UserAvatarData();

  factory ClubChatSummaryMixin$UserAvatarData.fromJson(
          Map<String, dynamic> json) =>
      _$ClubChatSummaryMixin$UserAvatarDataFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, avatarUri, displayName];
  @override
  Map<String, dynamic> toJson() =>
      _$ClubChatSummaryMixin$UserAvatarDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteClub$Mutation extends JsonSerializable with EquatableMixin {
  DeleteClub$Mutation();

  factory DeleteClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteClub$MutationFromJson(json);

  late String deleteClub;

  @override
  List<Object?> get props => [deleteClub];
  @override
  Map<String, dynamic> toJson() => _$DeleteClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserAvatarData extends JsonSerializable
    with EquatableMixin, UserAvatarDataMixin {
  UserAvatarData();

  factory UserAvatarData.fromJson(Map<String, dynamic> json) =>
      _$UserAvatarDataFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, avatarUri, displayName];
  @override
  Map<String, dynamic> toJson() => _$UserAvatarDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubSummary extends JsonSerializable
    with EquatableMixin, ClubSummaryMixin {
  ClubSummary();

  factory ClubSummary.fromJson(Map<String, dynamic> json) =>
      _$ClubSummaryFromJson(json);

  @JsonKey(name: 'Owner')
  late UserAvatarData owner;

  @JsonKey(name: 'Admins')
  late List<UserAvatarData> admins;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        name,
        description,
        coverImageUri,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        contentAccessScope,
        location,
        memberCount,
        workoutCount,
        planCount,
        owner,
        admins
      ];
  @override
  Map<String, dynamic> toJson() => _$ClubSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubSummary$Query extends JsonSerializable with EquatableMixin {
  ClubSummary$Query();

  factory ClubSummary$Query.fromJson(Map<String, dynamic> json) =>
      _$ClubSummary$QueryFromJson(json);

  ClubSummary? clubSummary;

  @override
  List<Object?> get props => [clubSummary];
  @override
  Map<String, dynamic> toJson() => _$ClubSummary$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateClub$Mutation extends JsonSerializable with EquatableMixin {
  CreateClub$Mutation();

  factory CreateClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateClub$MutationFromJson(json);

  late ClubSummary createClub;

  @override
  List<Object?> get props => [createClub];
  @override
  Map<String, dynamic> toJson() => _$CreateClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateClubInput extends JsonSerializable with EquatableMixin {
  CreateClubInput({this.description, this.location, required this.name});

  factory CreateClubInput.fromJson(Map<String, dynamic> json) =>
      _$CreateClubInputFromJson(json);

  String? description;

  String? location;

  late String name;

  @override
  List<Object?> get props => [description, location, name];
  @override
  Map<String, dynamic> toJson() => _$CreateClubInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PublicClubs$Query extends JsonSerializable with EquatableMixin {
  PublicClubs$Query();

  factory PublicClubs$Query.fromJson(Map<String, dynamic> json) =>
      _$PublicClubs$QueryFromJson(json);

  late List<ClubSummary> publicClubs;

  @override
  List<Object?> get props => [publicClubs];
  @override
  Map<String, dynamic> toJson() => _$PublicClubs$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubSummary$Mutation extends JsonSerializable with EquatableMixin {
  UpdateClubSummary$Mutation();

  factory UpdateClubSummary$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubSummary$MutationFromJson(json);

  late ClubSummary updateClubSummary;

  @override
  List<Object?> get props => [updateClubSummary];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubSummary$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubSummaryInput extends JsonSerializable with EquatableMixin {
  UpdateClubSummaryInput(
      {this.contentAccessScope,
      this.coverImageUri,
      this.description,
      required this.id,
      this.introAudioUri,
      this.introVideoThumbUri,
      this.introVideoUri,
      this.location,
      this.name});

  factory UpdateClubSummaryInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubSummaryInputFromJson(json);

  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  ContentAccessScope? contentAccessScope;

  String? coverImageUri;

  String? description;

  late String id;

  String? introAudioUri;

  String? introVideoThumbUri;

  String? introVideoUri;

  String? location;

  String? name;

  @override
  List<Object?> get props => [
        contentAccessScope,
        coverImageUri,
        description,
        id,
        introAudioUri,
        introVideoThumbUri,
        introVideoUri,
        location,
        name
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubSummaryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CheckUniqueClubName$Query extends JsonSerializable with EquatableMixin {
  CheckUniqueClubName$Query();

  factory CheckUniqueClubName$Query.fromJson(Map<String, dynamic> json) =>
      _$CheckUniqueClubName$QueryFromJson(json);

  late bool checkUniqueClubName;

  @override
  List<Object?> get props => [checkUniqueClubName];
  @override
  Map<String, dynamic> toJson() => _$CheckUniqueClubName$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserClubs$Query extends JsonSerializable with EquatableMixin {
  UserClubs$Query();

  factory UserClubs$Query.fromJson(Map<String, dynamic> json) =>
      _$UserClubs$QueryFromJson(json);

  late List<ClubSummary> userClubs;

  @override
  List<Object?> get props => [userClubs];
  @override
  Map<String, dynamic> toJson() => _$UserClubs$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubSummaries$Query extends JsonSerializable with EquatableMixin {
  ClubSummaries$Query();

  factory ClubSummaries$Query.fromJson(Map<String, dynamic> json) =>
      _$ClubSummaries$QueryFromJson(json);

  late List<ClubSummary> clubSummaries;

  @override
  List<Object?> get props => [clubSummaries];
  @override
  Map<String, dynamic> toJson() => _$ClubSummaries$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BodyTrackingEntry extends JsonSerializable
    with EquatableMixin, BodyTrackingEntryMixin {
  BodyTrackingEntry();

  factory BodyTrackingEntry.fromJson(Map<String, dynamic> json) =>
      _$BodyTrackingEntryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        bodyweightUnit,
        bodyweight,
        fatPercent,
        note,
        photoUris
      ];
  @override
  Map<String, dynamic> toJson() => _$BodyTrackingEntryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateBodyTrackingEntry$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateBodyTrackingEntry$Mutation();

  factory CreateBodyTrackingEntry$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateBodyTrackingEntry$MutationFromJson(json);

  late BodyTrackingEntry createBodyTrackingEntry;

  @override
  List<Object?> get props => [createBodyTrackingEntry];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateBodyTrackingEntry$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateBodyTrackingEntryInput extends JsonSerializable
    with EquatableMixin {
  CreateBodyTrackingEntryInput(
      {this.bodyweight,
      this.bodyweightUnit,
      this.fatPercent,
      this.note,
      this.photoUris});

  factory CreateBodyTrackingEntryInput.fromJson(Map<String, dynamic> json) =>
      _$CreateBodyTrackingEntryInputFromJson(json);

  double? bodyweight;

  @JsonKey(unknownEnumValue: BodyweightUnit.artemisUnknown)
  BodyweightUnit? bodyweightUnit;

  double? fatPercent;

  String? note;

  List<String>? photoUris;

  @override
  List<Object?> get props =>
      [bodyweight, bodyweightUnit, fatPercent, note, photoUris];
  @override
  Map<String, dynamic> toJson() => _$CreateBodyTrackingEntryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateBodyTrackingEntry$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateBodyTrackingEntry$Mutation();

  factory UpdateBodyTrackingEntry$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateBodyTrackingEntry$MutationFromJson(json);

  late BodyTrackingEntry updateBodyTrackingEntry;

  @override
  List<Object?> get props => [updateBodyTrackingEntry];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateBodyTrackingEntry$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateBodyTrackingEntryInput extends JsonSerializable
    with EquatableMixin {
  UpdateBodyTrackingEntryInput(
      {this.bodyweight,
      this.bodyweightUnit,
      this.fatPercent,
      required this.id,
      this.note,
      this.photoUris});

  factory UpdateBodyTrackingEntryInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateBodyTrackingEntryInputFromJson(json);

  double? bodyweight;

  @JsonKey(unknownEnumValue: BodyweightUnit.artemisUnknown)
  BodyweightUnit? bodyweightUnit;

  double? fatPercent;

  late String id;

  String? note;

  List<String>? photoUris;

  @override
  List<Object?> get props =>
      [bodyweight, bodyweightUnit, fatPercent, id, note, photoUris];
  @override
  Map<String, dynamic> toJson() => _$UpdateBodyTrackingEntryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteBodyTrackingEntryById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteBodyTrackingEntryById$Mutation();

  factory DeleteBodyTrackingEntryById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteBodyTrackingEntryById$MutationFromJson(json);

  late String deleteBodyTrackingEntryById;

  @override
  List<Object?> get props => [deleteBodyTrackingEntryById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteBodyTrackingEntryById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BodyTrackingEntries$Query extends JsonSerializable with EquatableMixin {
  BodyTrackingEntries$Query();

  factory BodyTrackingEntries$Query.fromJson(Map<String, dynamic> json) =>
      _$BodyTrackingEntries$QueryFromJson(json);

  late List<BodyTrackingEntry> bodyTrackingEntries;

  @override
  List<Object?> get props => [bodyTrackingEntries];
  @override
  Map<String, dynamic> toJson() => _$BodyTrackingEntries$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserGoal extends JsonSerializable with EquatableMixin, UserGoalMixin {
  UserGoal();

  factory UserGoal.fromJson(Map<String, dynamic> json) =>
      _$UserGoalFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        updatedAt,
        name,
        description,
        deadline,
        completedDate
      ];
  @override
  Map<String, dynamic> toJson() => _$UserGoalToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserGoal$Mutation extends JsonSerializable with EquatableMixin {
  CreateUserGoal$Mutation();

  factory CreateUserGoal$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateUserGoal$MutationFromJson(json);

  late UserGoal createUserGoal;

  @override
  List<Object?> get props => [createUserGoal];
  @override
  Map<String, dynamic> toJson() => _$CreateUserGoal$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserGoalInput extends JsonSerializable with EquatableMixin {
  CreateUserGoalInput({this.deadline, this.description, required this.name});

  factory CreateUserGoalInput.fromJson(Map<String, dynamic> json) =>
      _$CreateUserGoalInputFromJson(json);

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? deadline;

  String? description;

  late String name;

  @override
  List<Object?> get props => [deadline, description, name];
  @override
  Map<String, dynamic> toJson() => _$CreateUserGoalInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserGoal$Mutation extends JsonSerializable with EquatableMixin {
  DeleteUserGoal$Mutation();

  factory DeleteUserGoal$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteUserGoal$MutationFromJson(json);

  late String deleteUserGoal;

  @override
  List<Object?> get props => [deleteUserGoal];
  @override
  Map<String, dynamic> toJson() => _$DeleteUserGoal$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserSleepWellLog extends JsonSerializable
    with EquatableMixin, UserSleepWellLogMixin {
  UserSleepWellLog();

  factory UserSleepWellLog.fromJson(Map<String, dynamic> json) =>
      _$UserSleepWellLogFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, year, dayNumber, rating, minutesSlept, note];
  @override
  Map<String, dynamic> toJson() => _$UserSleepWellLogToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserSleepWellLog$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateUserSleepWellLog$Mutation();

  factory CreateUserSleepWellLog$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateUserSleepWellLog$MutationFromJson(json);

  late UserSleepWellLog createUserSleepWellLog;

  @override
  List<Object?> get props => [createUserSleepWellLog];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserSleepWellLog$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserSleepWellLogInput extends JsonSerializable with EquatableMixin {
  CreateUserSleepWellLogInput(
      {required this.dayNumber,
      this.minutesSlept,
      this.note,
      required this.rating,
      required this.year});

  factory CreateUserSleepWellLogInput.fromJson(Map<String, dynamic> json) =>
      _$CreateUserSleepWellLogInputFromJson(json);

  late int dayNumber;

  int? minutesSlept;

  String? note;

  @JsonKey(unknownEnumValue: UserDayLogRating.artemisUnknown)
  late UserDayLogRating rating;

  late int year;

  @override
  List<Object?> get props => [dayNumber, minutesSlept, note, rating, year];
  @override
  Map<String, dynamic> toJson() => _$CreateUserSleepWellLogInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserSleepWellLog$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateUserSleepWellLog$Mutation();

  factory UpdateUserSleepWellLog$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserSleepWellLog$MutationFromJson(json);

  late UserSleepWellLog updateUserSleepWellLog;

  @override
  List<Object?> get props => [updateUserSleepWellLog];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateUserSleepWellLog$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserSleepWellLogInput extends JsonSerializable with EquatableMixin {
  UpdateUserSleepWellLogInput(
      {required this.id, this.minutesSlept, this.note, this.rating});

  factory UpdateUserSleepWellLogInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserSleepWellLogInputFromJson(json);

  late String id;

  int? minutesSlept;

  String? note;

  @JsonKey(unknownEnumValue: UserDayLogRating.artemisUnknown)
  UserDayLogRating? rating;

  @override
  List<Object?> get props => [id, minutesSlept, note, rating];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserSleepWellLogInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserGoal$Mutation extends JsonSerializable with EquatableMixin {
  UpdateUserGoal$Mutation();

  factory UpdateUserGoal$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserGoal$MutationFromJson(json);

  late UserGoal updateUserGoal;

  @override
  List<Object?> get props => [updateUserGoal];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserGoal$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserGoalInput extends JsonSerializable with EquatableMixin {
  UpdateUserGoalInput(
      {this.completedDate,
      this.deadline,
      this.description,
      required this.id,
      this.name});

  factory UpdateUserGoalInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserGoalInputFromJson(json);

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? completedDate;

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? deadline;

  String? description;

  late String id;

  String? name;

  @override
  List<Object?> get props => [completedDate, deadline, description, id, name];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserGoalInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeditationLog extends JsonSerializable
    with EquatableMixin, UserMeditationLogMixin {
  UserMeditationLog();

  factory UserMeditationLog.fromJson(Map<String, dynamic> json) =>
      _$UserMeditationLogFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, year, dayNumber, minutesLogged, note];
  @override
  Map<String, dynamic> toJson() => _$UserMeditationLogToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserMeditationLog$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateUserMeditationLog$Mutation();

  factory CreateUserMeditationLog$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserMeditationLog$MutationFromJson(json);

  late UserMeditationLog createUserMeditationLog;

  @override
  List<Object?> get props => [createUserMeditationLog];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserMeditationLog$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserMeditationLogInput extends JsonSerializable
    with EquatableMixin {
  CreateUserMeditationLogInput(
      {required this.dayNumber,
      required this.minutesLogged,
      this.note,
      required this.year});

  factory CreateUserMeditationLogInput.fromJson(Map<String, dynamic> json) =>
      _$CreateUserMeditationLogInputFromJson(json);

  late int dayNumber;

  late int minutesLogged;

  String? note;

  late int year;

  @override
  List<Object?> get props => [dayNumber, minutesLogged, note, year];
  @override
  Map<String, dynamic> toJson() => _$CreateUserMeditationLogInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserDayLogMood$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteUserDayLogMood$Mutation();

  factory DeleteUserDayLogMood$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteUserDayLogMood$MutationFromJson(json);

  late String deleteUserDayLogMood;

  @override
  List<Object?> get props => [deleteUserDayLogMood];
  @override
  Map<String, dynamic> toJson() => _$DeleteUserDayLogMood$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserEatWellLog extends JsonSerializable
    with EquatableMixin, UserEatWellLogMixin {
  UserEatWellLog();

  factory UserEatWellLog.fromJson(Map<String, dynamic> json) =>
      _$UserEatWellLogFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, year, dayNumber, rating, note];
  @override
  Map<String, dynamic> toJson() => _$UserEatWellLogToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserEatWellLog$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateUserEatWellLog$Mutation();

  factory CreateUserEatWellLog$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateUserEatWellLog$MutationFromJson(json);

  late UserEatWellLog createUserEatWellLog;

  @override
  List<Object?> get props => [createUserEatWellLog];
  @override
  Map<String, dynamic> toJson() => _$CreateUserEatWellLog$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserEatWellLogInput extends JsonSerializable with EquatableMixin {
  CreateUserEatWellLogInput(
      {required this.dayNumber,
      this.note,
      required this.rating,
      required this.year});

  factory CreateUserEatWellLogInput.fromJson(Map<String, dynamic> json) =>
      _$CreateUserEatWellLogInputFromJson(json);

  late int dayNumber;

  String? note;

  @JsonKey(unknownEnumValue: UserDayLogRating.artemisUnknown)
  late UserDayLogRating rating;

  late int year;

  @override
  List<Object?> get props => [dayNumber, note, rating, year];
  @override
  Map<String, dynamic> toJson() => _$CreateUserEatWellLogInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserMeditationLog$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateUserMeditationLog$Mutation();

  factory UpdateUserMeditationLog$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateUserMeditationLog$MutationFromJson(json);

  late UserMeditationLog updateUserMeditationLog;

  @override
  List<Object?> get props => [updateUserMeditationLog];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateUserMeditationLog$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserMeditationLogInput extends JsonSerializable
    with EquatableMixin {
  UpdateUserMeditationLogInput(
      {required this.id, this.minutesLogged, this.note});

  factory UpdateUserMeditationLogInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserMeditationLogInputFromJson(json);

  late String id;

  int? minutesLogged;

  String? note;

  @override
  List<Object?> get props => [id, minutesLogged, note];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserMeditationLogInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserDayLogMood extends JsonSerializable
    with EquatableMixin, UserDayLogMoodMixin {
  UserDayLogMood();

  factory UserDayLogMood.fromJson(Map<String, dynamic> json) =>
      _$UserDayLogMoodFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, moodScore, energyScore, tags, note];
  @override
  Map<String, dynamic> toJson() => _$UserDayLogMoodToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserDayLogMood$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateUserDayLogMood$Mutation();

  factory CreateUserDayLogMood$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateUserDayLogMood$MutationFromJson(json);

  late UserDayLogMood createUserDayLogMood;

  @override
  List<Object?> get props => [createUserDayLogMood];
  @override
  Map<String, dynamic> toJson() => _$CreateUserDayLogMood$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserDayLogMoodInput extends JsonSerializable with EquatableMixin {
  CreateUserDayLogMoodInput(
      {required this.energyScore,
      required this.moodScore,
      this.note,
      this.tags});

  factory CreateUserDayLogMoodInput.fromJson(Map<String, dynamic> json) =>
      _$CreateUserDayLogMoodInputFromJson(json);

  late int energyScore;

  late int moodScore;

  String? note;

  List<String>? tags;

  @override
  List<Object?> get props => [energyScore, moodScore, note, tags];
  @override
  Map<String, dynamic> toJson() => _$CreateUserDayLogMoodInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserEatWellLog$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateUserEatWellLog$Mutation();

  factory UpdateUserEatWellLog$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserEatWellLog$MutationFromJson(json);

  late UserEatWellLog updateUserEatWellLog;

  @override
  List<Object?> get props => [updateUserEatWellLog];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserEatWellLog$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserEatWellLogInput extends JsonSerializable with EquatableMixin {
  UpdateUserEatWellLogInput({required this.id, this.note, this.rating});

  factory UpdateUserEatWellLogInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserEatWellLogInputFromJson(json);

  late String id;

  String? note;

  @JsonKey(unknownEnumValue: UserDayLogRating.artemisUnknown)
  UserDayLogRating? rating;

  @override
  List<Object?> get props => [id, note, rating];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserEatWellLogInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMeditationLogs$Query extends JsonSerializable with EquatableMixin {
  UserMeditationLogs$Query();

  factory UserMeditationLogs$Query.fromJson(Map<String, dynamic> json) =>
      _$UserMeditationLogs$QueryFromJson(json);

  late List<UserMeditationLog> userMeditationLogs;

  @override
  List<Object?> get props => [userMeditationLogs];
  @override
  Map<String, dynamic> toJson() => _$UserMeditationLogs$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserEatWellLogs$Query extends JsonSerializable with EquatableMixin {
  UserEatWellLogs$Query();

  factory UserEatWellLogs$Query.fromJson(Map<String, dynamic> json) =>
      _$UserEatWellLogs$QueryFromJson(json);

  late List<UserEatWellLog> userEatWellLogs;

  @override
  List<Object?> get props => [userEatWellLogs];
  @override
  Map<String, dynamic> toJson() => _$UserEatWellLogs$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserSleepWellLogs$Query extends JsonSerializable with EquatableMixin {
  UserSleepWellLogs$Query();

  factory UserSleepWellLogs$Query.fromJson(Map<String, dynamic> json) =>
      _$UserSleepWellLogs$QueryFromJson(json);

  late List<UserSleepWellLog> userSleepWellLogs;

  @override
  List<Object?> get props => [userSleepWellLogs];
  @override
  Map<String, dynamic> toJson() => _$UserSleepWellLogs$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserGoals$Query extends JsonSerializable with EquatableMixin {
  UserGoals$Query();

  factory UserGoals$Query.fromJson(Map<String, dynamic> json) =>
      _$UserGoals$QueryFromJson(json);

  late List<UserGoal> userGoals;

  @override
  List<Object?> get props => [userGoals];
  @override
  Map<String, dynamic> toJson() => _$UserGoals$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserDayLogMoods$Query extends JsonSerializable with EquatableMixin {
  UserDayLogMoods$Query();

  factory UserDayLogMoods$Query.fromJson(Map<String, dynamic> json) =>
      _$UserDayLogMoods$QueryFromJson(json);

  late List<UserDayLogMood> userDayLogMoods;

  @override
  List<Object?> get props => [userDayLogMoods];
  @override
  Map<String, dynamic> toJson() => _$UserDayLogMoods$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Equipment extends JsonSerializable with EquatableMixin, EquipmentMixin {
  Equipment();

  factory Equipment.fromJson(Map<String, dynamic> json) =>
      _$EquipmentFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, loadAdjustable];
  @override
  Map<String, dynamic> toJson() => _$EquipmentToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MoveType extends JsonSerializable with EquatableMixin, MoveTypeMixin {
  MoveType();

  factory MoveType.fromJson(Map<String, dynamic> json) =>
      _$MoveTypeFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, description, imageUri];
  @override
  Map<String, dynamic> toJson() => _$MoveTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BodyArea extends JsonSerializable with EquatableMixin, BodyAreaMixin {
  BodyArea();

  factory BodyArea.fromJson(Map<String, dynamic> json) =>
      _$BodyAreaFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, frontBack, upperLower];
  @override
  Map<String, dynamic> toJson() => _$BodyAreaToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BodyAreaMoveScore extends JsonSerializable with EquatableMixin {
  BodyAreaMoveScore();

  factory BodyAreaMoveScore.fromJson(Map<String, dynamic> json) =>
      _$BodyAreaMoveScoreFromJson(json);

  late int score;

  @JsonKey(name: 'BodyArea')
  late BodyArea bodyArea;

  @override
  List<Object?> get props => [score, bodyArea];
  @override
  Map<String, dynamic> toJson() => _$BodyAreaMoveScoreToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Move extends JsonSerializable with EquatableMixin, MoveMixin {
  Move();

  factory Move.fromJson(Map<String, dynamic> json) => _$MoveFromJson(json);

  @JsonKey(name: 'MoveType')
  late MoveType moveType;

  @JsonKey(name: 'BodyAreaMoveScores')
  late List<BodyAreaMoveScore> bodyAreaMoveScores;

  @JsonKey(name: 'RequiredEquipments')
  late List<Equipment> requiredEquipments;

  @JsonKey(name: 'SelectableEquipments')
  late List<Equipment> selectableEquipments;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        searchTerms,
        description,
        demoVideoUri,
        demoVideoThumbUri,
        scope,
        validRepTypes,
        moveType,
        bodyAreaMoveScores,
        requiredEquipments,
        selectableEquipments
      ];
  @override
  Map<String, dynamic> toJson() => _$MoveToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutMove extends JsonSerializable
    with EquatableMixin, WorkoutMoveMixin {
  WorkoutMove();

  factory WorkoutMove.fromJson(Map<String, dynamic> json) =>
      _$WorkoutMoveFromJson(json);

  @JsonKey(name: 'Equipment')
  Equipment? equipment;

  @JsonKey(name: 'Move')
  late Move move;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        sortPosition,
        reps,
        repType,
        distanceUnit,
        loadAmount,
        loadUnit,
        timeUnit,
        equipment,
        move
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutMoveToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutMove$Mutation extends JsonSerializable with EquatableMixin {
  CreateWorkoutMove$Mutation();

  factory CreateWorkoutMove$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutMove$MutationFromJson(json);

  late WorkoutMove createWorkoutMove;

  @override
  List<Object?> get props => [createWorkoutMove];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutMove$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutMoveInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutMoveInput(
      {this.equipment,
      required this.move,
      required this.workoutSet,
      this.distanceUnit,
      required this.loadAmount,
      this.loadUnit,
      required this.repType,
      required this.reps,
      required this.sortPosition,
      this.timeUnit});

  factory CreateWorkoutMoveInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutMoveInputFromJson(json);

  @JsonKey(name: 'Equipment')
  ConnectRelationInput? equipment;

  @JsonKey(name: 'Move')
  late ConnectRelationInput move;

  @JsonKey(name: 'WorkoutSet')
  late ConnectRelationInput workoutSet;

  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  DistanceUnit? distanceUnit;

  late double loadAmount;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  LoadUnit? loadUnit;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late WorkoutMoveRepType repType;

  late double reps;

  late int sortPosition;

  @JsonKey(unknownEnumValue: TimeUnit.artemisUnknown)
  TimeUnit? timeUnit;

  @override
  List<Object?> get props => [
        equipment,
        move,
        workoutSet,
        distanceUnit,
        loadAmount,
        loadUnit,
        repType,
        reps,
        sortPosition,
        timeUnit
      ];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutMoveInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ConnectRelationInput extends JsonSerializable with EquatableMixin {
  ConnectRelationInput({required this.id});

  factory ConnectRelationInput.fromJson(Map<String, dynamic> json) =>
      _$ConnectRelationInputFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ConnectRelationInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutMoves$Mutation extends JsonSerializable with EquatableMixin {
  UpdateWorkoutMoves$Mutation();

  factory UpdateWorkoutMoves$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutMoves$MutationFromJson(json);

  late List<WorkoutMove> updateWorkoutMoves;

  @override
  List<Object?> get props => [updateWorkoutMoves];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutMoves$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutMoveInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutMoveInput(
      {this.equipment,
      this.move,
      this.distanceUnit,
      required this.id,
      this.loadAmount,
      this.loadUnit,
      this.repType,
      this.reps,
      this.timeUnit});

  factory UpdateWorkoutMoveInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutMoveInputFromJson(json);

  @JsonKey(name: 'Equipment')
  ConnectRelationInput? equipment;

  @JsonKey(name: 'Move')
  ConnectRelationInput? move;

  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  DistanceUnit? distanceUnit;

  late String id;

  double? loadAmount;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  LoadUnit? loadUnit;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  WorkoutMoveRepType? repType;

  double? reps;

  @JsonKey(unknownEnumValue: TimeUnit.artemisUnknown)
  TimeUnit? timeUnit;

  @override
  List<Object?> get props => [
        equipment,
        move,
        distanceUnit,
        id,
        loadAmount,
        loadUnit,
        repType,
        reps,
        timeUnit
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutMoveInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DuplicateWorkoutMoveById$Mutation extends JsonSerializable
    with EquatableMixin {
  DuplicateWorkoutMoveById$Mutation();

  factory DuplicateWorkoutMoveById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DuplicateWorkoutMoveById$MutationFromJson(json);

  late WorkoutMove duplicateWorkoutMoveById;

  @override
  List<Object?> get props => [duplicateWorkoutMoveById];
  @override
  Map<String, dynamic> toJson() =>
      _$DuplicateWorkoutMoveById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutMoveById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutMoveById$Mutation();

  factory DeleteWorkoutMoveById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteWorkoutMoveById$MutationFromJson(json);

  late String deleteWorkoutMoveById;

  @override
  List<Object?> get props => [deleteWorkoutMoveById];
  @override
  Map<String, dynamic> toJson() => _$DeleteWorkoutMoveById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class SortPositionUpdated extends JsonSerializable with EquatableMixin {
  SortPositionUpdated();

  factory SortPositionUpdated.fromJson(Map<String, dynamic> json) =>
      _$SortPositionUpdatedFromJson(json);

  late String id;

  late int sortPosition;

  @override
  List<Object?> get props => [id, sortPosition];
  @override
  Map<String, dynamic> toJson() => _$SortPositionUpdatedToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutMoves$Mutation extends JsonSerializable
    with EquatableMixin {
  ReorderWorkoutMoves$Mutation();

  factory ReorderWorkoutMoves$Mutation.fromJson(Map<String, dynamic> json) =>
      _$ReorderWorkoutMoves$MutationFromJson(json);

  late List<SortPositionUpdated> reorderWorkoutMoves;

  @override
  List<Object?> get props => [reorderWorkoutMoves];
  @override
  Map<String, dynamic> toJson() => _$ReorderWorkoutMoves$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateSortPositionInput extends JsonSerializable with EquatableMixin {
  UpdateSortPositionInput({required this.id, required this.sortPosition});

  factory UpdateSortPositionInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateSortPositionInputFromJson(json);

  late String id;

  late int sortPosition;

  @override
  List<Object?> get props => [id, sortPosition];
  @override
  Map<String, dynamic> toJson() => _$UpdateSortPositionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutMove$Mutation extends JsonSerializable with EquatableMixin {
  UpdateWorkoutMove$Mutation();

  factory UpdateWorkoutMove$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutMove$MutationFromJson(json);

  late WorkoutMove updateWorkoutMove;

  @override
  List<Object?> get props => [updateWorkoutMove];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutMove$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteCollectionById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteCollectionById$Mutation();

  factory DeleteCollectionById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteCollectionById$MutationFromJson(json);

  late String deleteCollectionById;

  @override
  List<Object?> get props => [deleteCollectionById];
  @override
  Map<String, dynamic> toJson() => _$DeleteCollectionById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSummary extends JsonSerializable
    with EquatableMixin, WorkoutSummaryMixin {
  WorkoutSummary();

  factory WorkoutSummary.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSummaryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        updatedAt,
        archived,
        name,
        user,
        lengthMinutes,
        coverImageUri,
        description,
        difficultyLevel,
        loggedSessionsCount,
        hasClassVideo,
        hasClassAudio,
        equipments,
        sectionTypes,
        goals,
        tags,
        bodyAreas
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanSummary extends JsonSerializable
    with EquatableMixin, WorkoutPlanSummaryMixin {
  WorkoutPlanSummary();

  factory WorkoutPlanSummary.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanSummaryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        updatedAt,
        archived,
        name,
        description,
        coverImageUri,
        lengthWeeks,
        daysPerWeek,
        workoutsCount,
        user,
        enrolmentsCount,
        goals,
        tags,
        reviewScore,
        reviewCount
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Collection extends JsonSerializable with EquatableMixin, CollectionMixin {
  Collection();

  factory Collection.fromJson(Map<String, dynamic> json) =>
      _$CollectionFromJson(json);

  @JsonKey(name: 'Workouts')
  late List<WorkoutSummary> workouts;

  @JsonKey(name: 'WorkoutPlans')
  late List<WorkoutPlanSummary> workoutPlans;

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, name, description, workouts, workoutPlans];
  @override
  Map<String, dynamic> toJson() => _$CollectionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutPlanToCollection$Mutation extends JsonSerializable
    with EquatableMixin {
  AddWorkoutPlanToCollection$Mutation();

  factory AddWorkoutPlanToCollection$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$AddWorkoutPlanToCollection$MutationFromJson(json);

  late Collection addWorkoutPlanToCollection;

  @override
  List<Object?> get props => [addWorkoutPlanToCollection];
  @override
  Map<String, dynamic> toJson() =>
      _$AddWorkoutPlanToCollection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSummaryMixin$UserAvatarData extends JsonSerializable
    with EquatableMixin, UserAvatarDataMixin {
  WorkoutSummaryMixin$UserAvatarData();

  factory WorkoutSummaryMixin$UserAvatarData.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutSummaryMixin$UserAvatarDataFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, avatarUri, displayName];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutSummaryMixin$UserAvatarDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanSummaryMixin$UserAvatarData extends JsonSerializable
    with EquatableMixin, UserAvatarDataMixin {
  WorkoutPlanSummaryMixin$UserAvatarData();

  factory WorkoutPlanSummaryMixin$UserAvatarData.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanSummaryMixin$UserAvatarDataFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, avatarUri, displayName];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanSummaryMixin$UserAvatarDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanSummaryMixin$WorkoutGoal extends JsonSerializable
    with EquatableMixin, WorkoutGoalMixin {
  WorkoutPlanSummaryMixin$WorkoutGoal();

  factory WorkoutPlanSummaryMixin$WorkoutGoal.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanSummaryMixin$WorkoutGoalFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, description, hexColor];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanSummaryMixin$WorkoutGoalToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutPlanToCollectionInput extends JsonSerializable
    with EquatableMixin {
  AddWorkoutPlanToCollectionInput(
      {required this.workoutPlan, required this.collectionId});

  factory AddWorkoutPlanToCollectionInput.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutPlanToCollectionInputFromJson(json);

  @JsonKey(name: 'WorkoutPlan')
  late ConnectRelationInput workoutPlan;

  late String collectionId;

  @override
  List<Object?> get props => [workoutPlan, collectionId];
  @override
  Map<String, dynamic> toJson() =>
      _$AddWorkoutPlanToCollectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateCollection$Mutation extends JsonSerializable with EquatableMixin {
  CreateCollection$Mutation();

  factory CreateCollection$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateCollection$MutationFromJson(json);

  late Collection createCollection;

  @override
  List<Object?> get props => [createCollection];
  @override
  Map<String, dynamic> toJson() => _$CreateCollection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateCollectionInput extends JsonSerializable with EquatableMixin {
  CreateCollectionInput({this.description, required this.name});

  factory CreateCollectionInput.fromJson(Map<String, dynamic> json) =>
      _$CreateCollectionInputFromJson(json);

  String? description;

  late String name;

  @override
  List<Object?> get props => [description, name];
  @override
  Map<String, dynamic> toJson() => _$CreateCollectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserCollectionById$Query extends JsonSerializable with EquatableMixin {
  UserCollectionById$Query();

  factory UserCollectionById$Query.fromJson(Map<String, dynamic> json) =>
      _$UserCollectionById$QueryFromJson(json);

  late Collection userCollectionById;

  @override
  List<Object?> get props => [userCollectionById];
  @override
  Map<String, dynamic> toJson() => _$UserCollectionById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutToCollection$Mutation extends JsonSerializable
    with EquatableMixin {
  AddWorkoutToCollection$Mutation();

  factory AddWorkoutToCollection$Mutation.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutToCollection$MutationFromJson(json);

  late Collection addWorkoutToCollection;

  @override
  List<Object?> get props => [addWorkoutToCollection];
  @override
  Map<String, dynamic> toJson() =>
      _$AddWorkoutToCollection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutToCollectionInput extends JsonSerializable with EquatableMixin {
  AddWorkoutToCollectionInput(
      {required this.workout, required this.collectionId});

  factory AddWorkoutToCollectionInput.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutToCollectionInputFromJson(json);

  @JsonKey(name: 'Workout')
  late ConnectRelationInput workout;

  late String collectionId;

  @override
  List<Object?> get props => [workout, collectionId];
  @override
  Map<String, dynamic> toJson() => _$AddWorkoutToCollectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserCollections$Query extends JsonSerializable with EquatableMixin {
  UserCollections$Query();

  factory UserCollections$Query.fromJson(Map<String, dynamic> json) =>
      _$UserCollections$QueryFromJson(json);

  late List<Collection> userCollections;

  @override
  List<Object?> get props => [userCollections];
  @override
  Map<String, dynamic> toJson() => _$UserCollections$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateCollection$Mutation extends JsonSerializable with EquatableMixin {
  UpdateCollection$Mutation();

  factory UpdateCollection$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateCollection$MutationFromJson(json);

  late Collection updateCollection;

  @override
  List<Object?> get props => [updateCollection];
  @override
  Map<String, dynamic> toJson() => _$UpdateCollection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateCollectionInput extends JsonSerializable with EquatableMixin {
  UpdateCollectionInput({this.description, required this.id, this.name});

  factory UpdateCollectionInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateCollectionInputFromJson(json);

  String? description;

  late String id;

  String? name;

  @override
  List<Object?> get props => [description, id, name];
  @override
  Map<String, dynamic> toJson() => _$UpdateCollectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutPlanFromCollection$Mutation extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutPlanFromCollection$Mutation();

  factory RemoveWorkoutPlanFromCollection$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutPlanFromCollection$MutationFromJson(json);

  late Collection removeWorkoutPlanFromCollection;

  @override
  List<Object?> get props => [removeWorkoutPlanFromCollection];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutPlanFromCollection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutPlanFromCollectionInput extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutPlanFromCollectionInput(
      {required this.workoutPlan, required this.collectionId});

  factory RemoveWorkoutPlanFromCollectionInput.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutPlanFromCollectionInputFromJson(json);

  @JsonKey(name: 'WorkoutPlan')
  late ConnectRelationInput workoutPlan;

  late String collectionId;

  @override
  List<Object?> get props => [workoutPlan, collectionId];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutPlanFromCollectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutFromCollection$Mutation extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutFromCollection$Mutation();

  factory RemoveWorkoutFromCollection$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutFromCollection$MutationFromJson(json);

  late Collection removeWorkoutFromCollection;

  @override
  List<Object?> get props => [removeWorkoutFromCollection];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutFromCollection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutFromCollectionInput extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutFromCollectionInput(
      {required this.workout, required this.collectionId});

  factory RemoveWorkoutFromCollectionInput.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutFromCollectionInputFromJson(json);

  @JsonKey(name: 'Workout')
  late ConnectRelationInput workout;

  late String collectionId;

  @override
  List<Object?> get props => [workout, collectionId];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutFromCollectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MarkWelcomeTodoItemAsSeen$Mutation extends JsonSerializable
    with EquatableMixin {
  MarkWelcomeTodoItemAsSeen$Mutation();

  factory MarkWelcomeTodoItemAsSeen$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$MarkWelcomeTodoItemAsSeen$MutationFromJson(json);

  late String markWelcomeTodoItemAsSeen;

  @override
  List<Object?> get props => [markWelcomeTodoItemAsSeen];
  @override
  Map<String, dynamic> toJson() =>
      _$MarkWelcomeTodoItemAsSeen$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MarkWelcomeTodoItemAsSeenInput extends JsonSerializable
    with EquatableMixin {
  MarkWelcomeTodoItemAsSeenInput(
      {required this.userId, required this.welcomeTodoItemId});

  factory MarkWelcomeTodoItemAsSeenInput.fromJson(Map<String, dynamic> json) =>
      _$MarkWelcomeTodoItemAsSeenInputFromJson(json);

  late String userId;

  late String welcomeTodoItemId;

  @override
  List<Object?> get props => [userId, welcomeTodoItemId];
  @override
  Map<String, dynamic> toJson() => _$MarkWelcomeTodoItemAsSeenInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WelcomeTodoItem extends JsonSerializable
    with EquatableMixin, WelcomeTodoItemMixin {
  WelcomeTodoItem();

  factory WelcomeTodoItem.fromJson(Map<String, dynamic> json) =>
      _$WelcomeTodoItemFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, videoUri, routeTo, title];
  @override
  Map<String, dynamic> toJson() => _$WelcomeTodoItemToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WelcomeTodoItems$Query extends JsonSerializable with EquatableMixin {
  WelcomeTodoItems$Query();

  factory WelcomeTodoItems$Query.fromJson(Map<String, dynamic> json) =>
      _$WelcomeTodoItems$QueryFromJson(json);

  late List<WelcomeTodoItem> welcomeTodoItems;

  @override
  List<Object?> get props => [welcomeTodoItems];
  @override
  Map<String, dynamic> toJson() => _$WelcomeTodoItems$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutPlanDayWorkouts$Mutation extends JsonSerializable
    with EquatableMixin {
  ReorderWorkoutPlanDayWorkouts$Mutation();

  factory ReorderWorkoutPlanDayWorkouts$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$ReorderWorkoutPlanDayWorkouts$MutationFromJson(json);

  late List<SortPositionUpdated> reorderWorkoutPlanDayWorkouts;

  @override
  List<Object?> get props => [reorderWorkoutPlanDayWorkouts];
  @override
  Map<String, dynamic> toJson() =>
      _$ReorderWorkoutPlanDayWorkouts$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Workout extends JsonSerializable with EquatableMixin, WorkoutDataMixin {
  Workout();

  factory Workout.fromJson(Map<String, dynamic> json) =>
      _$WorkoutFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        updatedAt,
        archived,
        name,
        description,
        lengthMinutes,
        difficultyLevel,
        coverImageUri,
        contentAccessScope,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        user,
        workoutGoals,
        workoutTags,
        workoutSections
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDayWorkout extends JsonSerializable
    with EquatableMixin, WorkoutPlanDayWorkoutMixin {
  WorkoutPlanDayWorkout();

  factory WorkoutPlanDayWorkout.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanDayWorkoutFromJson(json);

  @JsonKey(name: 'Workout')
  late Workout workout;

  @override
  List<Object?> get props => [id, $$typename, note, sortPosition, workout];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanDayWorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanDayWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanDayWorkout$Mutation();

  factory CreateWorkoutPlanDayWorkout$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanDayWorkout$MutationFromJson(json);

  late WorkoutPlanDayWorkout createWorkoutPlanDayWorkout;

  @override
  List<Object?> get props => [createWorkoutPlanDayWorkout];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanDayWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutDataMixin$UserAvatarData extends JsonSerializable
    with EquatableMixin, UserAvatarDataMixin {
  WorkoutDataMixin$UserAvatarData();

  factory WorkoutDataMixin$UserAvatarData.fromJson(Map<String, dynamic> json) =>
      _$WorkoutDataMixin$UserAvatarDataFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, avatarUri, displayName];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutDataMixin$UserAvatarDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutDataMixin$WorkoutGoal extends JsonSerializable
    with EquatableMixin, WorkoutGoalMixin {
  WorkoutDataMixin$WorkoutGoal();

  factory WorkoutDataMixin$WorkoutGoal.fromJson(Map<String, dynamic> json) =>
      _$WorkoutDataMixin$WorkoutGoalFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, description, hexColor];
  @override
  Map<String, dynamic> toJson() => _$WorkoutDataMixin$WorkoutGoalToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutDataMixin$WorkoutTag extends JsonSerializable
    with EquatableMixin, WorkoutTagMixin {
  WorkoutDataMixin$WorkoutTag();

  factory WorkoutDataMixin$WorkoutTag.fromJson(Map<String, dynamic> json) =>
      _$WorkoutDataMixin$WorkoutTagFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, tag];
  @override
  Map<String, dynamic> toJson() => _$WorkoutDataMixin$WorkoutTagToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSectionType extends JsonSerializable
    with EquatableMixin, WorkoutSectionTypeMixin {
  WorkoutSectionType();

  factory WorkoutSectionType.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSectionTypeFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, description];
  @override
  Map<String, dynamic> toJson() => _$WorkoutSectionTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSet extends JsonSerializable with EquatableMixin, WorkoutSetMixin {
  WorkoutSet();

  factory WorkoutSet.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSetFromJson(json);

  @JsonKey(name: 'WorkoutMoves')
  late List<WorkoutMove> workoutMoves;

  @override
  List<Object?> get props =>
      [$$typename, id, sortPosition, duration, workoutMoves];
  @override
  Map<String, dynamic> toJson() => _$WorkoutSetToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutDataMixin$WorkoutSection extends JsonSerializable
    with EquatableMixin, WorkoutSectionMixin {
  WorkoutDataMixin$WorkoutSection();

  factory WorkoutDataMixin$WorkoutSection.fromJson(Map<String, dynamic> json) =>
      _$WorkoutDataMixin$WorkoutSectionFromJson(json);

  @JsonKey(name: 'WorkoutSectionType')
  late WorkoutSectionType workoutSectionType;

  @JsonKey(name: 'WorkoutSets')
  late List<WorkoutSet> workoutSets;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        note,
        rounds,
        timecap,
        sortPosition,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        classVideoUri,
        classVideoThumbUri,
        classAudioUri,
        workoutSectionType,
        workoutSets
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutDataMixin$WorkoutSectionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanDayWorkoutInput extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanDayWorkoutInput(
      {required this.workout,
      required this.workoutPlanDay,
      this.note,
      required this.sortPosition});

  factory CreateWorkoutPlanDayWorkoutInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanDayWorkoutInputFromJson(json);

  @JsonKey(name: 'Workout')
  late ConnectRelationInput workout;

  @JsonKey(name: 'WorkoutPlanDay')
  late ConnectRelationInput workoutPlanDay;

  String? note;

  late int sortPosition;

  @override
  List<Object?> get props => [workout, workoutPlanDay, note, sortPosition];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanDayWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanDayWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanDayWorkout$Mutation();

  factory UpdateWorkoutPlanDayWorkout$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanDayWorkout$MutationFromJson(json);

  late WorkoutPlanDayWorkout updateWorkoutPlanDayWorkout;

  @override
  List<Object?> get props => [updateWorkoutPlanDayWorkout];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateWorkoutPlanDayWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanDayWorkoutInput extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanDayWorkoutInput(
      {this.workout, this.workoutPlanDay, required this.id, this.note});

  factory UpdateWorkoutPlanDayWorkoutInput.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanDayWorkoutInputFromJson(json);

  @JsonKey(name: 'Workout')
  ConnectRelationInput? workout;

  @JsonKey(name: 'WorkoutPlanDay')
  ConnectRelationInput? workoutPlanDay;

  late String id;

  String? note;

  @override
  List<Object?> get props => [workout, workoutPlanDay, id, note];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateWorkoutPlanDayWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanDayWorkoutById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanDayWorkoutById$Mutation();

  factory DeleteWorkoutPlanDayWorkoutById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanDayWorkoutById$MutationFromJson(json);

  late String deleteWorkoutPlanDayWorkoutById;

  @override
  List<Object?> get props => [deleteWorkoutPlanDayWorkoutById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanDayWorkoutById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanEnrolmentById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanEnrolmentById$Mutation();

  factory DeleteWorkoutPlanEnrolmentById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanEnrolmentById$MutationFromJson(json);

  late String deleteWorkoutPlanEnrolmentById;

  @override
  List<Object?> get props => [deleteWorkoutPlanEnrolmentById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanEnrolmentById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolmentSummary extends JsonSerializable
    with EquatableMixin, WorkoutPlanEnrolmentSummaryMixin {
  WorkoutPlanEnrolmentSummary();

  factory WorkoutPlanEnrolmentSummary.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolmentSummaryFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, startDate, completedWorkoutsCount, workoutPlan];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanEnrolmentSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolments$Query extends JsonSerializable with EquatableMixin {
  WorkoutPlanEnrolments$Query();

  factory WorkoutPlanEnrolments$Query.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolments$QueryFromJson(json);

  late List<WorkoutPlanEnrolmentSummary> workoutPlanEnrolments;

  @override
  List<Object?> get props => [workoutPlanEnrolments];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanEnrolments$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolmentSummaryMixin$WorkoutPlanSummary
    extends JsonSerializable with EquatableMixin, WorkoutPlanSummaryMixin {
  WorkoutPlanEnrolmentSummaryMixin$WorkoutPlanSummary();

  factory WorkoutPlanEnrolmentSummaryMixin$WorkoutPlanSummary.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolmentSummaryMixin$WorkoutPlanSummaryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        updatedAt,
        archived,
        name,
        description,
        coverImageUri,
        lengthWeeks,
        daysPerWeek,
        workoutsCount,
        user,
        enrolmentsCount,
        goals,
        tags,
        reviewScore,
        reviewCount
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanEnrolmentSummaryMixin$WorkoutPlanSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CompletedWorkoutPlanDayWorkout extends JsonSerializable
    with EquatableMixin, CompletedWorkoutPlanDayWorkoutMixin {
  CompletedWorkoutPlanDayWorkout();

  factory CompletedWorkoutPlanDayWorkout.fromJson(Map<String, dynamic> json) =>
      _$CompletedWorkoutPlanDayWorkoutFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, loggedWorkoutId, workoutPlanDayWorkoutId];
  @override
  Map<String, dynamic> toJson() => _$CompletedWorkoutPlanDayWorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolment extends JsonSerializable
    with EquatableMixin, WorkoutPlanEnrolmentMixin {
  WorkoutPlanEnrolment();

  factory WorkoutPlanEnrolment.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolmentFromJson(json);

  @JsonKey(name: 'CompletedWorkoutPlanDayWorkouts')
  late List<CompletedWorkoutPlanDayWorkout> completedWorkoutPlanDayWorkouts;

  @JsonKey(name: 'User')
  late UserAvatarData user;

  @override
  List<Object?> get props =>
      [$$typename, id, startDate, completedWorkoutPlanDayWorkouts, user];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanEnrolmentToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlan extends JsonSerializable
    with EquatableMixin, WorkoutPlanDataMixin {
  WorkoutPlan();

  factory WorkoutPlan.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        updatedAt,
        archived,
        name,
        description,
        lengthWeeks,
        daysPerWeek,
        coverImageUri,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        contentAccessScope,
        user,
        workoutPlanDays,
        workoutPlanReviews,
        workoutTags,
        workoutPlanEnrolments
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolmentWithPlan extends JsonSerializable
    with EquatableMixin {
  WorkoutPlanEnrolmentWithPlan();

  factory WorkoutPlanEnrolmentWithPlan.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolmentWithPlanFromJson(json);

  @JsonKey(name: '__typename')
  String? $$typename;

  @JsonKey(name: 'WorkoutPlanEnrolment')
  late WorkoutPlanEnrolment workoutPlanEnrolment;

  @JsonKey(name: 'WorkoutPlan')
  late WorkoutPlan workoutPlan;

  @override
  List<Object?> get props => [$$typename, workoutPlanEnrolment, workoutPlan];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanEnrolmentWithPlanToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolmentById$Query extends JsonSerializable
    with EquatableMixin {
  WorkoutPlanEnrolmentById$Query();

  factory WorkoutPlanEnrolmentById$Query.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolmentById$QueryFromJson(json);

  WorkoutPlanEnrolmentWithPlan? workoutPlanEnrolmentById;

  @override
  List<Object?> get props => [workoutPlanEnrolmentById];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanEnrolmentById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDataMixin$UserAvatarData extends JsonSerializable
    with EquatableMixin, UserAvatarDataMixin {
  WorkoutPlanDataMixin$UserAvatarData();

  factory WorkoutPlanDataMixin$UserAvatarData.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanDataMixin$UserAvatarDataFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, avatarUri, displayName];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanDataMixin$UserAvatarDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDataMixin$WorkoutPlanDay extends JsonSerializable
    with EquatableMixin, WorkoutPlanDayMixin {
  WorkoutPlanDataMixin$WorkoutPlanDay();

  factory WorkoutPlanDataMixin$WorkoutPlanDay.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanDataMixin$WorkoutPlanDayFromJson(json);

  @JsonKey(name: 'WorkoutPlanDayWorkouts')
  late List<WorkoutPlanDayWorkout> workoutPlanDayWorkouts;

  @override
  List<Object?> get props =>
      [id, $$typename, note, dayNumber, workoutPlanDayWorkouts];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanDataMixin$WorkoutPlanDayToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDataMixin$WorkoutPlanReview extends JsonSerializable
    with EquatableMixin, WorkoutPlanReviewMixin {
  WorkoutPlanDataMixin$WorkoutPlanReview();

  factory WorkoutPlanDataMixin$WorkoutPlanReview.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanDataMixin$WorkoutPlanReviewFromJson(json);

  @JsonKey(name: 'User')
  late UserAvatarData user;

  @override
  List<Object?> get props => [id, $$typename, createdAt, score, comment, user];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanDataMixin$WorkoutPlanReviewToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDataMixin$WorkoutTag extends JsonSerializable
    with EquatableMixin, WorkoutTagMixin {
  WorkoutPlanDataMixin$WorkoutTag();

  factory WorkoutPlanDataMixin$WorkoutTag.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanDataMixin$WorkoutTagFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, tag];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanDataMixin$WorkoutTagToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDataMixin$WorkoutPlanEnrolment extends JsonSerializable
    with EquatableMixin, WorkoutPlanEnrolmentMixin {
  WorkoutPlanDataMixin$WorkoutPlanEnrolment();

  factory WorkoutPlanDataMixin$WorkoutPlanEnrolment.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanDataMixin$WorkoutPlanEnrolmentFromJson(json);

  @JsonKey(name: 'CompletedWorkoutPlanDayWorkouts')
  late List<CompletedWorkoutPlanDayWorkout> completedWorkoutPlanDayWorkouts;

  @JsonKey(name: 'User')
  late UserAvatarData user;

  @override
  List<Object?> get props =>
      [$$typename, id, startDate, completedWorkoutPlanDayWorkouts, user];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanDataMixin$WorkoutPlanEnrolmentToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClearScheduleForPlanEnrolment$Mutation extends JsonSerializable
    with EquatableMixin {
  ClearScheduleForPlanEnrolment$Mutation();

  factory ClearScheduleForPlanEnrolment$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$ClearScheduleForPlanEnrolment$MutationFromJson(json);

  late WorkoutPlanEnrolment clearScheduleForPlanEnrolment;

  @override
  List<Object?> get props => [clearScheduleForPlanEnrolment];
  @override
  Map<String, dynamic> toJson() =>
      _$ClearScheduleForPlanEnrolment$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanEnrolment$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanEnrolment$Mutation();

  factory CreateWorkoutPlanEnrolment$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanEnrolment$MutationFromJson(json);

  late WorkoutPlanEnrolmentWithPlan createWorkoutPlanEnrolment;

  @override
  List<Object?> get props => [createWorkoutPlanEnrolment];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanEnrolment$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteCompletedWorkoutPlanDayWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteCompletedWorkoutPlanDayWorkout$Mutation();

  factory DeleteCompletedWorkoutPlanDayWorkout$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteCompletedWorkoutPlanDayWorkout$MutationFromJson(json);

  late WorkoutPlanEnrolment deleteCompletedWorkoutPlanDayWorkout;

  @override
  List<Object?> get props => [deleteCompletedWorkoutPlanDayWorkout];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteCompletedWorkoutPlanDayWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteCompletedWorkoutPlanDayWorkoutInput extends JsonSerializable
    with EquatableMixin {
  DeleteCompletedWorkoutPlanDayWorkoutInput(
      {required this.workoutPlanDayWorkoutId,
      required this.workoutPlanEnrolmentId});

  factory DeleteCompletedWorkoutPlanDayWorkoutInput.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteCompletedWorkoutPlanDayWorkoutInputFromJson(json);

  late String workoutPlanDayWorkoutId;

  late String workoutPlanEnrolmentId;

  @override
  List<Object?> get props => [workoutPlanDayWorkoutId, workoutPlanEnrolmentId];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteCompletedWorkoutPlanDayWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClearWorkoutPlanEnrolmentProgress$Mutation extends JsonSerializable
    with EquatableMixin {
  ClearWorkoutPlanEnrolmentProgress$Mutation();

  factory ClearWorkoutPlanEnrolmentProgress$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$ClearWorkoutPlanEnrolmentProgress$MutationFromJson(json);

  late WorkoutPlanEnrolment clearWorkoutPlanEnrolmentProgress;

  @override
  List<Object?> get props => [clearWorkoutPlanEnrolmentProgress];
  @override
  Map<String, dynamic> toJson() =>
      _$ClearWorkoutPlanEnrolmentProgress$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateScheduleForPlanEnrolment$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateScheduleForPlanEnrolment$Mutation();

  factory CreateScheduleForPlanEnrolment$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateScheduleForPlanEnrolment$MutationFromJson(json);

  late WorkoutPlanEnrolment createScheduleForPlanEnrolment;

  @override
  List<Object?> get props => [createScheduleForPlanEnrolment];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateScheduleForPlanEnrolment$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateScheduleForPlanEnrolmentInput extends JsonSerializable
    with EquatableMixin {
  CreateScheduleForPlanEnrolmentInput(
      {required this.startDate, required this.workoutPlanEnrolmentId});

  factory CreateScheduleForPlanEnrolmentInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateScheduleForPlanEnrolmentInputFromJson(json);

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime startDate;

  late String workoutPlanEnrolmentId;

  @override
  List<Object?> get props => [startDate, workoutPlanEnrolmentId];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateScheduleForPlanEnrolmentInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateCompletedWorkoutPlanDayWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateCompletedWorkoutPlanDayWorkout$Mutation();

  factory CreateCompletedWorkoutPlanDayWorkout$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateCompletedWorkoutPlanDayWorkout$MutationFromJson(json);

  late WorkoutPlanEnrolment createCompletedWorkoutPlanDayWorkout;

  @override
  List<Object?> get props => [createCompletedWorkoutPlanDayWorkout];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateCompletedWorkoutPlanDayWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateCompletedWorkoutPlanDayWorkoutInput extends JsonSerializable
    with EquatableMixin {
  CreateCompletedWorkoutPlanDayWorkoutInput(
      {required this.loggedWorkoutId,
      required this.workoutPlanDayWorkoutId,
      required this.workoutPlanEnrolmentId});

  factory CreateCompletedWorkoutPlanDayWorkoutInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateCompletedWorkoutPlanDayWorkoutInputFromJson(json);

  late String loggedWorkoutId;

  late String workoutPlanDayWorkoutId;

  late String workoutPlanEnrolmentId;

  @override
  List<Object?> get props =>
      [loggedWorkoutId, workoutPlanDayWorkoutId, workoutPlanEnrolmentId];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateCompletedWorkoutPlanDayWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDay extends JsonSerializable
    with EquatableMixin, WorkoutPlanDayMixin {
  WorkoutPlanDay();

  factory WorkoutPlanDay.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanDayFromJson(json);

  @JsonKey(name: 'WorkoutPlanDayWorkouts')
  late List<WorkoutPlanDayWorkout> workoutPlanDayWorkouts;

  @override
  List<Object?> get props =>
      [id, $$typename, note, dayNumber, workoutPlanDayWorkouts];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanDayToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MoveWorkoutPlanDayToAnotherDay$Mutation extends JsonSerializable
    with EquatableMixin {
  MoveWorkoutPlanDayToAnotherDay$Mutation();

  factory MoveWorkoutPlanDayToAnotherDay$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$MoveWorkoutPlanDayToAnotherDay$MutationFromJson(json);

  late WorkoutPlanDay moveWorkoutPlanDayToAnotherDay;

  @override
  List<Object?> get props => [moveWorkoutPlanDayToAnotherDay];
  @override
  Map<String, dynamic> toJson() =>
      _$MoveWorkoutPlanDayToAnotherDay$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MoveWorkoutPlanDayToAnotherDayInput extends JsonSerializable
    with EquatableMixin {
  MoveWorkoutPlanDayToAnotherDayInput(
      {required this.id, required this.moveToDay});

  factory MoveWorkoutPlanDayToAnotherDayInput.fromJson(
          Map<String, dynamic> json) =>
      _$MoveWorkoutPlanDayToAnotherDayInputFromJson(json);

  late String id;

  late int moveToDay;

  @override
  List<Object?> get props => [id, moveToDay];
  @override
  Map<String, dynamic> toJson() =>
      _$MoveWorkoutPlanDayToAnotherDayInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanDaysById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanDaysById$Mutation();

  factory DeleteWorkoutPlanDaysById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanDaysById$MutationFromJson(json);

  late List<String> deleteWorkoutPlanDaysById;

  @override
  List<Object?> get props => [deleteWorkoutPlanDaysById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanDaysById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanDay$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanDay$Mutation();

  factory UpdateWorkoutPlanDay$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanDay$MutationFromJson(json);

  late WorkoutPlanDay updateWorkoutPlanDay;

  @override
  List<Object?> get props => [updateWorkoutPlanDay];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanDay$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanDayInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutPlanDayInput({this.dayNumber, required this.id, this.note});

  factory UpdateWorkoutPlanDayInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanDayInputFromJson(json);

  int? dayNumber;

  late String id;

  String? note;

  @override
  List<Object?> get props => [dayNumber, id, note];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanDayInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanDayWithWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanDayWithWorkout$Mutation();

  factory CreateWorkoutPlanDayWithWorkout$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanDayWithWorkout$MutationFromJson(json);

  late WorkoutPlanDay createWorkoutPlanDayWithWorkout;

  @override
  List<Object?> get props => [createWorkoutPlanDayWithWorkout];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanDayWithWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanDayWithWorkoutInput extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanDayWithWorkoutInput(
      {required this.workout,
      required this.workoutPlan,
      required this.dayNumber});

  factory CreateWorkoutPlanDayWithWorkoutInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanDayWithWorkoutInputFromJson(json);

  @JsonKey(name: 'Workout')
  late ConnectRelationInput workout;

  @JsonKey(name: 'WorkoutPlan')
  late ConnectRelationInput workoutPlan;

  late int dayNumber;

  @override
  List<Object?> get props => [workout, workoutPlan, dayNumber];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanDayWithWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CopyWorkoutPlanDayToAnotherDay$Mutation extends JsonSerializable
    with EquatableMixin {
  CopyWorkoutPlanDayToAnotherDay$Mutation();

  factory CopyWorkoutPlanDayToAnotherDay$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CopyWorkoutPlanDayToAnotherDay$MutationFromJson(json);

  late WorkoutPlanDay copyWorkoutPlanDayToAnotherDay;

  @override
  List<Object?> get props => [copyWorkoutPlanDayToAnotherDay];
  @override
  Map<String, dynamic> toJson() =>
      _$CopyWorkoutPlanDayToAnotherDay$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CopyWorkoutPlanDayToAnotherDayInput extends JsonSerializable
    with EquatableMixin {
  CopyWorkoutPlanDayToAnotherDayInput(
      {required this.copyToDay, required this.id});

  factory CopyWorkoutPlanDayToAnotherDayInput.fromJson(
          Map<String, dynamic> json) =>
      _$CopyWorkoutPlanDayToAnotherDayInputFromJson(json);

  late int copyToDay;

  late String id;

  @override
  List<Object?> get props => [copyToDay, id];
  @override
  Map<String, dynamic> toJson() =>
      _$CopyWorkoutPlanDayToAnotherDayInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GymProfile extends JsonSerializable with EquatableMixin, GymProfileMixin {
  GymProfile();

  factory GymProfile.fromJson(Map<String, dynamic> json) =>
      _$GymProfileFromJson(json);

  @JsonKey(name: 'Equipments')
  late List<Equipment> equipments;

  @override
  List<Object?> get props => [$$typename, id, name, description, equipments];
  @override
  Map<String, dynamic> toJson() => _$GymProfileToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutGoal extends JsonSerializable
    with EquatableMixin, WorkoutGoalMixin {
  WorkoutGoal();

  factory WorkoutGoal.fromJson(Map<String, dynamic> json) =>
      _$WorkoutGoalFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, description, hexColor];
  @override
  Map<String, dynamic> toJson() => _$WorkoutGoalToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LoggedWorkoutMove extends JsonSerializable
    with EquatableMixin, LoggedWorkoutMoveMixin {
  LoggedWorkoutMove();

  factory LoggedWorkoutMove.fromJson(Map<String, dynamic> json) =>
      _$LoggedWorkoutMoveFromJson(json);

  @JsonKey(name: 'Move')
  late Move move;

  @JsonKey(name: 'Equipment')
  Equipment? equipment;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        sortPosition,
        repType,
        reps,
        distanceUnit,
        loadAmount,
        loadUnit,
        timeUnit,
        move,
        equipment
      ];
  @override
  Map<String, dynamic> toJson() => _$LoggedWorkoutMoveToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LoggedWorkoutSet extends JsonSerializable
    with EquatableMixin, LoggedWorkoutSetMixin {
  LoggedWorkoutSet();

  factory LoggedWorkoutSet.fromJson(Map<String, dynamic> json) =>
      _$LoggedWorkoutSetFromJson(json);

  @JsonKey(name: 'LoggedWorkoutMoves')
  late List<LoggedWorkoutMove> loggedWorkoutMoves;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        sortPosition,
        sectionRoundNumber,
        timeTakenSeconds,
        loggedWorkoutMoves
      ];
  @override
  Map<String, dynamic> toJson() => _$LoggedWorkoutSetToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LoggedWorkoutSection extends JsonSerializable
    with EquatableMixin, LoggedWorkoutSectionMixin {
  LoggedWorkoutSection();

  factory LoggedWorkoutSection.fromJson(Map<String, dynamic> json) =>
      _$LoggedWorkoutSectionFromJson(json);

  @JsonKey(name: 'WorkoutSectionType')
  late WorkoutSectionType workoutSectionType;

  @JsonKey(name: 'LoggedWorkoutSets')
  late List<LoggedWorkoutSet> loggedWorkoutSets;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        repScore,
        timeTakenSeconds,
        sortPosition,
        workoutSectionType,
        loggedWorkoutSets
      ];
  @override
  Map<String, dynamic> toJson() => _$LoggedWorkoutSectionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LoggedWorkout extends JsonSerializable
    with EquatableMixin, LoggedWorkoutMixin {
  LoggedWorkout();

  factory LoggedWorkout.fromJson(Map<String, dynamic> json) =>
      _$LoggedWorkoutFromJson(json);

  @JsonKey(name: 'User')
  UserAvatarData? user;

  @JsonKey(name: 'GymProfile')
  GymProfile? gymProfile;

  @JsonKey(name: 'WorkoutGoals')
  late List<WorkoutGoal> workoutGoals;

  @JsonKey(name: 'LoggedWorkoutSections')
  late List<LoggedWorkoutSection> loggedWorkoutSections;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        completedOn,
        note,
        name,
        workoutId,
        user,
        gymProfile,
        workoutGoals,
        loggedWorkoutSections
      ];
  @override
  Map<String, dynamic> toJson() => _$LoggedWorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LoggedWorkoutById$Query extends JsonSerializable with EquatableMixin {
  LoggedWorkoutById$Query();

  factory LoggedWorkoutById$Query.fromJson(Map<String, dynamic> json) =>
      _$LoggedWorkoutById$QueryFromJson(json);

  LoggedWorkout? loggedWorkoutById;

  @override
  List<Object?> get props => [loggedWorkoutById];
  @override
  Map<String, dynamic> toJson() => _$LoggedWorkoutById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteLoggedWorkoutById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteLoggedWorkoutById$Mutation();

  factory DeleteLoggedWorkoutById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteLoggedWorkoutById$MutationFromJson(json);

  late String deleteLoggedWorkoutById;

  @override
  List<Object?> get props => [deleteLoggedWorkoutById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteLoggedWorkoutById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LifetimeLogStatsSummary extends JsonSerializable
    with EquatableMixin, LifetimeLogStatsSummaryMixin {
  LifetimeLogStatsSummary();

  factory LifetimeLogStatsSummary.fromJson(Map<String, dynamic> json) =>
      _$LifetimeLogStatsSummaryFromJson(json);

  @override
  List<Object?> get props => [$$typename, minutesWorked, sessionsLogged];
  @override
  Map<String, dynamic> toJson() => _$LifetimeLogStatsSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LifetimeLogStatsSummary$Query extends JsonSerializable
    with EquatableMixin {
  LifetimeLogStatsSummary$Query();

  factory LifetimeLogStatsSummary$Query.fromJson(Map<String, dynamic> json) =>
      _$LifetimeLogStatsSummary$QueryFromJson(json);

  late LifetimeLogStatsSummary lifetimeLogStatsSummary;

  @override
  List<Object?> get props => [lifetimeLogStatsSummary];
  @override
  Map<String, dynamic> toJson() => _$LifetimeLogStatsSummary$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserLoggedWorkouts$Query extends JsonSerializable with EquatableMixin {
  UserLoggedWorkouts$Query();

  factory UserLoggedWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$UserLoggedWorkouts$QueryFromJson(json);

  late List<LoggedWorkout> userLoggedWorkouts;

  @override
  List<Object?> get props => [userLoggedWorkouts];
  @override
  Map<String, dynamic> toJson() => _$UserLoggedWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkout extends JsonSerializable
    with EquatableMixin, LoggedWorkoutMixin {
  UpdateLoggedWorkout();

  factory UpdateLoggedWorkout.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, completedOn, note, name, workoutId];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkout$Mutation();

  factory UpdateLoggedWorkout$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkout$MutationFromJson(json);

  late UpdateLoggedWorkout updateLoggedWorkout;

  @override
  List<Object?> get props => [updateLoggedWorkout];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutInput extends JsonSerializable with EquatableMixin {
  UpdateLoggedWorkoutInput(
      {this.gymProfile,
      required this.workoutGoals,
      this.completedOn,
      required this.id,
      this.note});

  factory UpdateLoggedWorkoutInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutInputFromJson(json);

  @JsonKey(name: 'GymProfile')
  ConnectRelationInput? gymProfile;

  @JsonKey(name: 'WorkoutGoals')
  late List<ConnectRelationInput> workoutGoals;

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? completedOn;

  late String id;

  String? note;

  @override
  List<Object?> get props => [gymProfile, workoutGoals, completedOn, id, note];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateLoggedWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateLoggedWorkout$Mutation();

  factory CreateLoggedWorkout$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateLoggedWorkout$MutationFromJson(json);

  late LoggedWorkout createLoggedWorkout;

  @override
  List<Object?> get props => [createLoggedWorkout];
  @override
  Map<String, dynamic> toJson() => _$CreateLoggedWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateLoggedWorkoutInput extends JsonSerializable with EquatableMixin {
  CreateLoggedWorkoutInput(
      {this.gymProfile,
      required this.loggedWorkoutSections,
      this.scheduledWorkout,
      this.workout,
      required this.workoutGoals,
      this.workoutPlanDayWorkout,
      this.workoutPlanEnrolment,
      required this.completedOn,
      required this.name,
      this.note});

  factory CreateLoggedWorkoutInput.fromJson(Map<String, dynamic> json) =>
      _$CreateLoggedWorkoutInputFromJson(json);

  @JsonKey(name: 'GymProfile')
  ConnectRelationInput? gymProfile;

  @JsonKey(name: 'LoggedWorkoutSections')
  late List<CreateLoggedWorkoutSectionInLoggedWorkoutInput>
      loggedWorkoutSections;

  @JsonKey(name: 'ScheduledWorkout')
  ConnectRelationInput? scheduledWorkout;

  @JsonKey(name: 'Workout')
  ConnectRelationInput? workout;

  @JsonKey(name: 'WorkoutGoals')
  late List<ConnectRelationInput> workoutGoals;

  @JsonKey(name: 'WorkoutPlanDayWorkout')
  ConnectRelationInput? workoutPlanDayWorkout;

  @JsonKey(name: 'WorkoutPlanEnrolment')
  ConnectRelationInput? workoutPlanEnrolment;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime completedOn;

  late String name;

  String? note;

  @override
  List<Object?> get props => [
        gymProfile,
        loggedWorkoutSections,
        scheduledWorkout,
        workout,
        workoutGoals,
        workoutPlanDayWorkout,
        workoutPlanEnrolment,
        completedOn,
        name,
        note
      ];
  @override
  Map<String, dynamic> toJson() => _$CreateLoggedWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateLoggedWorkoutSectionInLoggedWorkoutInput extends JsonSerializable
    with EquatableMixin {
  CreateLoggedWorkoutSectionInLoggedWorkoutInput(
      {required this.loggedWorkoutSets,
      required this.workoutSectionType,
      this.name,
      this.repScore,
      required this.sortPosition,
      required this.timeTakenSeconds});

  factory CreateLoggedWorkoutSectionInLoggedWorkoutInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateLoggedWorkoutSectionInLoggedWorkoutInputFromJson(json);

  @JsonKey(name: 'LoggedWorkoutSets')
  late List<CreateLoggedWorkoutSetInLoggedWorkoutSectionInput>
      loggedWorkoutSets;

  @JsonKey(name: 'WorkoutSectionType')
  late ConnectRelationInput workoutSectionType;

  String? name;

  int? repScore;

  late int sortPosition;

  late int timeTakenSeconds;

  @override
  List<Object?> get props => [
        loggedWorkoutSets,
        workoutSectionType,
        name,
        repScore,
        sortPosition,
        timeTakenSeconds
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateLoggedWorkoutSectionInLoggedWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateLoggedWorkoutSetInLoggedWorkoutSectionInput extends JsonSerializable
    with EquatableMixin {
  CreateLoggedWorkoutSetInLoggedWorkoutSectionInput(
      {required this.loggedWorkoutMoves,
      required this.sectionRoundNumber,
      required this.sortPosition,
      this.timeTakenSeconds});

  factory CreateLoggedWorkoutSetInLoggedWorkoutSectionInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateLoggedWorkoutSetInLoggedWorkoutSectionInputFromJson(json);

  @JsonKey(name: 'LoggedWorkoutMoves')
  late List<CreateLoggedWorkoutMoveInLoggedWorkoutSetInput> loggedWorkoutMoves;

  late int sectionRoundNumber;

  late int sortPosition;

  int? timeTakenSeconds;

  @override
  List<Object?> get props =>
      [loggedWorkoutMoves, sectionRoundNumber, sortPosition, timeTakenSeconds];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateLoggedWorkoutSetInLoggedWorkoutSectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateLoggedWorkoutMoveInLoggedWorkoutSetInput extends JsonSerializable
    with EquatableMixin {
  CreateLoggedWorkoutMoveInLoggedWorkoutSetInput(
      {this.equipment,
      required this.move,
      this.distanceUnit,
      this.loadAmount,
      this.loadUnit,
      required this.repType,
      required this.reps,
      required this.sortPosition,
      this.timeUnit});

  factory CreateLoggedWorkoutMoveInLoggedWorkoutSetInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateLoggedWorkoutMoveInLoggedWorkoutSetInputFromJson(json);

  @JsonKey(name: 'Equipment')
  ConnectRelationInput? equipment;

  @JsonKey(name: 'Move')
  late ConnectRelationInput move;

  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  DistanceUnit? distanceUnit;

  double? loadAmount;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  LoadUnit? loadUnit;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late WorkoutMoveRepType repType;

  late double reps;

  late int sortPosition;

  @JsonKey(unknownEnumValue: TimeUnit.artemisUnknown)
  TimeUnit? timeUnit;

  @override
  List<Object?> get props => [
        equipment,
        move,
        distanceUnit,
        loadAmount,
        loadUnit,
        repType,
        reps,
        sortPosition,
        timeUnit
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateLoggedWorkoutMoveInLoggedWorkoutSetInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteLoggedWorkoutMove$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteLoggedWorkoutMove$Mutation();

  factory DeleteLoggedWorkoutMove$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteLoggedWorkoutMove$MutationFromJson(json);

  late String deleteLoggedWorkoutMove;

  @override
  List<Object?> get props => [deleteLoggedWorkoutMove];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteLoggedWorkoutMove$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutMove extends JsonSerializable
    with EquatableMixin, LoggedWorkoutMoveMixin {
  UpdateLoggedWorkoutMove();

  factory UpdateLoggedWorkoutMove.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutMoveFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        sortPosition,
        repType,
        reps,
        distanceUnit,
        loadAmount,
        loadUnit,
        timeUnit
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkoutMoveToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutMove$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkoutMove$Mutation();

  factory UpdateLoggedWorkoutMove$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutMove$MutationFromJson(json);

  late UpdateLoggedWorkoutMove updateLoggedWorkoutMove;

  @override
  List<Object?> get props => [updateLoggedWorkoutMove];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateLoggedWorkoutMove$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutMoveInput extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkoutMoveInput(
      {this.equipment,
      this.move,
      this.distanceUnit,
      required this.id,
      this.loadAmount,
      this.loadUnit,
      this.repType,
      required this.reps,
      this.timeUnit});

  factory UpdateLoggedWorkoutMoveInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutMoveInputFromJson(json);

  @JsonKey(name: 'Equipment')
  ConnectRelationInput? equipment;

  @JsonKey(name: 'Move')
  ConnectRelationInput? move;

  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  DistanceUnit? distanceUnit;

  late String id;

  double? loadAmount;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  LoadUnit? loadUnit;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  WorkoutMoveRepType? repType;

  late double reps;

  @JsonKey(unknownEnumValue: TimeUnit.artemisUnknown)
  TimeUnit? timeUnit;

  @override
  List<Object?> get props => [
        equipment,
        move,
        distanceUnit,
        id,
        loadAmount,
        loadUnit,
        repType,
        reps,
        timeUnit
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkoutMoveInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutSection extends JsonSerializable
    with EquatableMixin, LoggedWorkoutSectionMixin {
  UpdateLoggedWorkoutSection();

  factory UpdateLoggedWorkoutSection.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutSectionFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, name, repScore, timeTakenSeconds, sortPosition];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkoutSectionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutSection$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkoutSection$Mutation();

  factory UpdateLoggedWorkoutSection$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutSection$MutationFromJson(json);

  late UpdateLoggedWorkoutSection updateLoggedWorkoutSection;

  @override
  List<Object?> get props => [updateLoggedWorkoutSection];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateLoggedWorkoutSection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutSectionInput extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkoutSectionInput(
      {required this.id, this.repScore, this.timeTakenSeconds});

  factory UpdateLoggedWorkoutSectionInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutSectionInputFromJson(json);

  late String id;

  int? repScore;

  int? timeTakenSeconds;

  @override
  List<Object?> get props => [id, repScore, timeTakenSeconds];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateLoggedWorkoutSectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutSet extends JsonSerializable
    with EquatableMixin, LoggedWorkoutSetMixin {
  UpdateLoggedWorkoutSet();

  factory UpdateLoggedWorkoutSet.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutSetFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, sortPosition, sectionRoundNumber, timeTakenSeconds];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkoutSetToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutSet$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkoutSet$Mutation();

  factory UpdateLoggedWorkoutSet$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutSet$MutationFromJson(json);

  late UpdateLoggedWorkoutSet updateLoggedWorkoutSet;

  @override
  List<Object?> get props => [updateLoggedWorkoutSet];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateLoggedWorkoutSet$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutSetInput extends JsonSerializable with EquatableMixin {
  UpdateLoggedWorkoutSetInput({required this.id, this.timeTakenSeconds});

  factory UpdateLoggedWorkoutSetInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutSetInputFromJson(json);

  late String id;

  int? timeTakenSeconds;

  @override
  List<Object?> get props => [id, timeTakenSeconds];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkoutSetInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LogCountByWorkout$Query extends JsonSerializable with EquatableMixin {
  LogCountByWorkout$Query();

  factory LogCountByWorkout$Query.fromJson(Map<String, dynamic> json) =>
      _$LogCountByWorkout$QueryFromJson(json);

  late int logCountByWorkout;

  @override
  List<Object?> get props => [logCountByWorkout];
  @override
  Map<String, dynamic> toJson() => _$LogCountByWorkout$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanReviewById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanReviewById$Mutation();

  factory DeleteWorkoutPlanReviewById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanReviewById$MutationFromJson(json);

  late String deleteWorkoutPlanReviewById;

  @override
  List<Object?> get props => [deleteWorkoutPlanReviewById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanReviewById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanReview extends JsonSerializable
    with EquatableMixin, WorkoutPlanReviewMixin {
  WorkoutPlanReview();

  factory WorkoutPlanReview.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanReviewFromJson(json);

  @JsonKey(name: 'User')
  late UserAvatarData user;

  @override
  List<Object?> get props => [id, $$typename, createdAt, score, comment, user];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanReviewToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanReview$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanReview$Mutation();

  factory UpdateWorkoutPlanReview$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanReview$MutationFromJson(json);

  late WorkoutPlanReview updateWorkoutPlanReview;

  @override
  List<Object?> get props => [updateWorkoutPlanReview];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateWorkoutPlanReview$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanReviewInput extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanReviewInput({this.comment, required this.id, this.score});

  factory UpdateWorkoutPlanReviewInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanReviewInputFromJson(json);

  String? comment;

  late String id;

  double? score;

  @override
  List<Object?> get props => [comment, id, score];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanReviewInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanReview$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanReview$Mutation();

  factory CreateWorkoutPlanReview$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanReview$MutationFromJson(json);

  late WorkoutPlanReview createWorkoutPlanReview;

  @override
  List<Object?> get props => [createWorkoutPlanReview];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanReview$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanReviewInput extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanReviewInput(
      {required this.workoutPlan, this.comment, required this.score});

  factory CreateWorkoutPlanReviewInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutPlanReviewInputFromJson(json);

  @JsonKey(name: 'WorkoutPlan')
  late ConnectRelationInput workoutPlan;

  String? comment;

  late double score;

  @override
  List<Object?> get props => [workoutPlan, comment, score];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutPlanReviewInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubWorkouts extends JsonSerializable
    with EquatableMixin, ClubWorkoutsMixin {
  ClubWorkouts();

  factory ClubWorkouts.fromJson(Map<String, dynamic> json) =>
      _$ClubWorkoutsFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, workouts];
  @override
  Map<String, dynamic> toJson() => _$ClubWorkoutsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutFromClub$Mutation extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutFromClub$Mutation();

  factory RemoveWorkoutFromClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$RemoveWorkoutFromClub$MutationFromJson(json);

  late ClubWorkouts removeWorkoutFromClub;

  @override
  List<Object?> get props => [removeWorkoutFromClub];
  @override
  Map<String, dynamic> toJson() => _$RemoveWorkoutFromClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubWorkoutsMixin$WorkoutSummary extends JsonSerializable
    with EquatableMixin, WorkoutSummaryMixin {
  ClubWorkoutsMixin$WorkoutSummary();

  factory ClubWorkoutsMixin$WorkoutSummary.fromJson(
          Map<String, dynamic> json) =>
      _$ClubWorkoutsMixin$WorkoutSummaryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        updatedAt,
        archived,
        name,
        user,
        lengthMinutes,
        coverImageUri,
        description,
        difficultyLevel,
        loggedSessionsCount,
        hasClassVideo,
        hasClassAudio,
        equipments,
        sectionTypes,
        goals,
        tags,
        bodyAreas
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$ClubWorkoutsMixin$WorkoutSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubWorkoutPlans extends JsonSerializable
    with EquatableMixin, ClubWorkoutPlansMixin {
  ClubWorkoutPlans();

  factory ClubWorkoutPlans.fromJson(Map<String, dynamic> json) =>
      _$ClubWorkoutPlansFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, workoutPlans];
  @override
  Map<String, dynamic> toJson() => _$ClubWorkoutPlansToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutPlanFromClub$Mutation extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutPlanFromClub$Mutation();

  factory RemoveWorkoutPlanFromClub$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutPlanFromClub$MutationFromJson(json);

  late ClubWorkoutPlans removeWorkoutPlanFromClub;

  @override
  List<Object?> get props => [removeWorkoutPlanFromClub];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutPlanFromClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubWorkoutPlansMixin$WorkoutPlanSummary extends JsonSerializable
    with EquatableMixin, WorkoutPlanSummaryMixin {
  ClubWorkoutPlansMixin$WorkoutPlanSummary();

  factory ClubWorkoutPlansMixin$WorkoutPlanSummary.fromJson(
          Map<String, dynamic> json) =>
      _$ClubWorkoutPlansMixin$WorkoutPlanSummaryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        updatedAt,
        archived,
        name,
        description,
        coverImageUri,
        lengthWeeks,
        daysPerWeek,
        workoutsCount,
        user,
        enrolmentsCount,
        goals,
        tags,
        reviewScore,
        reviewCount
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$ClubWorkoutPlansMixin$WorkoutPlanSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutToClub$Mutation extends JsonSerializable with EquatableMixin {
  AddWorkoutToClub$Mutation();

  factory AddWorkoutToClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutToClub$MutationFromJson(json);

  late ClubWorkouts addWorkoutToClub;

  @override
  List<Object?> get props => [addWorkoutToClub];
  @override
  Map<String, dynamic> toJson() => _$AddWorkoutToClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutPlanToClub$Mutation extends JsonSerializable
    with EquatableMixin {
  AddWorkoutPlanToClub$Mutation();

  factory AddWorkoutPlanToClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutPlanToClub$MutationFromJson(json);

  late ClubWorkoutPlans addWorkoutPlanToClub;

  @override
  List<Object?> get props => [addWorkoutPlanToClub];
  @override
  Map<String, dynamic> toJson() => _$AddWorkoutPlanToClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubWorkouts$Query extends JsonSerializable with EquatableMixin {
  ClubWorkouts$Query();

  factory ClubWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$ClubWorkouts$QueryFromJson(json);

  late ClubWorkouts clubWorkouts;

  @override
  List<Object?> get props => [clubWorkouts];
  @override
  Map<String, dynamic> toJson() => _$ClubWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubWorkoutPlans$Query extends JsonSerializable with EquatableMixin {
  ClubWorkoutPlans$Query();

  factory ClubWorkoutPlans$Query.fromJson(Map<String, dynamic> json) =>
      _$ClubWorkoutPlans$QueryFromJson(json);

  late ClubWorkoutPlans clubWorkoutPlans;

  @override
  List<Object?> get props => [clubWorkoutPlans];
  @override
  Map<String, dynamic> toJson() => _$ClubWorkoutPlans$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserWorkoutPlans$Query extends JsonSerializable with EquatableMixin {
  UserWorkoutPlans$Query();

  factory UserWorkoutPlans$Query.fromJson(Map<String, dynamic> json) =>
      _$UserWorkoutPlans$QueryFromJson(json);

  late List<WorkoutPlanSummary> userWorkoutPlans;

  @override
  List<Object?> get props => [userWorkoutPlans];
  @override
  Map<String, dynamic> toJson() => _$UserWorkoutPlans$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PublicWorkoutPlans$Query extends JsonSerializable with EquatableMixin {
  PublicWorkoutPlans$Query();

  factory PublicWorkoutPlans$Query.fromJson(Map<String, dynamic> json) =>
      _$PublicWorkoutPlans$QueryFromJson(json);

  late List<WorkoutPlanSummary> publicWorkoutPlans;

  @override
  List<Object?> get props => [publicWorkoutPlans];
  @override
  Map<String, dynamic> toJson() => _$PublicWorkoutPlans$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanFiltersInput extends JsonSerializable with EquatableMixin {
  WorkoutPlanFiltersInput(
      {this.bodyweightOnly,
      this.daysPerWeek,
      this.difficultyLevel,
      this.lengthWeeks,
      required this.workoutGoals});

  factory WorkoutPlanFiltersInput.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanFiltersInputFromJson(json);

  bool? bodyweightOnly;

  int? daysPerWeek;

  @JsonKey(unknownEnumValue: DifficultyLevel.artemisUnknown)
  DifficultyLevel? difficultyLevel;

  int? lengthWeeks;

  late List<String> workoutGoals;

  @override
  List<Object?> get props =>
      [bodyweightOnly, daysPerWeek, difficultyLevel, lengthWeeks, workoutGoals];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanFiltersInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanById$Query extends JsonSerializable with EquatableMixin {
  WorkoutPlanById$Query();

  factory WorkoutPlanById$Query.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanById$QueryFromJson(json);

  WorkoutPlan? workoutPlanById;

  @override
  List<Object?> get props => [workoutPlanById];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutTag extends JsonSerializable with EquatableMixin, WorkoutTagMixin {
  WorkoutTag();

  factory WorkoutTag.fromJson(Map<String, dynamic> json) =>
      _$WorkoutTagFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, tag];
  @override
  Map<String, dynamic> toJson() => _$WorkoutTagToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlan extends JsonSerializable
    with EquatableMixin, WorkoutPlanMixin {
  UpdateWorkoutPlan();

  factory UpdateWorkoutPlan.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanFromJson(json);

  @JsonKey(name: 'WorkoutTags')
  late List<WorkoutTag> workoutTags;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        updatedAt,
        archived,
        name,
        description,
        lengthWeeks,
        daysPerWeek,
        coverImageUri,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        contentAccessScope,
        workoutTags
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlan$Mutation extends JsonSerializable with EquatableMixin {
  UpdateWorkoutPlan$Mutation();

  factory UpdateWorkoutPlan$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlan$MutationFromJson(json);

  late UpdateWorkoutPlan updateWorkoutPlan;

  @override
  List<Object?> get props => [updateWorkoutPlan];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlan$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutPlanInput(
      {this.workoutTags,
      this.contentAccessScope,
      this.coverImageUri,
      this.daysPerWeek,
      this.description,
      required this.id,
      this.introAudioUri,
      this.introVideoThumbUri,
      this.introVideoUri,
      this.lengthWeeks,
      this.name});

  factory UpdateWorkoutPlanInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanInputFromJson(json);

  @JsonKey(name: 'WorkoutTags')
  List<ConnectRelationInput>? workoutTags;

  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  ContentAccessScope? contentAccessScope;

  String? coverImageUri;

  int? daysPerWeek;

  String? description;

  late String id;

  String? introAudioUri;

  String? introVideoThumbUri;

  String? introVideoUri;

  int? lengthWeeks;

  String? name;

  @override
  List<Object?> get props => [
        workoutTags,
        contentAccessScope,
        coverImageUri,
        daysPerWeek,
        description,
        id,
        introAudioUri,
        introVideoThumbUri,
        introVideoUri,
        lengthWeeks,
        name
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserPublicWorkoutPlans$Query extends JsonSerializable
    with EquatableMixin {
  UserPublicWorkoutPlans$Query();

  factory UserPublicWorkoutPlans$Query.fromJson(Map<String, dynamic> json) =>
      _$UserPublicWorkoutPlans$QueryFromJson(json);

  late List<WorkoutPlanSummary> userPublicWorkoutPlans;

  @override
  List<Object?> get props => [userPublicWorkoutPlans];
  @override
  Map<String, dynamic> toJson() => _$UserPublicWorkoutPlans$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlan$Mutation extends JsonSerializable with EquatableMixin {
  CreateWorkoutPlan$Mutation();

  factory CreateWorkoutPlan$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutPlan$MutationFromJson(json);

  late WorkoutPlan createWorkoutPlan;

  @override
  List<Object?> get props => [createWorkoutPlan];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutPlan$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutPlanInput(
      {required this.contentAccessScope, required this.name});

  factory CreateWorkoutPlanInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutPlanInputFromJson(json);

  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;

  late String name;

  @override
  List<Object?> get props => [contentAccessScope, name];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutPlanInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserAvatarById$Query extends JsonSerializable with EquatableMixin {
  UserAvatarById$Query();

  factory UserAvatarById$Query.fromJson(Map<String, dynamic> json) =>
      _$UserAvatarById$QueryFromJson(json);

  UserAvatarData? userAvatarById;

  @override
  List<Object?> get props => [userAvatarById];
  @override
  Map<String, dynamic> toJson() => _$UserAvatarById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserProfileSummary extends JsonSerializable
    with EquatableMixin, UserProfileSummaryMixin {
  UserProfileSummary();

  factory UserProfileSummary.fromJson(Map<String, dynamic> json) =>
      _$UserProfileSummaryFromJson(json);

  @JsonKey(name: 'Clubs')
  late List<ClubSummary> clubs;

  @override
  List<Object?> get props => [
        $$typename,
        userProfileScope,
        id,
        avatarUri,
        tagline,
        townCity,
        countryCode,
        displayName,
        workoutCount,
        planCount,
        skills,
        clubs
      ];
  @override
  Map<String, dynamic> toJson() => _$UserProfileSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserProfiles$Query extends JsonSerializable with EquatableMixin {
  UserProfiles$Query();

  factory UserProfiles$Query.fromJson(Map<String, dynamic> json) =>
      _$UserProfiles$QueryFromJson(json);

  late List<UserProfileSummary> userProfiles;

  @override
  List<Object?> get props => [userProfiles];
  @override
  Map<String, dynamic> toJson() => _$UserProfiles$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UnarchiveWorkoutPlanById$Mutation extends JsonSerializable
    with EquatableMixin {
  UnarchiveWorkoutPlanById$Mutation();

  factory UnarchiveWorkoutPlanById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UnarchiveWorkoutPlanById$MutationFromJson(json);

  late WorkoutPlan unarchiveWorkoutPlanById;

  @override
  List<Object?> get props => [unarchiveWorkoutPlanById];
  @override
  Map<String, dynamic> toJson() =>
      _$UnarchiveWorkoutPlanById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArchivedMove extends JsonSerializable
    with EquatableMixin, ArchivedMoveMixin {
  ArchivedMove();

  factory ArchivedMove.fromJson(Map<String, dynamic> json) =>
      _$ArchivedMoveFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, archived];
  @override
  Map<String, dynamic> toJson() => _$ArchivedMoveToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserArchivedCustomMoves$Query extends JsonSerializable
    with EquatableMixin {
  UserArchivedCustomMoves$Query();

  factory UserArchivedCustomMoves$Query.fromJson(Map<String, dynamic> json) =>
      _$UserArchivedCustomMoves$QueryFromJson(json);

  late List<ArchivedMove> archivedMove;

  @override
  List<Object?> get props => [archivedMove];
  @override
  Map<String, dynamic> toJson() => _$UserArchivedCustomMoves$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UnarchiveCustomMoveById$Mutation extends JsonSerializable
    with EquatableMixin {
  UnarchiveCustomMoveById$Mutation();

  factory UnarchiveCustomMoveById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UnarchiveCustomMoveById$MutationFromJson(json);

  late Move unarchiveCustomMoveById;

  @override
  List<Object?> get props => [unarchiveCustomMoveById];
  @override
  Map<String, dynamic> toJson() =>
      _$UnarchiveCustomMoveById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArchivedWorkoutPlan extends JsonSerializable
    with EquatableMixin, ArchivedWorkoutPlanMixin {
  ArchivedWorkoutPlan();

  factory ArchivedWorkoutPlan.fromJson(Map<String, dynamic> json) =>
      _$ArchivedWorkoutPlanFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, archived];
  @override
  Map<String, dynamic> toJson() => _$ArchivedWorkoutPlanToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArchiveWorkoutPlanById$Mutation extends JsonSerializable
    with EquatableMixin {
  ArchiveWorkoutPlanById$Mutation();

  factory ArchiveWorkoutPlanById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$ArchiveWorkoutPlanById$MutationFromJson(json);

  late ArchivedWorkoutPlan archivedWorkoutPlan;

  @override
  List<Object?> get props => [archivedWorkoutPlan];
  @override
  Map<String, dynamic> toJson() =>
      _$ArchiveWorkoutPlanById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UnarchiveWorkoutById$Mutation extends JsonSerializable
    with EquatableMixin {
  UnarchiveWorkoutById$Mutation();

  factory UnarchiveWorkoutById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UnarchiveWorkoutById$MutationFromJson(json);

  late Workout unarchiveWorkoutById;

  @override
  List<Object?> get props => [unarchiveWorkoutById];
  @override
  Map<String, dynamic> toJson() => _$UnarchiveWorkoutById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserArchivedWorkoutPlans$Query extends JsonSerializable
    with EquatableMixin {
  UserArchivedWorkoutPlans$Query();

  factory UserArchivedWorkoutPlans$Query.fromJson(Map<String, dynamic> json) =>
      _$UserArchivedWorkoutPlans$QueryFromJson(json);

  late List<ArchivedWorkoutPlan> archivedWorkoutPlan;

  @override
  List<Object?> get props => [archivedWorkoutPlan];
  @override
  Map<String, dynamic> toJson() => _$UserArchivedWorkoutPlans$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArchivedWorkout extends JsonSerializable
    with EquatableMixin, ArchivedWorkoutMixin {
  ArchivedWorkout();

  factory ArchivedWorkout.fromJson(Map<String, dynamic> json) =>
      _$ArchivedWorkoutFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, archived];
  @override
  Map<String, dynamic> toJson() => _$ArchivedWorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserArchivedWorkouts$Query extends JsonSerializable with EquatableMixin {
  UserArchivedWorkouts$Query();

  factory UserArchivedWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$UserArchivedWorkouts$QueryFromJson(json);

  late List<ArchivedWorkout> archivedWorkout;

  @override
  List<Object?> get props => [archivedWorkout];
  @override
  Map<String, dynamic> toJson() => _$UserArchivedWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArchiveWorkoutById$Mutation extends JsonSerializable with EquatableMixin {
  ArchiveWorkoutById$Mutation();

  factory ArchiveWorkoutById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$ArchiveWorkoutById$MutationFromJson(json);

  late ArchivedWorkout archivedWorkout;

  @override
  List<Object?> get props => [archivedWorkout];
  @override
  Map<String, dynamic> toJson() => _$ArchiveWorkoutById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArchiveCustomMoveById$Mutation extends JsonSerializable
    with EquatableMixin {
  ArchiveCustomMoveById$Mutation();

  factory ArchiveCustomMoveById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$ArchiveCustomMoveById$MutationFromJson(json);

  late ArchivedMove archivedMove;

  @override
  List<Object?> get props => [archivedMove];
  @override
  Map<String, dynamic> toJson() => _$ArchiveCustomMoveById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserAvatars$Query extends JsonSerializable with EquatableMixin {
  UserAvatars$Query();

  factory UserAvatars$Query.fromJson(Map<String, dynamic> json) =>
      _$UserAvatars$QueryFromJson(json);

  late List<UserAvatarData> userAvatars;

  @override
  List<Object?> get props => [userAvatars];
  @override
  Map<String, dynamic> toJson() => _$UserAvatars$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CustomMoves$Query extends JsonSerializable with EquatableMixin {
  CustomMoves$Query();

  factory CustomMoves$Query.fromJson(Map<String, dynamic> json) =>
      _$CustomMoves$QueryFromJson(json);

  late List<Move> customMoves;

  @override
  List<Object?> get props => [customMoves];
  @override
  Map<String, dynamic> toJson() => _$CustomMoves$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateMove$Mutation extends JsonSerializable with EquatableMixin {
  CreateMove$Mutation();

  factory CreateMove$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateMove$MutationFromJson(json);

  late Move createMove;

  @override
  List<Object?> get props => [createMove];
  @override
  Map<String, dynamic> toJson() => _$CreateMove$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateMoveInput extends JsonSerializable with EquatableMixin {
  CreateMoveInput(
      {this.bodyAreaMoveScores,
      required this.moveType,
      this.requiredEquipments,
      this.selectableEquipments,
      this.demoVideoThumbUri,
      this.demoVideoUri,
      this.description,
      required this.name,
      this.scope,
      this.searchTerms,
      required this.validRepTypes});

  factory CreateMoveInput.fromJson(Map<String, dynamic> json) =>
      _$CreateMoveInputFromJson(json);

  @JsonKey(name: 'BodyAreaMoveScores')
  List<BodyAreaMoveScoreInput>? bodyAreaMoveScores;

  @JsonKey(name: 'MoveType')
  late ConnectRelationInput moveType;

  @JsonKey(name: 'RequiredEquipments')
  List<ConnectRelationInput>? requiredEquipments;

  @JsonKey(name: 'SelectableEquipments')
  List<ConnectRelationInput>? selectableEquipments;

  String? demoVideoThumbUri;

  String? demoVideoUri;

  String? description;

  late String name;

  @JsonKey(unknownEnumValue: MoveScope.artemisUnknown)
  MoveScope? scope;

  String? searchTerms;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late List<WorkoutMoveRepType> validRepTypes;

  @override
  List<Object?> get props => [
        bodyAreaMoveScores,
        moveType,
        requiredEquipments,
        selectableEquipments,
        demoVideoThumbUri,
        demoVideoUri,
        description,
        name,
        scope,
        searchTerms,
        validRepTypes
      ];
  @override
  Map<String, dynamic> toJson() => _$CreateMoveInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BodyAreaMoveScoreInput extends JsonSerializable with EquatableMixin {
  BodyAreaMoveScoreInput({required this.bodyArea, required this.score});

  factory BodyAreaMoveScoreInput.fromJson(Map<String, dynamic> json) =>
      _$BodyAreaMoveScoreInputFromJson(json);

  @JsonKey(name: 'BodyArea')
  late ConnectRelationInput bodyArea;

  late double score;

  @override
  List<Object?> get props => [bodyArea, score];
  @override
  Map<String, dynamic> toJson() => _$BodyAreaMoveScoreInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMove$Mutation extends JsonSerializable with EquatableMixin {
  UpdateMove$Mutation();

  factory UpdateMove$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateMove$MutationFromJson(json);

  late Move updateMove;

  @override
  List<Object?> get props => [updateMove];
  @override
  Map<String, dynamic> toJson() => _$UpdateMove$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMoveInput extends JsonSerializable with EquatableMixin {
  UpdateMoveInput(
      {this.bodyAreaMoveScores,
      this.moveType,
      this.requiredEquipments,
      this.selectableEquipments,
      this.demoVideoThumbUri,
      this.demoVideoUri,
      this.description,
      required this.id,
      this.name,
      this.scope,
      this.searchTerms,
      this.validRepTypes});

  factory UpdateMoveInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateMoveInputFromJson(json);

  @JsonKey(name: 'BodyAreaMoveScores')
  List<BodyAreaMoveScoreInput>? bodyAreaMoveScores;

  @JsonKey(name: 'MoveType')
  ConnectRelationInput? moveType;

  @JsonKey(name: 'RequiredEquipments')
  List<ConnectRelationInput>? requiredEquipments;

  @JsonKey(name: 'SelectableEquipments')
  List<ConnectRelationInput>? selectableEquipments;

  String? demoVideoThumbUri;

  String? demoVideoUri;

  String? description;

  late String id;

  String? name;

  @JsonKey(unknownEnumValue: MoveScope.artemisUnknown)
  MoveScope? scope;

  String? searchTerms;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  List<WorkoutMoveRepType>? validRepTypes;

  @override
  List<Object?> get props => [
        bodyAreaMoveScores,
        moveType,
        requiredEquipments,
        selectableEquipments,
        demoVideoThumbUri,
        demoVideoUri,
        description,
        id,
        name,
        scope,
        searchTerms,
        validRepTypes
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateMoveInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteMoveById$Mutation extends JsonSerializable with EquatableMixin {
  DeleteMoveById$Mutation();

  factory DeleteMoveById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteMoveById$MutationFromJson(json);

  late String softDeleteMoveById;

  @override
  List<Object?> get props => [softDeleteMoveById];
  @override
  Map<String, dynamic> toJson() => _$DeleteMoveById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteGymProfileById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteGymProfileById$Mutation();

  factory DeleteGymProfileById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteGymProfileById$MutationFromJson(json);

  String? deleteGymProfileById;

  @override
  List<Object?> get props => [deleteGymProfileById];
  @override
  Map<String, dynamic> toJson() => _$DeleteGymProfileById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateGymProfile$Mutation extends JsonSerializable with EquatableMixin {
  CreateGymProfile$Mutation();

  factory CreateGymProfile$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateGymProfile$MutationFromJson(json);

  late GymProfile createGymProfile;

  @override
  List<Object?> get props => [createGymProfile];
  @override
  Map<String, dynamic> toJson() => _$CreateGymProfile$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateGymProfileInput extends JsonSerializable with EquatableMixin {
  CreateGymProfileInput(
      {this.equipments, this.description, required this.name});

  factory CreateGymProfileInput.fromJson(Map<String, dynamic> json) =>
      _$CreateGymProfileInputFromJson(json);

  @JsonKey(name: 'Equipments')
  List<ConnectRelationInput>? equipments;

  String? description;

  late String name;

  @override
  List<Object?> get props => [equipments, description, name];
  @override
  Map<String, dynamic> toJson() => _$CreateGymProfileInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GymProfiles$Query extends JsonSerializable with EquatableMixin {
  GymProfiles$Query();

  factory GymProfiles$Query.fromJson(Map<String, dynamic> json) =>
      _$GymProfiles$QueryFromJson(json);

  late List<GymProfile> gymProfiles;

  @override
  List<Object?> get props => [gymProfiles];
  @override
  Map<String, dynamic> toJson() => _$GymProfiles$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateGymProfile$Mutation extends JsonSerializable with EquatableMixin {
  UpdateGymProfile$Mutation();

  factory UpdateGymProfile$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateGymProfile$MutationFromJson(json);

  late GymProfile updateGymProfile;

  @override
  List<Object?> get props => [updateGymProfile];
  @override
  Map<String, dynamic> toJson() => _$UpdateGymProfile$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateGymProfileInput extends JsonSerializable with EquatableMixin {
  UpdateGymProfileInput(
      {this.equipments, this.description, required this.id, this.name});

  factory UpdateGymProfileInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateGymProfileInputFromJson(json);

  @JsonKey(name: 'Equipments')
  List<ConnectRelationInput>? equipments;

  String? description;

  late String id;

  String? name;

  @override
  List<Object?> get props => [equipments, description, id, name];
  @override
  Map<String, dynamic> toJson() => _$UpdateGymProfileInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserProfileResult extends JsonSerializable
    with EquatableMixin, UserProfileResultMixin {
  UpdateUserProfileResult();

  factory UpdateUserProfileResult.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserProfileResultFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        userProfileScope,
        avatarUri,
        introVideoUri,
        introVideoThumbUri,
        bio,
        tagline,
        birthdate,
        townCity,
        countryCode,
        displayName,
        instagramHandle,
        tiktokHandle,
        youtubeHandle,
        linkedinHandle,
        firstname,
        gender,
        hasOnboarded,
        lastname,
        workoutsPerWeekTarget,
        activeProgressWidgets,
        activeLogDataWidgets
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserProfileResultToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserProfile$Mutation extends JsonSerializable with EquatableMixin {
  UpdateUserProfile$Mutation();

  factory UpdateUserProfile$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserProfile$MutationFromJson(json);

  late UpdateUserProfileResult updateUserProfile;

  @override
  List<Object?> get props => [updateUserProfile];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserProfile$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserProfileInput extends JsonSerializable with EquatableMixin {
  UpdateUserProfileInput(
      {this.activeLogDataWidgets,
      this.activeProgressWidgets,
      this.avatarUri,
      this.bio,
      this.birthdate,
      this.countryCode,
      this.displayName,
      this.firstname,
      this.gender,
      this.hasOnboarded,
      this.instagramHandle,
      this.introVideoThumbUri,
      this.introVideoUri,
      this.lastname,
      this.linkedinHandle,
      this.tagline,
      this.tiktokHandle,
      this.townCity,
      this.userProfileScope,
      this.workoutsPerWeekTarget,
      this.youtubeHandle});

  factory UpdateUserProfileInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserProfileInputFromJson(json);

  List<String>? activeLogDataWidgets;

  List<String>? activeProgressWidgets;

  String? avatarUri;

  String? bio;

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? birthdate;

  String? countryCode;

  String? displayName;

  String? firstname;

  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;

  bool? hasOnboarded;

  String? instagramHandle;

  String? introVideoThumbUri;

  String? introVideoUri;

  String? lastname;

  String? linkedinHandle;

  String? tagline;

  String? tiktokHandle;

  String? townCity;

  @JsonKey(unknownEnumValue: UserProfileScope.artemisUnknown)
  UserProfileScope? userProfileScope;

  int? workoutsPerWeekTarget;

  String? youtubeHandle;

  @override
  List<Object?> get props => [
        activeLogDataWidgets,
        activeProgressWidgets,
        avatarUri,
        bio,
        birthdate,
        countryCode,
        displayName,
        firstname,
        gender,
        hasOnboarded,
        instagramHandle,
        introVideoThumbUri,
        introVideoUri,
        lastname,
        linkedinHandle,
        tagline,
        tiktokHandle,
        townCity,
        userProfileScope,
        workoutsPerWeekTarget,
        youtubeHandle
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserProfileInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Skill extends JsonSerializable with EquatableMixin, SkillMixin {
  Skill();

  factory Skill.fromJson(Map<String, dynamic> json) => _$SkillFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        updatedAt,
        name,
        experience,
        certification,
        awardingBody,
        certificateRef,
        documentUri
      ];
  @override
  Map<String, dynamic> toJson() => _$SkillToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmarkSummary extends JsonSerializable
    with EquatableMixin, UserBenchmarkSummaryMixin {
  UserBenchmarkSummary();

  factory UserBenchmarkSummary.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarkSummaryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        lastEntryAt,
        name,
        equipmentInfo,
        benchmarkType,
        loadUnit
      ];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarkSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmarkEntry extends JsonSerializable
    with EquatableMixin, UserBenchmarkEntryMixin {
  UserBenchmarkEntry();

  factory UserBenchmarkEntry.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarkEntryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        completedOn,
        score,
        note,
        videoUri,
        videoThumbUri
      ];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarkEntryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmarkWithBestEntry extends JsonSerializable with EquatableMixin {
  UserBenchmarkWithBestEntry();

  factory UserBenchmarkWithBestEntry.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarkWithBestEntryFromJson(json);

  @JsonKey(name: 'UserBenchmarkSummary')
  late UserBenchmarkSummary userBenchmarkSummary;

  @JsonKey(name: 'BestEntry')
  UserBenchmarkEntry? bestEntry;

  @override
  List<Object?> get props => [userBenchmarkSummary, bestEntry];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarkWithBestEntryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserProfile extends JsonSerializable
    with EquatableMixin, UserProfileMixin {
  UserProfile();

  factory UserProfile.fromJson(Map<String, dynamic> json) =>
      _$UserProfileFromJson(json);

  @JsonKey(name: 'Clubs')
  late List<ClubSummary> clubs;

  @JsonKey(name: 'LifetimeLogStatsSummary')
  LifetimeLogStatsSummary? lifetimeLogStatsSummary;

  @JsonKey(name: 'Skills')
  late List<Skill> skills;

  @JsonKey(name: 'BenchmarksWithBestEntries')
  late List<UserBenchmarkWithBestEntry> benchmarksWithBestEntries;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        userProfileScope,
        avatarUri,
        introVideoUri,
        introVideoThumbUri,
        bio,
        tagline,
        townCity,
        instagramHandle,
        tiktokHandle,
        youtubeHandle,
        linkedinHandle,
        countryCode,
        displayName,
        gender,
        birthdate,
        followerCount,
        workoutCount,
        planCount,
        workoutsPerWeekTarget,
        activeProgressWidgets,
        activeLogDataWidgets,
        clubs,
        lifetimeLogStatsSummary,
        skills,
        benchmarksWithBestEntries
      ];
  @override
  Map<String, dynamic> toJson() => _$UserProfileToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserProfile$Query extends JsonSerializable with EquatableMixin {
  UserProfile$Query();

  factory UserProfile$Query.fromJson(Map<String, dynamic> json) =>
      _$UserProfile$QueryFromJson(json);

  UserProfile? userProfile;

  @override
  List<Object?> get props => [userProfile];
  @override
  Map<String, dynamic> toJson() => _$UserProfile$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutTagById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutTagById$Mutation();

  factory DeleteWorkoutTagById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteWorkoutTagById$MutationFromJson(json);

  late String deleteWorkoutTagById;

  @override
  List<Object?> get props => [deleteWorkoutTagById];
  @override
  Map<String, dynamic> toJson() => _$DeleteWorkoutTagById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutTag$Mutation extends JsonSerializable with EquatableMixin {
  UpdateWorkoutTag$Mutation();

  factory UpdateWorkoutTag$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutTag$MutationFromJson(json);

  late WorkoutTag updateWorkoutTag;

  @override
  List<Object?> get props => [updateWorkoutTag];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutTag$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutTagInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutTagInput({required this.id, required this.tag});

  factory UpdateWorkoutTagInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutTagInputFromJson(json);

  late String id;

  late String tag;

  @override
  List<Object?> get props => [id, tag];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutTagInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserWorkoutTags$Query extends JsonSerializable with EquatableMixin {
  UserWorkoutTags$Query();

  factory UserWorkoutTags$Query.fromJson(Map<String, dynamic> json) =>
      _$UserWorkoutTags$QueryFromJson(json);

  late List<WorkoutTag> userWorkoutTags;

  @override
  List<Object?> get props => [userWorkoutTags];
  @override
  Map<String, dynamic> toJson() => _$UserWorkoutTags$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutTag$Mutation extends JsonSerializable with EquatableMixin {
  CreateWorkoutTag$Mutation();

  factory CreateWorkoutTag$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutTag$MutationFromJson(json);

  late WorkoutTag createWorkoutTag;

  @override
  List<Object?> get props => [createWorkoutTag];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutTag$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutTagInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutTagInput({required this.tag});

  factory CreateWorkoutTagInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutTagInputFromJson(json);

  late String tag;

  @override
  List<Object?> get props => [tag];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutTagInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserRecentlyViewedObject extends JsonSerializable with EquatableMixin {
  UserRecentlyViewedObject();

  factory UserRecentlyViewedObject.fromJson(Map<String, dynamic> json) =>
      _$UserRecentlyViewedObjectFromJson(json);

  @JsonKey(name: '__typename')
  String? $$typename;

  @JsonKey(name: 'Club')
  ClubSummary? club;

  @JsonKey(name: 'Workout')
  WorkoutSummary? workout;

  @JsonKey(name: 'WorkoutPlan')
  WorkoutPlanSummary? workoutPlan;

  @override
  List<Object?> get props => [$$typename, club, workout, workoutPlan];
  @override
  Map<String, dynamic> toJson() => _$UserRecentlyViewedObjectToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserRecentlyViewedObjects$Query extends JsonSerializable
    with EquatableMixin {
  UserRecentlyViewedObjects$Query();

  factory UserRecentlyViewedObjects$Query.fromJson(Map<String, dynamic> json) =>
      _$UserRecentlyViewedObjects$QueryFromJson(json);

  late List<UserRecentlyViewedObject> userRecentlyViewedObjects;

  @override
  List<Object?> get props => [userRecentlyViewedObjects];
  @override
  Map<String, dynamic> toJson() =>
      _$UserRecentlyViewedObjects$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSet extends JsonSerializable
    with EquatableMixin, WorkoutSetMixin {
  UpdateWorkoutSet();

  factory UpdateWorkoutSet.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSetFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, sortPosition, duration];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSetToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSet$Mutation extends JsonSerializable with EquatableMixin {
  UpdateWorkoutSet$Mutation();

  factory UpdateWorkoutSet$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSet$MutationFromJson(json);

  late UpdateWorkoutSet updateWorkoutSet;

  @override
  List<Object?> get props => [updateWorkoutSet];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSet$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSetInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutSetInput({this.duration, required this.id});

  factory UpdateWorkoutSetInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSetInputFromJson(json);

  int? duration;

  late String id;

  @override
  List<Object?> get props => [duration, id];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSetInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSetWithWorkoutMoves$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutSetWithWorkoutMoves$Mutation();

  factory CreateWorkoutSetWithWorkoutMoves$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutSetWithWorkoutMoves$MutationFromJson(json);

  late WorkoutSet createWorkoutSetWithWorkoutMoves;

  @override
  List<Object?> get props => [createWorkoutSetWithWorkoutMoves];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutSetWithWorkoutMoves$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSetWithWorkoutMovesInput extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutSetWithWorkoutMovesInput(
      {required this.workoutMoves, required this.workoutSet});

  factory CreateWorkoutSetWithWorkoutMovesInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutSetWithWorkoutMovesInputFromJson(json);

  late List<CreateWorkoutMoveInSetInput> workoutMoves;

  late CreateWorkoutSetInput workoutSet;

  @override
  List<Object?> get props => [workoutMoves, workoutSet];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutSetWithWorkoutMovesInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutMoveInSetInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutMoveInSetInput(
      {this.equipment,
      required this.move,
      this.distanceUnit,
      required this.loadAmount,
      this.loadUnit,
      required this.repType,
      required this.reps,
      required this.sortPosition,
      this.timeUnit});

  factory CreateWorkoutMoveInSetInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutMoveInSetInputFromJson(json);

  @JsonKey(name: 'Equipment')
  ConnectRelationInput? equipment;

  @JsonKey(name: 'Move')
  late ConnectRelationInput move;

  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  DistanceUnit? distanceUnit;

  late double loadAmount;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  LoadUnit? loadUnit;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late WorkoutMoveRepType repType;

  late double reps;

  late int sortPosition;

  @JsonKey(unknownEnumValue: TimeUnit.artemisUnknown)
  TimeUnit? timeUnit;

  @override
  List<Object?> get props => [
        equipment,
        move,
        distanceUnit,
        loadAmount,
        loadUnit,
        repType,
        reps,
        sortPosition,
        timeUnit
      ];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutMoveInSetInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSetInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutSetInput(
      {required this.workoutSection,
      this.duration,
      required this.sortPosition});

  factory CreateWorkoutSetInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSetInputFromJson(json);

  @JsonKey(name: 'WorkoutSection')
  late ConnectRelationInput workoutSection;

  int? duration;

  late int sortPosition;

  @override
  List<Object?> get props => [workoutSection, duration, sortPosition];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSetInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DuplicateWorkoutSetById$Mutation extends JsonSerializable
    with EquatableMixin {
  DuplicateWorkoutSetById$Mutation();

  factory DuplicateWorkoutSetById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DuplicateWorkoutSetById$MutationFromJson(json);

  late WorkoutSet duplicateWorkoutSetById;

  @override
  List<Object?> get props => [duplicateWorkoutSetById];
  @override
  Map<String, dynamic> toJson() =>
      _$DuplicateWorkoutSetById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutSets$Mutation extends JsonSerializable with EquatableMixin {
  ReorderWorkoutSets$Mutation();

  factory ReorderWorkoutSets$Mutation.fromJson(Map<String, dynamic> json) =>
      _$ReorderWorkoutSets$MutationFromJson(json);

  late List<SortPositionUpdated> reorderWorkoutSets;

  @override
  List<Object?> get props => [reorderWorkoutSets];
  @override
  Map<String, dynamic> toJson() => _$ReorderWorkoutSets$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSet extends JsonSerializable
    with EquatableMixin, WorkoutSetMixin {
  CreateWorkoutSet();

  factory CreateWorkoutSet.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSetFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, sortPosition, duration];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSetToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSet$Mutation extends JsonSerializable with EquatableMixin {
  CreateWorkoutSet$Mutation();

  factory CreateWorkoutSet$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSet$MutationFromJson(json);

  late CreateWorkoutSet createWorkoutSet;

  @override
  List<Object?> get props => [createWorkoutSet];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSet$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutSetById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutSetById$Mutation();

  factory DeleteWorkoutSetById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteWorkoutSetById$MutationFromJson(json);

  late String deleteWorkoutSetById;

  @override
  List<Object?> get props => [deleteWorkoutSetById];
  @override
  Map<String, dynamic> toJson() => _$DeleteWorkoutSetById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ProgressWidget extends JsonSerializable
    with EquatableMixin, ProgressWidgetMixin {
  ProgressWidget();

  factory ProgressWidget.fromJson(Map<String, dynamic> json) =>
      _$ProgressWidgetFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, name, subtitle, description];
  @override
  Map<String, dynamic> toJson() => _$ProgressWidgetToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CoreData extends JsonSerializable with EquatableMixin {
  CoreData();

  factory CoreData.fromJson(Map<String, dynamic> json) =>
      _$CoreDataFromJson(json);

  @JsonKey(name: '__typename')
  String? $$typename;

  late List<BodyArea> bodyAreas;

  late List<Equipment> equipment;

  late List<MoveType> moveTypes;

  late List<WorkoutGoal> workoutGoals;

  late List<WorkoutSectionType> workoutSectionTypes;

  late List<Move> standardMoves;

  late List<ProgressWidget> progressWidgets;

  @override
  List<Object?> get props => [
        $$typename,
        bodyAreas,
        equipment,
        moveTypes,
        workoutGoals,
        workoutSectionTypes,
        standardMoves,
        progressWidgets
      ];
  @override
  Map<String, dynamic> toJson() => _$CoreDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CoreData$Query extends JsonSerializable with EquatableMixin {
  CoreData$Query();

  factory CoreData$Query.fromJson(Map<String, dynamic> json) =>
      _$CoreData$QueryFromJson(json);

  late CoreData coreData;

  @override
  List<Object?> get props => [coreData];
  @override
  Map<String, dynamic> toJson() => _$CoreData$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CheckUniqueDisplayName$Query extends JsonSerializable
    with EquatableMixin {
  CheckUniqueDisplayName$Query();

  factory CheckUniqueDisplayName$Query.fromJson(Map<String, dynamic> json) =>
      _$CheckUniqueDisplayName$QueryFromJson(json);

  late bool checkUniqueDisplayName;

  @override
  List<Object?> get props => [checkUniqueDisplayName];
  @override
  Map<String, dynamic> toJson() => _$CheckUniqueDisplayName$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmarkEntry$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateUserBenchmarkEntry$Mutation();

  factory CreateUserBenchmarkEntry$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserBenchmarkEntry$MutationFromJson(json);

  late UserBenchmarkEntry createUserBenchmarkEntry;

  @override
  List<Object?> get props => [createUserBenchmarkEntry];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserBenchmarkEntry$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmarkEntryInput extends JsonSerializable
    with EquatableMixin {
  CreateUserBenchmarkEntryInput(
      {required this.userBenchmark,
      required this.completedOn,
      this.note,
      required this.score,
      this.videoThumbUri,
      this.videoUri});

  factory CreateUserBenchmarkEntryInput.fromJson(Map<String, dynamic> json) =>
      _$CreateUserBenchmarkEntryInputFromJson(json);

  @JsonKey(name: 'UserBenchmark')
  late ConnectRelationInput userBenchmark;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime completedOn;

  String? note;

  late double score;

  String? videoThumbUri;

  String? videoUri;

  @override
  List<Object?> get props =>
      [userBenchmark, completedOn, note, score, videoThumbUri, videoUri];
  @override
  Map<String, dynamic> toJson() => _$CreateUserBenchmarkEntryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmarkEntry$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateUserBenchmarkEntry$Mutation();

  factory UpdateUserBenchmarkEntry$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateUserBenchmarkEntry$MutationFromJson(json);

  late UserBenchmarkEntry updateUserBenchmarkEntry;

  @override
  List<Object?> get props => [updateUserBenchmarkEntry];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateUserBenchmarkEntry$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmarkEntryInput extends JsonSerializable
    with EquatableMixin {
  UpdateUserBenchmarkEntryInput(
      {this.completedOn,
      required this.id,
      this.note,
      this.score,
      this.videoThumbUri,
      this.videoUri});

  factory UpdateUserBenchmarkEntryInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserBenchmarkEntryInputFromJson(json);

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? completedOn;

  late String id;

  String? note;

  double? score;

  String? videoThumbUri;

  String? videoUri;

  @override
  List<Object?> get props =>
      [completedOn, id, note, score, videoThumbUri, videoUri];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserBenchmarkEntryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserBenchmarkEntry$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteUserBenchmarkEntry$Mutation();

  factory DeleteUserBenchmarkEntry$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserBenchmarkEntry$MutationFromJson(json);

  late String deleteUserBenchmarkEntry;

  @override
  List<Object?> get props => [deleteUserBenchmarkEntry];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserBenchmarkEntry$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmark extends JsonSerializable
    with EquatableMixin, UserBenchmarkMixin {
  UserBenchmark();

  factory UserBenchmark.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarkFromJson(json);

  @JsonKey(name: 'UserBenchmarkEntries')
  late List<UserBenchmarkEntry> userBenchmarkEntries;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        lastEntryAt,
        name,
        description,
        equipmentInfo,
        benchmarkType,
        loadUnit,
        userBenchmarkEntries
      ];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarkToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmark$Query extends JsonSerializable with EquatableMixin {
  UserBenchmark$Query();

  factory UserBenchmark$Query.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmark$QueryFromJson(json);

  late UserBenchmark userBenchmark;

  @override
  List<Object?> get props => [userBenchmark];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmark$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmark$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateUserBenchmark$Mutation();

  factory UpdateUserBenchmark$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserBenchmark$MutationFromJson(json);

  late UserBenchmark updateUserBenchmark;

  @override
  List<Object?> get props => [updateUserBenchmark];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserBenchmark$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmarkInput extends JsonSerializable with EquatableMixin {
  UpdateUserBenchmarkInput(
      {required this.benchmarkType,
      this.description,
      this.equipmentInfo,
      required this.id,
      this.loadUnit,
      this.name});

  factory UpdateUserBenchmarkInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserBenchmarkInputFromJson(json);

  @JsonKey(unknownEnumValue: BenchmarkType.artemisUnknown)
  late BenchmarkType benchmarkType;

  String? description;

  String? equipmentInfo;

  late String id;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  LoadUnit? loadUnit;

  String? name;

  @override
  List<Object?> get props =>
      [benchmarkType, description, equipmentInfo, id, loadUnit, name];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserBenchmarkInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmark$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateUserBenchmark$Mutation();

  factory CreateUserBenchmark$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateUserBenchmark$MutationFromJson(json);

  late UserBenchmark createUserBenchmark;

  @override
  List<Object?> get props => [createUserBenchmark];
  @override
  Map<String, dynamic> toJson() => _$CreateUserBenchmark$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmarkInput extends JsonSerializable with EquatableMixin {
  CreateUserBenchmarkInput(
      {required this.benchmarkType,
      this.description,
      this.equipmentInfo,
      this.loadUnit,
      required this.name});

  factory CreateUserBenchmarkInput.fromJson(Map<String, dynamic> json) =>
      _$CreateUserBenchmarkInputFromJson(json);

  @JsonKey(unknownEnumValue: BenchmarkType.artemisUnknown)
  late BenchmarkType benchmarkType;

  String? description;

  String? equipmentInfo;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  LoadUnit? loadUnit;

  late String name;

  @override
  List<Object?> get props =>
      [benchmarkType, description, equipmentInfo, loadUnit, name];
  @override
  Map<String, dynamic> toJson() => _$CreateUserBenchmarkInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserBenchmark$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteUserBenchmark$Mutation();

  factory DeleteUserBenchmark$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteUserBenchmark$MutationFromJson(json);

  late String deleteUserBenchmark;

  @override
  List<Object?> get props => [deleteUserBenchmark];
  @override
  Map<String, dynamic> toJson() => _$DeleteUserBenchmark$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmarks$Query extends JsonSerializable with EquatableMixin {
  UserBenchmarks$Query();

  factory UserBenchmarks$Query.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarks$QueryFromJson(json);

  late List<UserBenchmark> userBenchmarks;

  @override
  List<Object?> get props => [userBenchmarks];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarks$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutPlans$Query extends JsonSerializable
    with EquatableMixin {
  TextSearchWorkoutPlans$Query();

  factory TextSearchWorkoutPlans$Query.fromJson(Map<String, dynamic> json) =>
      _$TextSearchWorkoutPlans$QueryFromJson(json);

  List<WorkoutPlanSummary>? textSearchWorkoutPlans;

  @override
  List<Object?> get props => [textSearchWorkoutPlans];
  @override
  Map<String, dynamic> toJson() => _$TextSearchWorkoutPlans$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TextSearchResult extends JsonSerializable with EquatableMixin {
  TextSearchResult();

  factory TextSearchResult.fromJson(Map<String, dynamic> json) =>
      _$TextSearchResultFromJson(json);

  late String id;

  @JsonKey(name: '__typename')
  String? $$typename;

  late String name;

  @override
  List<Object?> get props => [id, $$typename, name];
  @override
  Map<String, dynamic> toJson() => _$TextSearchResultToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutPlanNames$Query extends JsonSerializable
    with EquatableMixin {
  TextSearchWorkoutPlanNames$Query();

  factory TextSearchWorkoutPlanNames$Query.fromJson(
          Map<String, dynamic> json) =>
      _$TextSearchWorkoutPlanNames$QueryFromJson(json);

  List<TextSearchResult>? textSearchWorkoutPlanNames;

  @override
  List<Object?> get props => [textSearchWorkoutPlanNames];
  @override
  Map<String, dynamic> toJson() =>
      _$TextSearchWorkoutPlanNames$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkouts$Query extends JsonSerializable with EquatableMixin {
  TextSearchWorkouts$Query();

  factory TextSearchWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$TextSearchWorkouts$QueryFromJson(json);

  List<WorkoutSummary>? textSearchWorkouts;

  @override
  List<Object?> get props => [textSearchWorkouts];
  @override
  Map<String, dynamic> toJson() => _$TextSearchWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutNames$Query extends JsonSerializable
    with EquatableMixin {
  TextSearchWorkoutNames$Query();

  factory TextSearchWorkoutNames$Query.fromJson(Map<String, dynamic> json) =>
      _$TextSearchWorkoutNames$QueryFromJson(json);

  List<TextSearchResult>? textSearchWorkoutNames;

  @override
  List<Object?> get props => [textSearchWorkoutNames];
  @override
  Map<String, dynamic> toJson() => _$TextSearchWorkoutNames$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MarkAnnouncementUpdateAsSeen$Mutation extends JsonSerializable
    with EquatableMixin {
  MarkAnnouncementUpdateAsSeen$Mutation();

  factory MarkAnnouncementUpdateAsSeen$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$MarkAnnouncementUpdateAsSeen$MutationFromJson(json);

  late String markAnnouncementUpdateAsSeen;

  @override
  List<Object?> get props => [markAnnouncementUpdateAsSeen];
  @override
  Map<String, dynamic> toJson() =>
      _$MarkAnnouncementUpdateAsSeen$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MarkAnnouncementUpdateAsSeenInput extends JsonSerializable
    with EquatableMixin {
  MarkAnnouncementUpdateAsSeenInput(
      {required this.announcementUpdateId, required this.userId});

  factory MarkAnnouncementUpdateAsSeenInput.fromJson(
          Map<String, dynamic> json) =>
      _$MarkAnnouncementUpdateAsSeenInputFromJson(json);

  late String announcementUpdateId;

  late String userId;

  @override
  List<Object?> get props => [announcementUpdateId, userId];
  @override
  Map<String, dynamic> toJson() =>
      _$MarkAnnouncementUpdateAsSeenInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AnnouncementUpdateAction extends JsonSerializable
    with EquatableMixin, AnnouncementUpdateActionMixin {
  AnnouncementUpdateAction();

  factory AnnouncementUpdateAction.fromJson(Map<String, dynamic> json) =>
      _$AnnouncementUpdateActionFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, createdAt, text, routeTo];
  @override
  Map<String, dynamic> toJson() => _$AnnouncementUpdateActionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AnnouncementUpdate extends JsonSerializable
    with EquatableMixin, AnnouncementUpdateMixin {
  AnnouncementUpdate();

  factory AnnouncementUpdate.fromJson(Map<String, dynamic> json) =>
      _$AnnouncementUpdateFromJson(json);

  late List<AnnouncementUpdateAction> actions;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        imageUri,
        videoUri,
        audioUri,
        articleUrl,
        title,
        subtitle,
        bodyOne,
        bodyTwo,
        actions
      ];
  @override
  Map<String, dynamic> toJson() => _$AnnouncementUpdateToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AnnouncementUpdates$Query extends JsonSerializable with EquatableMixin {
  AnnouncementUpdates$Query();

  factory AnnouncementUpdates$Query.fromJson(Map<String, dynamic> json) =>
      _$AnnouncementUpdates$QueryFromJson(json);

  late List<AnnouncementUpdate> announcementUpdates;

  @override
  List<Object?> get props => [announcementUpdates];
  @override
  Map<String, dynamic> toJson() => _$AnnouncementUpdates$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSection extends JsonSerializable
    with EquatableMixin, WorkoutSectionMixin {
  UpdateWorkoutSection();

  factory UpdateWorkoutSection.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSectionFromJson(json);

  @JsonKey(name: 'WorkoutSectionType')
  late WorkoutSectionType workoutSectionType;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        note,
        rounds,
        timecap,
        sortPosition,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        classVideoUri,
        classVideoThumbUri,
        classAudioUri,
        workoutSectionType
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSectionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSection$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutSection$Mutation();

  factory UpdateWorkoutSection$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSection$MutationFromJson(json);

  late UpdateWorkoutSection updateWorkoutSection;

  @override
  List<Object?> get props => [updateWorkoutSection];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSectionInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutSectionInput(
      {this.workoutSectionType,
      this.classAudioUri,
      this.classVideoThumbUri,
      this.classVideoUri,
      required this.id,
      this.introAudioUri,
      this.introVideoThumbUri,
      this.introVideoUri,
      this.name,
      this.note,
      this.rounds,
      this.timecap});

  factory UpdateWorkoutSectionInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSectionInputFromJson(json);

  @JsonKey(name: 'WorkoutSectionType')
  ConnectRelationInput? workoutSectionType;

  String? classAudioUri;

  String? classVideoThumbUri;

  String? classVideoUri;

  late String id;

  String? introAudioUri;

  String? introVideoThumbUri;

  String? introVideoUri;

  String? name;

  String? note;

  int? rounds;

  int? timecap;

  @override
  List<Object?> get props => [
        workoutSectionType,
        classAudioUri,
        classVideoThumbUri,
        classVideoUri,
        id,
        introAudioUri,
        introVideoThumbUri,
        introVideoUri,
        name,
        note,
        rounds,
        timecap
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSection extends JsonSerializable
    with EquatableMixin, WorkoutSectionMixin {
  WorkoutSection();

  factory WorkoutSection.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSectionFromJson(json);

  @JsonKey(name: 'WorkoutSectionType')
  late WorkoutSectionType workoutSectionType;

  @JsonKey(name: 'WorkoutSets')
  late List<WorkoutSet> workoutSets;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        note,
        rounds,
        timecap,
        sortPosition,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        classVideoUri,
        classVideoThumbUri,
        classAudioUri,
        workoutSectionType,
        workoutSets
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutSectionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSection$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutSection$Mutation();

  factory CreateWorkoutSection$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSection$MutationFromJson(json);

  late WorkoutSection createWorkoutSection;

  @override
  List<Object?> get props => [createWorkoutSection];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSectionInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutSectionInput(
      {required this.workout,
      required this.workoutSectionType,
      this.classAudioUri,
      this.classVideoThumbUri,
      this.classVideoUri,
      this.introAudioUri,
      this.introVideoThumbUri,
      this.introVideoUri,
      this.name,
      this.note,
      this.rounds,
      required this.sortPosition,
      this.timecap});

  factory CreateWorkoutSectionInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSectionInputFromJson(json);

  @JsonKey(name: 'Workout')
  late ConnectRelationInput workout;

  @JsonKey(name: 'WorkoutSectionType')
  late ConnectRelationInput workoutSectionType;

  String? classAudioUri;

  String? classVideoThumbUri;

  String? classVideoUri;

  String? introAudioUri;

  String? introVideoThumbUri;

  String? introVideoUri;

  String? name;

  String? note;

  int? rounds;

  late int sortPosition;

  int? timecap;

  @override
  List<Object?> get props => [
        workout,
        workoutSectionType,
        classAudioUri,
        classVideoThumbUri,
        classVideoUri,
        introAudioUri,
        introVideoThumbUri,
        introVideoUri,
        name,
        note,
        rounds,
        sortPosition,
        timecap
      ];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutSections$Mutation extends JsonSerializable
    with EquatableMixin {
  ReorderWorkoutSections$Mutation();

  factory ReorderWorkoutSections$Mutation.fromJson(Map<String, dynamic> json) =>
      _$ReorderWorkoutSections$MutationFromJson(json);

  late List<SortPositionUpdated> reorderWorkoutSections;

  @override
  List<Object?> get props => [reorderWorkoutSections];
  @override
  Map<String, dynamic> toJson() =>
      _$ReorderWorkoutSections$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutSectionById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutSectionById$Mutation();

  factory DeleteWorkoutSectionById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutSectionById$MutationFromJson(json);

  late String deleteWorkoutSectionById;

  @override
  List<Object?> get props => [deleteWorkoutSectionById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutSectionById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ScheduledWorkout extends JsonSerializable
    with EquatableMixin, ScheduledWorkoutMixin {
  ScheduledWorkout();

  factory ScheduledWorkout.fromJson(Map<String, dynamic> json) =>
      _$ScheduledWorkoutFromJson(json);

  @JsonKey(name: 'Workout')
  WorkoutSummary? workout;

  @JsonKey(name: 'GymProfile')
  GymProfile? gymProfile;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        scheduledAt,
        note,
        workoutPlanName,
        workoutPlanEnrolmentId,
        workoutPlanDayWorkoutId,
        loggedWorkoutId,
        workout,
        gymProfile
      ];
  @override
  Map<String, dynamic> toJson() => _$ScheduledWorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateScheduledWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateScheduledWorkout$Mutation();

  factory UpdateScheduledWorkout$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateScheduledWorkout$MutationFromJson(json);

  late ScheduledWorkout updateScheduledWorkout;

  @override
  List<Object?> get props => [updateScheduledWorkout];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateScheduledWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateScheduledWorkoutInput extends JsonSerializable with EquatableMixin {
  UpdateScheduledWorkoutInput(
      {this.gymProfile,
      this.loggedWorkout,
      required this.id,
      this.note,
      this.scheduledAt});

  factory UpdateScheduledWorkoutInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateScheduledWorkoutInputFromJson(json);

  @JsonKey(name: 'GymProfile')
  ConnectRelationInput? gymProfile;

  @JsonKey(name: 'LoggedWorkout')
  ConnectRelationInput? loggedWorkout;

  late String id;

  String? note;

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? scheduledAt;

  @override
  List<Object?> get props => [gymProfile, loggedWorkout, id, note, scheduledAt];
  @override
  Map<String, dynamic> toJson() => _$UpdateScheduledWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateScheduledWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateScheduledWorkout$Mutation();

  factory CreateScheduledWorkout$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateScheduledWorkout$MutationFromJson(json);

  late ScheduledWorkout createScheduledWorkout;

  @override
  List<Object?> get props => [createScheduledWorkout];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateScheduledWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateScheduledWorkoutInput extends JsonSerializable with EquatableMixin {
  CreateScheduledWorkoutInput(
      {this.gymProfile,
      required this.workout,
      this.workoutPlanDayWorkout,
      this.workoutPlanEnrolment,
      this.note,
      required this.scheduledAt});

  factory CreateScheduledWorkoutInput.fromJson(Map<String, dynamic> json) =>
      _$CreateScheduledWorkoutInputFromJson(json);

  @JsonKey(name: 'GymProfile')
  ConnectRelationInput? gymProfile;

  @JsonKey(name: 'Workout')
  late ConnectRelationInput workout;

  @JsonKey(name: 'WorkoutPlanDayWorkout')
  ConnectRelationInput? workoutPlanDayWorkout;

  @JsonKey(name: 'WorkoutPlanEnrolment')
  ConnectRelationInput? workoutPlanEnrolment;

  String? note;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime scheduledAt;

  @override
  List<Object?> get props => [
        gymProfile,
        workout,
        workoutPlanDayWorkout,
        workoutPlanEnrolment,
        note,
        scheduledAt
      ];
  @override
  Map<String, dynamic> toJson() => _$CreateScheduledWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserScheduledWorkouts$Query extends JsonSerializable with EquatableMixin {
  UserScheduledWorkouts$Query();

  factory UserScheduledWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$UserScheduledWorkouts$QueryFromJson(json);

  late List<ScheduledWorkout> userScheduledWorkouts;

  @override
  List<Object?> get props => [userScheduledWorkouts];
  @override
  Map<String, dynamic> toJson() => _$UserScheduledWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteScheduledWorkoutById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteScheduledWorkoutById$Mutation();

  factory DeleteScheduledWorkoutById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteScheduledWorkoutById$MutationFromJson(json);

  late String deleteScheduledWorkoutById;

  @override
  List<Object?> get props => [deleteScheduledWorkoutById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteScheduledWorkoutById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class StreamActivityReactionCounts extends JsonSerializable
    with EquatableMixin, StreamActivityReactionCountsMixin {
  StreamActivityReactionCounts();

  factory StreamActivityReactionCounts.fromJson(Map<String, dynamic> json) =>
      _$StreamActivityReactionCountsFromJson(json);

  @override
  List<Object?> get props => [likes, comments];
  @override
  Map<String, dynamic> toJson() => _$StreamActivityReactionCountsToJson(this);
}

@JsonSerializable(explicitToJson: true)
class StreamFeedUserData extends JsonSerializable with EquatableMixin {
  StreamFeedUserData();

  factory StreamFeedUserData.fromJson(Map<String, dynamic> json) =>
      _$StreamFeedUserDataFromJson(json);

  String? name;

  String? image;

  @override
  List<Object?> get props => [name, image];
  @override
  Map<String, dynamic> toJson() => _$StreamFeedUserDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class StreamFeedUser extends JsonSerializable with EquatableMixin {
  StreamFeedUser();

  factory StreamFeedUser.fromJson(Map<String, dynamic> json) =>
      _$StreamFeedUserFromJson(json);

  late String id;

  late StreamFeedUserData data;

  @override
  List<Object?> get props => [id, data];
  @override
  Map<String, dynamic> toJson() => _$StreamFeedUserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class StreamFeedClubData extends JsonSerializable with EquatableMixin {
  StreamFeedClubData();

  factory StreamFeedClubData.fromJson(Map<String, dynamic> json) =>
      _$StreamFeedClubDataFromJson(json);

  String? name;

  String? image;

  @override
  List<Object?> get props => [name, image];
  @override
  Map<String, dynamic> toJson() => _$StreamFeedClubDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class StreamFeedClub extends JsonSerializable with EquatableMixin {
  StreamFeedClub();

  factory StreamFeedClub.fromJson(Map<String, dynamic> json) =>
      _$StreamFeedClubFromJson(json);

  late String id;

  late StreamFeedClubData data;

  @override
  List<Object?> get props => [id, data];
  @override
  Map<String, dynamic> toJson() => _$StreamFeedClubToJson(this);
}

@JsonSerializable(explicitToJson: true)
class StreamActivityExtraData extends JsonSerializable
    with EquatableMixin, StreamActivityExtraDataMixin {
  StreamActivityExtraData();

  factory StreamActivityExtraData.fromJson(Map<String, dynamic> json) =>
      _$StreamActivityExtraDataFromJson(json);

  StreamFeedUser? creator;

  StreamFeedClub? club;

  @override
  List<Object?> get props => [
        title,
        caption,
        tags,
        articleUrl,
        audioUrl,
        imageUrl,
        videoUrl,
        originalPostId,
        creator,
        club
      ];
  @override
  Map<String, dynamic> toJson() => _$StreamActivityExtraDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class StreamEnrichedActivity extends JsonSerializable
    with EquatableMixin, StreamEnrichedActivityMixin {
  StreamEnrichedActivity();

  factory StreamEnrichedActivity.fromJson(Map<String, dynamic> json) =>
      _$StreamEnrichedActivityFromJson(json);

  StreamActivityReactionCounts? reactionCounts;

  late StreamFeedUser actor;

  late StreamActivityExtraData extraData;

  @override
  List<Object?> get props => [
        id,
        verb,
        object,
        time,
        userLikeReactionId,
        reactionCounts,
        actor,
        extraData
      ];
  @override
  Map<String, dynamic> toJson() => _$StreamEnrichedActivityToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateClubMembersFeedPost$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateClubMembersFeedPost$Mutation();

  factory CreateClubMembersFeedPost$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateClubMembersFeedPost$MutationFromJson(json);

  late StreamEnrichedActivity createClubMembersFeedPost;

  @override
  List<Object?> get props => [createClubMembersFeedPost];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateClubMembersFeedPost$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateStreamFeedActivityInput extends JsonSerializable
    with EquatableMixin {
  CreateStreamFeedActivityInput(
      {required this.actor,
      required this.extraData,
      required this.object,
      required this.verb});

  factory CreateStreamFeedActivityInput.fromJson(Map<String, dynamic> json) =>
      _$CreateStreamFeedActivityInputFromJson(json);

  late String actor;

  late CreateStreamFeedActivityExtraDataInput extraData;

  late String object;

  late String verb;

  @override
  List<Object?> get props => [actor, extraData, object, verb];
  @override
  Map<String, dynamic> toJson() => _$CreateStreamFeedActivityInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateStreamFeedActivityExtraDataInput extends JsonSerializable
    with EquatableMixin {
  CreateStreamFeedActivityExtraDataInput(
      {this.articleUrl,
      this.audioUrl,
      this.caption,
      this.creator,
      this.imageUrl,
      this.originalPostId,
      required this.tags,
      this.title,
      this.videoUrl});

  factory CreateStreamFeedActivityExtraDataInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateStreamFeedActivityExtraDataInputFromJson(json);

  String? articleUrl;

  String? audioUrl;

  String? caption;

  String? creator;

  String? imageUrl;

  String? originalPostId;

  late List<String> tags;

  String? title;

  String? videoUrl;

  @override
  List<Object?> get props => [
        articleUrl,
        audioUrl,
        caption,
        creator,
        imageUrl,
        originalPostId,
        tags,
        title,
        videoUrl
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateStreamFeedActivityExtraDataInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubMembersFeedPosts$Query extends JsonSerializable with EquatableMixin {
  ClubMembersFeedPosts$Query();

  factory ClubMembersFeedPosts$Query.fromJson(Map<String, dynamic> json) =>
      _$ClubMembersFeedPosts$QueryFromJson(json);

  late List<StreamEnrichedActivity> clubMembersFeedPosts;

  @override
  List<Object?> get props => [clubMembersFeedPosts];
  @override
  Map<String, dynamic> toJson() => _$ClubMembersFeedPosts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteClubMembersFeedPost$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteClubMembersFeedPost$Mutation();

  factory DeleteClubMembersFeedPost$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteClubMembersFeedPost$MutationFromJson(json);

  late String deleteClubMembersFeedPost;

  @override
  List<Object?> get props => [deleteClubMembersFeedPost];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteClubMembersFeedPost$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PublicWorkouts$Query extends JsonSerializable with EquatableMixin {
  PublicWorkouts$Query();

  factory PublicWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$PublicWorkouts$QueryFromJson(json);

  late List<WorkoutSummary> publicWorkouts;

  @override
  List<Object?> get props => [publicWorkouts];
  @override
  Map<String, dynamic> toJson() => _$PublicWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutFiltersInput extends JsonSerializable with EquatableMixin {
  WorkoutFiltersInput(
      {required this.availableEquipments,
      this.bodyweightOnly,
      this.difficultyLevel,
      required this.excludedMoves,
      this.hasClassAudio,
      this.hasClassVideo,
      this.maxLength,
      this.minLength,
      required this.requiredMoves,
      required this.targetedBodyAreas,
      required this.workoutGoals,
      required this.workoutSectionTypes});

  factory WorkoutFiltersInput.fromJson(Map<String, dynamic> json) =>
      _$WorkoutFiltersInputFromJson(json);

  late List<String> availableEquipments;

  bool? bodyweightOnly;

  @JsonKey(unknownEnumValue: DifficultyLevel.artemisUnknown)
  DifficultyLevel? difficultyLevel;

  late List<String> excludedMoves;

  bool? hasClassAudio;

  bool? hasClassVideo;

  int? maxLength;

  int? minLength;

  late List<String> requiredMoves;

  late List<String> targetedBodyAreas;

  late List<String> workoutGoals;

  late List<String> workoutSectionTypes;

  @override
  List<Object?> get props => [
        availableEquipments,
        bodyweightOnly,
        difficultyLevel,
        excludedMoves,
        hasClassAudio,
        hasClassVideo,
        maxLength,
        minLength,
        requiredMoves,
        targetedBodyAreas,
        workoutGoals,
        workoutSectionTypes
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutFiltersInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkout extends JsonSerializable with EquatableMixin, WorkoutMixin {
  UpdateWorkout();

  factory UpdateWorkout.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutFromJson(json);

  @JsonKey(name: 'WorkoutGoals')
  late List<WorkoutGoal> workoutGoals;

  @JsonKey(name: 'WorkoutTags')
  late List<WorkoutTag> workoutTags;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        updatedAt,
        archived,
        name,
        description,
        lengthMinutes,
        difficultyLevel,
        coverImageUri,
        contentAccessScope,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        workoutGoals,
        workoutTags
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkout$Mutation extends JsonSerializable with EquatableMixin {
  UpdateWorkout$Mutation();

  factory UpdateWorkout$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkout$MutationFromJson(json);

  late UpdateWorkout updateWorkout;

  @override
  List<Object?> get props => [updateWorkout];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutInput(
      {this.workoutGoals,
      this.workoutTags,
      this.contentAccessScope,
      this.coverImageUri,
      this.description,
      required this.id,
      this.introAudioUri,
      this.introVideoThumbUri,
      this.introVideoUri,
      this.lengthMinutes,
      this.name});

  factory UpdateWorkoutInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutInputFromJson(json);

  @JsonKey(name: 'WorkoutGoals')
  List<ConnectRelationInput>? workoutGoals;

  @JsonKey(name: 'WorkoutTags')
  List<ConnectRelationInput>? workoutTags;

  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  ContentAccessScope? contentAccessScope;

  String? coverImageUri;

  String? description;

  late String id;

  String? introAudioUri;

  String? introVideoThumbUri;

  String? introVideoUri;

  int? lengthMinutes;

  String? name;

  @override
  List<Object?> get props => [
        workoutGoals,
        workoutTags,
        contentAccessScope,
        coverImageUri,
        description,
        id,
        introAudioUri,
        introVideoThumbUri,
        introVideoUri,
        lengthMinutes,
        name
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserWorkouts$Query extends JsonSerializable with EquatableMixin {
  UserWorkouts$Query();

  factory UserWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$UserWorkouts$QueryFromJson(json);

  late List<WorkoutSummary> userWorkouts;

  @override
  List<Object?> get props => [userWorkouts];
  @override
  Map<String, dynamic> toJson() => _$UserWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DuplicateWorkoutById$Mutation extends JsonSerializable
    with EquatableMixin {
  DuplicateWorkoutById$Mutation();

  factory DuplicateWorkoutById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DuplicateWorkoutById$MutationFromJson(json);

  late Workout duplicateWorkoutById;

  @override
  List<Object?> get props => [duplicateWorkoutById];
  @override
  Map<String, dynamic> toJson() => _$DuplicateWorkoutById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserPublicWorkouts$Query extends JsonSerializable with EquatableMixin {
  UserPublicWorkouts$Query();

  factory UserPublicWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$UserPublicWorkouts$QueryFromJson(json);

  late List<WorkoutSummary> userPublicWorkouts;

  @override
  List<Object?> get props => [userPublicWorkouts];
  @override
  Map<String, dynamic> toJson() => _$UserPublicWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkout$Mutation extends JsonSerializable with EquatableMixin {
  CreateWorkout$Mutation();

  factory CreateWorkout$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkout$MutationFromJson(json);

  late Workout createWorkout;

  @override
  List<Object?> get props => [createWorkout];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutInput({required this.contentAccessScope, required this.name});

  factory CreateWorkoutInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutInputFromJson(json);

  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;

  late String name;

  @override
  List<Object?> get props => [contentAccessScope, name];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutById$Query extends JsonSerializable with EquatableMixin {
  WorkoutById$Query();

  factory WorkoutById$Query.fromJson(Map<String, dynamic> json) =>
      _$WorkoutById$QueryFromJson(json);

  Workout? workoutById;

  @override
  List<Object?> get props => [workoutById];
  @override
  Map<String, dynamic> toJson() => _$WorkoutById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubMemberNote extends JsonSerializable
    with EquatableMixin, ClubMemberNoteMixin {
  ClubMemberNote();

  factory ClubMemberNote.fromJson(Map<String, dynamic> json) =>
      _$ClubMemberNoteFromJson(json);

  @JsonKey(name: 'User')
  UserAvatarData? user;

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, updatedAt, note, tags, user];
  @override
  Map<String, dynamic> toJson() => _$ClubMemberNoteToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubMemberNote$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateClubMemberNote$Mutation();

  factory UpdateClubMemberNote$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubMemberNote$MutationFromJson(json);

  late ClubMemberNote updateClubMemberNote;

  @override
  List<Object?> get props => [updateClubMemberNote];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubMemberNote$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubMemberNoteInput extends JsonSerializable with EquatableMixin {
  UpdateClubMemberNoteInput({required this.id, this.note, this.tags});

  factory UpdateClubMemberNoteInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubMemberNoteInputFromJson(json);

  late String id;

  String? note;

  List<String>? tags;

  @override
  List<Object?> get props => [id, note, tags];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubMemberNoteInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateClubMemberNote$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateClubMemberNote$Mutation();

  factory CreateClubMemberNote$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateClubMemberNote$MutationFromJson(json);

  late ClubMemberNote createClubMemberNote;

  @override
  List<Object?> get props => [createClubMemberNote];
  @override
  Map<String, dynamic> toJson() => _$CreateClubMemberNote$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateClubMemberNoteInput extends JsonSerializable with EquatableMixin {
  CreateClubMemberNoteInput(
      {required this.clubId,
      required this.memberId,
      required this.note,
      required this.tags});

  factory CreateClubMemberNoteInput.fromJson(Map<String, dynamic> json) =>
      _$CreateClubMemberNoteInputFromJson(json);

  late String clubId;

  late String memberId;

  late String note;

  late List<String> tags;

  @override
  List<Object?> get props => [clubId, memberId, note, tags];
  @override
  Map<String, dynamic> toJson() => _$CreateClubMemberNoteInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubMemberNotes$Query extends JsonSerializable with EquatableMixin {
  ClubMemberNotes$Query();

  factory ClubMemberNotes$Query.fromJson(Map<String, dynamic> json) =>
      _$ClubMemberNotes$QueryFromJson(json);

  late List<ClubMemberNote> clubMemberNotes;

  @override
  List<Object?> get props => [clubMemberNotes];
  @override
  Map<String, dynamic> toJson() => _$ClubMemberNotes$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMaxUnbrokenExerciseTracker extends JsonSerializable
    with EquatableMixin, UserMaxUnbrokenExerciseTrackerMixin {
  UserMaxUnbrokenExerciseTracker();

  factory UserMaxUnbrokenExerciseTracker.fromJson(Map<String, dynamic> json) =>
      _$UserMaxUnbrokenExerciseTrackerFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        repType,
        distanceUnit,
        loadAmount,
        loadUnit,
        move,
        equipment,
        exerciseTrackerManualEntries
      ];
  @override
  Map<String, dynamic> toJson() => _$UserMaxUnbrokenExerciseTrackerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMaxUnbrokenExerciseTrackers$Query extends JsonSerializable
    with EquatableMixin {
  UserMaxUnbrokenExerciseTrackers$Query();

  factory UserMaxUnbrokenExerciseTrackers$Query.fromJson(
          Map<String, dynamic> json) =>
      _$UserMaxUnbrokenExerciseTrackers$QueryFromJson(json);

  late List<UserMaxUnbrokenExerciseTracker> userMaxUnbrokenExerciseTrackers;

  @override
  List<Object?> get props => [userMaxUnbrokenExerciseTrackers];
  @override
  Map<String, dynamic> toJson() =>
      _$UserMaxUnbrokenExerciseTrackers$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMaxUnbrokenExerciseTrackerMixin$Move extends JsonSerializable
    with EquatableMixin, MoveMixin {
  UserMaxUnbrokenExerciseTrackerMixin$Move();

  factory UserMaxUnbrokenExerciseTrackerMixin$Move.fromJson(
          Map<String, dynamic> json) =>
      _$UserMaxUnbrokenExerciseTrackerMixin$MoveFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        searchTerms,
        description,
        demoVideoUri,
        demoVideoThumbUri,
        scope,
        validRepTypes
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$UserMaxUnbrokenExerciseTrackerMixin$MoveToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMaxUnbrokenExerciseTrackerMixin$Equipment extends JsonSerializable
    with EquatableMixin, EquipmentMixin {
  UserMaxUnbrokenExerciseTrackerMixin$Equipment();

  factory UserMaxUnbrokenExerciseTrackerMixin$Equipment.fromJson(
          Map<String, dynamic> json) =>
      _$UserMaxUnbrokenExerciseTrackerMixin$EquipmentFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, loadAdjustable];
  @override
  Map<String, dynamic> toJson() =>
      _$UserMaxUnbrokenExerciseTrackerMixin$EquipmentToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMaxUnbrokenExerciseTrackerMixin$ExerciseTrackerManualEntry
    extends JsonSerializable
    with EquatableMixin, ExerciseTrackerManualEntryMixin {
  UserMaxUnbrokenExerciseTrackerMixin$ExerciseTrackerManualEntry();

  factory UserMaxUnbrokenExerciseTrackerMixin$ExerciseTrackerManualEntry.fromJson(
          Map<String, dynamic> json) =>
      _$UserMaxUnbrokenExerciseTrackerMixin$ExerciseTrackerManualEntryFromJson(
          json);

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, completedOn, score, videoUri, videoThumbUri];
  @override
  Map<String, dynamic> toJson() =>
      _$UserMaxUnbrokenExerciseTrackerMixin$ExerciseTrackerManualEntryToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class UserMaxLoadExerciseTracker extends JsonSerializable
    with EquatableMixin, UserMaxLoadExerciseTrackerMixin {
  UserMaxLoadExerciseTracker();

  factory UserMaxLoadExerciseTracker.fromJson(Map<String, dynamic> json) =>
      _$UserMaxLoadExerciseTrackerFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        reps,
        loadUnit,
        move,
        equipment,
        exerciseTrackerManualEntries
      ];
  @override
  Map<String, dynamic> toJson() => _$UserMaxLoadExerciseTrackerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMaxLoadExerciseTrackers$Query extends JsonSerializable
    with EquatableMixin {
  UserMaxLoadExerciseTrackers$Query();

  factory UserMaxLoadExerciseTrackers$Query.fromJson(
          Map<String, dynamic> json) =>
      _$UserMaxLoadExerciseTrackers$QueryFromJson(json);

  late List<UserMaxLoadExerciseTracker> userMaxLoadExerciseTrackers;

  @override
  List<Object?> get props => [userMaxLoadExerciseTrackers];
  @override
  Map<String, dynamic> toJson() =>
      _$UserMaxLoadExerciseTrackers$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMaxLoadExerciseTrackerMixin$Move extends JsonSerializable
    with EquatableMixin, MoveMixin {
  UserMaxLoadExerciseTrackerMixin$Move();

  factory UserMaxLoadExerciseTrackerMixin$Move.fromJson(
          Map<String, dynamic> json) =>
      _$UserMaxLoadExerciseTrackerMixin$MoveFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        searchTerms,
        description,
        demoVideoUri,
        demoVideoThumbUri,
        scope,
        validRepTypes
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$UserMaxLoadExerciseTrackerMixin$MoveToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMaxLoadExerciseTrackerMixin$Equipment extends JsonSerializable
    with EquatableMixin, EquipmentMixin {
  UserMaxLoadExerciseTrackerMixin$Equipment();

  factory UserMaxLoadExerciseTrackerMixin$Equipment.fromJson(
          Map<String, dynamic> json) =>
      _$UserMaxLoadExerciseTrackerMixin$EquipmentFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, loadAdjustable];
  @override
  Map<String, dynamic> toJson() =>
      _$UserMaxLoadExerciseTrackerMixin$EquipmentToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserMaxLoadExerciseTrackerMixin$ExerciseTrackerManualEntry
    extends JsonSerializable
    with EquatableMixin, ExerciseTrackerManualEntryMixin {
  UserMaxLoadExerciseTrackerMixin$ExerciseTrackerManualEntry();

  factory UserMaxLoadExerciseTrackerMixin$ExerciseTrackerManualEntry.fromJson(
          Map<String, dynamic> json) =>
      _$UserMaxLoadExerciseTrackerMixin$ExerciseTrackerManualEntryFromJson(
          json);

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, completedOn, score, videoUri, videoThumbUri];
  @override
  Map<String, dynamic> toJson() =>
      _$UserMaxLoadExerciseTrackerMixin$ExerciseTrackerManualEntryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserFastestTimeExerciseTracker extends JsonSerializable
    with EquatableMixin, UserFastestTimeExerciseTrackerMixin {
  UserFastestTimeExerciseTracker();

  factory UserFastestTimeExerciseTracker.fromJson(Map<String, dynamic> json) =>
      _$UserFastestTimeExerciseTrackerFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        repType,
        reps,
        distanceUnit,
        loadAmount,
        loadUnit,
        move,
        equipment,
        exerciseTrackerManualEntries
      ];
  @override
  Map<String, dynamic> toJson() => _$UserFastestTimeExerciseTrackerToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserFastestTimeExerciseTrackers$Query extends JsonSerializable
    with EquatableMixin {
  UserFastestTimeExerciseTrackers$Query();

  factory UserFastestTimeExerciseTrackers$Query.fromJson(
          Map<String, dynamic> json) =>
      _$UserFastestTimeExerciseTrackers$QueryFromJson(json);

  late List<UserFastestTimeExerciseTracker> userFastestTimeExerciseTrackers;

  @override
  List<Object?> get props => [userFastestTimeExerciseTrackers];
  @override
  Map<String, dynamic> toJson() =>
      _$UserFastestTimeExerciseTrackers$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserFastestTimeExerciseTrackerMixin$Move extends JsonSerializable
    with EquatableMixin, MoveMixin {
  UserFastestTimeExerciseTrackerMixin$Move();

  factory UserFastestTimeExerciseTrackerMixin$Move.fromJson(
          Map<String, dynamic> json) =>
      _$UserFastestTimeExerciseTrackerMixin$MoveFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        searchTerms,
        description,
        demoVideoUri,
        demoVideoThumbUri,
        scope,
        validRepTypes
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$UserFastestTimeExerciseTrackerMixin$MoveToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserFastestTimeExerciseTrackerMixin$Equipment extends JsonSerializable
    with EquatableMixin, EquipmentMixin {
  UserFastestTimeExerciseTrackerMixin$Equipment();

  factory UserFastestTimeExerciseTrackerMixin$Equipment.fromJson(
          Map<String, dynamic> json) =>
      _$UserFastestTimeExerciseTrackerMixin$EquipmentFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, loadAdjustable];
  @override
  Map<String, dynamic> toJson() =>
      _$UserFastestTimeExerciseTrackerMixin$EquipmentToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserFastestTimeExerciseTrackerMixin$ExerciseTrackerManualEntry
    extends JsonSerializable
    with EquatableMixin, ExerciseTrackerManualEntryMixin {
  UserFastestTimeExerciseTrackerMixin$ExerciseTrackerManualEntry();

  factory UserFastestTimeExerciseTrackerMixin$ExerciseTrackerManualEntry.fromJson(
          Map<String, dynamic> json) =>
      _$UserFastestTimeExerciseTrackerMixin$ExerciseTrackerManualEntryFromJson(
          json);

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, completedOn, score, videoUri, videoThumbUri];
  @override
  Map<String, dynamic> toJson() =>
      _$UserFastestTimeExerciseTrackerMixin$ExerciseTrackerManualEntryToJson(
          this);
}

@JsonSerializable(explicitToJson: true)
class RemoveDocumentFromSkill$Mutation extends JsonSerializable
    with EquatableMixin {
  RemoveDocumentFromSkill$Mutation();

  factory RemoveDocumentFromSkill$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveDocumentFromSkill$MutationFromJson(json);

  late Skill removeDocumentFromSkill;

  @override
  List<Object?> get props => [removeDocumentFromSkill];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveDocumentFromSkill$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveDocumentFromSkillInput extends JsonSerializable
    with EquatableMixin {
  RemoveDocumentFromSkillInput({required this.id});

  factory RemoveDocumentFromSkillInput.fromJson(Map<String, dynamic> json) =>
      _$RemoveDocumentFromSkillInputFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$RemoveDocumentFromSkillInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteSkillById$Mutation extends JsonSerializable with EquatableMixin {
  DeleteSkillById$Mutation();

  factory DeleteSkillById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteSkillById$MutationFromJson(json);

  late String deleteSkillById;

  @override
  List<Object?> get props => [deleteSkillById];
  @override
  Map<String, dynamic> toJson() => _$DeleteSkillById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddDocumentToSkill$Mutation extends JsonSerializable with EquatableMixin {
  AddDocumentToSkill$Mutation();

  factory AddDocumentToSkill$Mutation.fromJson(Map<String, dynamic> json) =>
      _$AddDocumentToSkill$MutationFromJson(json);

  late Skill addDocumentToSkill;

  @override
  List<Object?> get props => [addDocumentToSkill];
  @override
  Map<String, dynamic> toJson() => _$AddDocumentToSkill$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddDocumentToSkillInput extends JsonSerializable with EquatableMixin {
  AddDocumentToSkillInput({required this.id, required this.uri});

  factory AddDocumentToSkillInput.fromJson(Map<String, dynamic> json) =>
      _$AddDocumentToSkillInputFromJson(json);

  late String id;

  late String uri;

  @override
  List<Object?> get props => [id, uri];
  @override
  Map<String, dynamic> toJson() => _$AddDocumentToSkillInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateSkill$Mutation extends JsonSerializable with EquatableMixin {
  CreateSkill$Mutation();

  factory CreateSkill$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateSkill$MutationFromJson(json);

  late Skill createSkill;

  @override
  List<Object?> get props => [createSkill];
  @override
  Map<String, dynamic> toJson() => _$CreateSkill$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateSkillInput extends JsonSerializable with EquatableMixin {
  CreateSkillInput({this.experience, required this.name});

  factory CreateSkillInput.fromJson(Map<String, dynamic> json) =>
      _$CreateSkillInputFromJson(json);

  String? experience;

  late String name;

  @override
  List<Object?> get props => [experience, name];
  @override
  Map<String, dynamic> toJson() => _$CreateSkillInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateSkill$Mutation extends JsonSerializable with EquatableMixin {
  UpdateSkill$Mutation();

  factory UpdateSkill$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateSkill$MutationFromJson(json);

  late Skill updateSkill;

  @override
  List<Object?> get props => [updateSkill];
  @override
  Map<String, dynamic> toJson() => _$UpdateSkill$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateSkillInput extends JsonSerializable with EquatableMixin {
  UpdateSkillInput(
      {this.awardingBody,
      this.certificateRef,
      this.certification,
      this.documentUri,
      this.experience,
      required this.id,
      this.name});

  factory UpdateSkillInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateSkillInputFromJson(json);

  String? awardingBody;

  String? certificateRef;

  String? certification;

  String? documentUri;

  String? experience;

  late String id;

  String? name;

  @override
  List<Object?> get props => [
        awardingBody,
        certificateRef,
        certification,
        documentUri,
        experience,
        id,
        name
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateSkillInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubMemberSummary extends JsonSerializable
    with EquatableMixin, ClubMemberSummaryMixin {
  ClubMemberSummary();

  factory ClubMemberSummary.fromJson(Map<String, dynamic> json) =>
      _$ClubMemberSummaryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        displayName,
        avatarUri,
        townCity,
        countryCode,
        tagline,
        skills
      ];
  @override
  Map<String, dynamic> toJson() => _$ClubMemberSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubMembers extends JsonSerializable with EquatableMixin {
  ClubMembers();

  factory ClubMembers.fromJson(Map<String, dynamic> json) =>
      _$ClubMembersFromJson(json);

  @JsonKey(name: '__typename')
  String? $$typename;

  late String id;

  @JsonKey(name: 'Owner')
  late ClubMemberSummary owner;

  @JsonKey(name: 'Admins')
  late List<ClubMemberSummary> admins;

  @JsonKey(name: 'Members')
  late List<ClubMemberSummary> members;

  @override
  List<Object?> get props => [$$typename, id, owner, admins, members];
  @override
  Map<String, dynamic> toJson() => _$ClubMembersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveMemberAdminStatus$Mutation extends JsonSerializable
    with EquatableMixin {
  RemoveMemberAdminStatus$Mutation();

  factory RemoveMemberAdminStatus$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveMemberAdminStatus$MutationFromJson(json);

  late ClubMembers removeMemberAdminStatus;

  @override
  List<Object?> get props => [removeMemberAdminStatus];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveMemberAdminStatus$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddUserToClubViaInviteToken$Mutation extends JsonSerializable
    with EquatableMixin {
  AddUserToClubViaInviteToken$Mutation();

  factory AddUserToClubViaInviteToken$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$AddUserToClubViaInviteToken$MutationFromJson(json);

  late String addUserToClubViaInviteToken;

  @override
  List<Object?> get props => [addUserToClubViaInviteToken];
  @override
  Map<String, dynamic> toJson() =>
      _$AddUserToClubViaInviteToken$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserJoinPublicClub$Mutation extends JsonSerializable with EquatableMixin {
  UserJoinPublicClub$Mutation();

  factory UserJoinPublicClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UserJoinPublicClub$MutationFromJson(json);

  late String userJoinPublicClub;

  @override
  List<Object?> get props => [userJoinPublicClub];
  @override
  Map<String, dynamic> toJson() => _$UserJoinPublicClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubInviteTokenData extends CheckClubInviteTokenResult
    with EquatableMixin, ClubInviteTokenDataMixin {
  ClubInviteTokenData();

  factory ClubInviteTokenData.fromJson(Map<String, dynamic> json) =>
      _$ClubInviteTokenDataFromJson(json);

  @JsonKey(name: 'Club')
  late ClubSummary club;

  String? introVideoUri;

  String? introVideoThumbUri;

  String? introAudioUri;

  @override
  List<Object?> get props => [
        $$typename,
        token,
        club,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri
      ];
  @override
  Map<String, dynamic> toJson() => _$ClubInviteTokenDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class InviteTokenError extends CheckClubInviteTokenResult
    with EquatableMixin, InviteTokenErrorMixin {
  InviteTokenError();

  factory InviteTokenError.fromJson(Map<String, dynamic> json) =>
      _$InviteTokenErrorFromJson(json);

  @override
  List<Object?> get props => [$$typename, message];
  @override
  Map<String, dynamic> toJson() => _$InviteTokenErrorToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CheckClubInviteTokenResult extends JsonSerializable with EquatableMixin {
  CheckClubInviteTokenResult();

  factory CheckClubInviteTokenResult.fromJson(Map<String, dynamic> json) {
    switch (json['__typename'].toString()) {
      case r'ClubInviteTokenData':
        return ClubInviteTokenData.fromJson(json);
      case r'InviteTokenError':
        return InviteTokenError.fromJson(json);
      default:
    }
    return _$CheckClubInviteTokenResultFromJson(json);
  }

  @JsonKey(name: '__typename')
  String? $$typename;

  @override
  List<Object?> get props => [$$typename];
  @override
  Map<String, dynamic> toJson() {
    switch ($$typename) {
      case r'ClubInviteTokenData':
        return (this as ClubInviteTokenData).toJson();
      case r'InviteTokenError':
        return (this as InviteTokenError).toJson();
      default:
    }
    return _$CheckClubInviteTokenResultToJson(this);
  }
}

@JsonSerializable(explicitToJson: true)
class CheckClubInviteToken$Query extends JsonSerializable with EquatableMixin {
  CheckClubInviteToken$Query();

  factory CheckClubInviteToken$Query.fromJson(Map<String, dynamic> json) =>
      _$CheckClubInviteToken$QueryFromJson(json);

  late CheckClubInviteTokenResult checkClubInviteToken;

  @override
  List<Object?> get props => [checkClubInviteToken];
  @override
  Map<String, dynamic> toJson() => _$CheckClubInviteToken$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubInviteToken extends JsonSerializable
    with EquatableMixin, ClubInviteTokenMixin {
  ClubInviteToken();

  factory ClubInviteToken.fromJson(Map<String, dynamic> json) =>
      _$ClubInviteTokenFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, name, active, inviteLimit, joinedUserIds];
  @override
  Map<String, dynamic> toJson() => _$ClubInviteTokenToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubInviteTokens extends JsonSerializable with EquatableMixin {
  ClubInviteTokens();

  factory ClubInviteTokens.fromJson(Map<String, dynamic> json) =>
      _$ClubInviteTokensFromJson(json);

  @JsonKey(name: '__typename')
  String? $$typename;

  late String id;

  late List<ClubInviteToken> tokens;

  @override
  List<Object?> get props => [$$typename, id, tokens];
  @override
  Map<String, dynamic> toJson() => _$ClubInviteTokensToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubInviteTokens$Query extends JsonSerializable with EquatableMixin {
  ClubInviteTokens$Query();

  factory ClubInviteTokens$Query.fromJson(Map<String, dynamic> json) =>
      _$ClubInviteTokens$QueryFromJson(json);

  late ClubInviteTokens clubInviteTokens;

  @override
  List<Object?> get props => [clubInviteTokens];
  @override
  Map<String, dynamic> toJson() => _$ClubInviteTokens$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveUserFromClub$Mutation extends JsonSerializable with EquatableMixin {
  RemoveUserFromClub$Mutation();

  factory RemoveUserFromClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$RemoveUserFromClub$MutationFromJson(json);

  late ClubMembers removeUserFromClub;

  @override
  List<Object?> get props => [removeUserFromClub];
  @override
  Map<String, dynamic> toJson() => _$RemoveUserFromClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CheckUserClubMemberStatus$Query extends JsonSerializable
    with EquatableMixin {
  CheckUserClubMemberStatus$Query();

  factory CheckUserClubMemberStatus$Query.fromJson(Map<String, dynamic> json) =>
      _$CheckUserClubMemberStatus$QueryFromJson(json);

  @JsonKey(unknownEnumValue: UserClubMemberStatus.artemisUnknown)
  late UserClubMemberStatus checkUserClubMemberStatus;

  @override
  List<Object?> get props => [checkUserClubMemberStatus];
  @override
  Map<String, dynamic> toJson() =>
      _$CheckUserClubMemberStatus$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubMembers$Query extends JsonSerializable with EquatableMixin {
  ClubMembers$Query();

  factory ClubMembers$Query.fromJson(Map<String, dynamic> json) =>
      _$ClubMembers$QueryFromJson(json);

  late ClubMembers clubMembers;

  @override
  List<Object?> get props => [clubMembers];
  @override
  Map<String, dynamic> toJson() => _$ClubMembers$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubInviteToken$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateClubInviteToken$Mutation();

  factory UpdateClubInviteToken$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubInviteToken$MutationFromJson(json);

  late ClubInviteTokens updateClubInviteToken;

  @override
  List<Object?> get props => [updateClubInviteToken];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubInviteToken$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubInviteTokenInput extends JsonSerializable with EquatableMixin {
  UpdateClubInviteTokenInput(
      {this.active,
      required this.clubId,
      required this.id,
      this.inviteLimit,
      this.name});

  factory UpdateClubInviteTokenInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubInviteTokenInputFromJson(json);

  bool? active;

  late String clubId;

  late String id;

  int? inviteLimit;

  String? name;

  @override
  List<Object?> get props => [active, clubId, id, inviteLimit, name];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubInviteTokenInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteClubInviteToken$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteClubInviteToken$Mutation();

  factory DeleteClubInviteToken$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteClubInviteToken$MutationFromJson(json);

  late ClubInviteTokens deleteClubInviteToken;

  @override
  List<Object?> get props => [deleteClubInviteToken];
  @override
  Map<String, dynamic> toJson() => _$DeleteClubInviteToken$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteClubInviteTokenInput extends JsonSerializable with EquatableMixin {
  DeleteClubInviteTokenInput({required this.clubId, required this.tokenId});

  factory DeleteClubInviteTokenInput.fromJson(Map<String, dynamic> json) =>
      _$DeleteClubInviteTokenInputFromJson(json);

  late String clubId;

  late String tokenId;

  @override
  List<Object?> get props => [clubId, tokenId];
  @override
  Map<String, dynamic> toJson() => _$DeleteClubInviteTokenInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GiveMemberAdminStatus$Mutation extends JsonSerializable
    with EquatableMixin {
  GiveMemberAdminStatus$Mutation();

  factory GiveMemberAdminStatus$Mutation.fromJson(Map<String, dynamic> json) =>
      _$GiveMemberAdminStatus$MutationFromJson(json);

  late ClubMembers giveMemberAdminStatus;

  @override
  List<Object?> get props => [giveMemberAdminStatus];
  @override
  Map<String, dynamic> toJson() => _$GiveMemberAdminStatus$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateClubInviteToken$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateClubInviteToken$Mutation();

  factory CreateClubInviteToken$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateClubInviteToken$MutationFromJson(json);

  late ClubInviteTokens createClubInviteToken;

  @override
  List<Object?> get props => [createClubInviteToken];
  @override
  Map<String, dynamic> toJson() => _$CreateClubInviteToken$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateClubInviteTokenInput extends JsonSerializable with EquatableMixin {
  CreateClubInviteTokenInput(
      {required this.clubId, required this.inviteLimit, required this.name});

  factory CreateClubInviteTokenInput.fromJson(Map<String, dynamic> json) =>
      _$CreateClubInviteTokenInputFromJson(json);

  late String clubId;

  late int inviteLimit;

  late String name;

  @override
  List<Object?> get props => [clubId, inviteLimit, name];
  @override
  Map<String, dynamic> toJson() => _$CreateClubInviteTokenInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserMaxUnbrokenExerciseTracker$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateUserMaxUnbrokenExerciseTracker$Mutation();

  factory CreateUserMaxUnbrokenExerciseTracker$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserMaxUnbrokenExerciseTracker$MutationFromJson(json);

  late UserMaxUnbrokenExerciseTracker createUserMaxUnbrokenExerciseTracker;

  @override
  List<Object?> get props => [createUserMaxUnbrokenExerciseTracker];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserMaxUnbrokenExerciseTracker$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserMaxUnbrokenExerciseTrackerInput extends JsonSerializable
    with EquatableMixin {
  CreateUserMaxUnbrokenExerciseTrackerInput(
      {this.equipment,
      required this.move,
      required this.distanceUnit,
      required this.loadAmount,
      required this.loadUnit,
      required this.repType});

  factory CreateUserMaxUnbrokenExerciseTrackerInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserMaxUnbrokenExerciseTrackerInputFromJson(json);

  @JsonKey(name: 'Equipment')
  ConnectRelationInput? equipment;

  @JsonKey(name: 'Move')
  late ConnectRelationInput move;

  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  late DistanceUnit distanceUnit;

  late double loadAmount;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  late LoadUnit loadUnit;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late WorkoutMoveRepType repType;

  @override
  List<Object?> get props =>
      [equipment, move, distanceUnit, loadAmount, loadUnit, repType];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserMaxUnbrokenExerciseTrackerInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserFastestTimeExerciseTracker$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateUserFastestTimeExerciseTracker$Mutation();

  factory CreateUserFastestTimeExerciseTracker$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserFastestTimeExerciseTracker$MutationFromJson(json);

  late UserFastestTimeExerciseTracker createUserFastestTimeExerciseTracker;

  @override
  List<Object?> get props => [createUserFastestTimeExerciseTracker];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserFastestTimeExerciseTracker$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserFastestTimeExerciseTrackerInput extends JsonSerializable
    with EquatableMixin {
  CreateUserFastestTimeExerciseTrackerInput(
      {this.equipment,
      required this.move,
      required this.distanceUnit,
      required this.loadAmount,
      required this.loadUnit,
      required this.repType,
      required this.reps});

  factory CreateUserFastestTimeExerciseTrackerInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserFastestTimeExerciseTrackerInputFromJson(json);

  @JsonKey(name: 'Equipment')
  ConnectRelationInput? equipment;

  @JsonKey(name: 'Move')
  late ConnectRelationInput move;

  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  late DistanceUnit distanceUnit;

  late double loadAmount;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  late LoadUnit loadUnit;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late WorkoutMoveRepType repType;

  late double reps;

  @override
  List<Object?> get props =>
      [equipment, move, distanceUnit, loadAmount, loadUnit, repType, reps];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserFastestTimeExerciseTrackerInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserMaxLoadExerciseTracker$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateUserMaxLoadExerciseTracker$Mutation();

  factory CreateUserMaxLoadExerciseTracker$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserMaxLoadExerciseTracker$MutationFromJson(json);

  late UserMaxLoadExerciseTracker createUserMaxLoadExerciseTracker;

  @override
  List<Object?> get props => [createUserMaxLoadExerciseTracker];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserMaxLoadExerciseTracker$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserMaxLoadExerciseTrackerInput extends JsonSerializable
    with EquatableMixin {
  CreateUserMaxLoadExerciseTrackerInput(
      {this.equipment,
      required this.move,
      required this.loadUnit,
      required this.reps});

  factory CreateUserMaxLoadExerciseTrackerInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserMaxLoadExerciseTrackerInputFromJson(json);

  @JsonKey(name: 'Equipment')
  ConnectRelationInput? equipment;

  @JsonKey(name: 'Move')
  late ConnectRelationInput move;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  late LoadUnit loadUnit;

  late int reps;

  @override
  List<Object?> get props => [equipment, move, loadUnit, reps];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserMaxLoadExerciseTrackerInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserMaxLoadExerciseTracker$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteUserMaxLoadExerciseTracker$Mutation();

  factory DeleteUserMaxLoadExerciseTracker$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserMaxLoadExerciseTracker$MutationFromJson(json);

  late String deleteUserMaxLoadExerciseTracker;

  @override
  List<Object?> get props => [deleteUserMaxLoadExerciseTracker];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserMaxLoadExerciseTracker$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserMaxUnbrokenExerciseTracker$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteUserMaxUnbrokenExerciseTracker$Mutation();

  factory DeleteUserMaxUnbrokenExerciseTracker$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserMaxUnbrokenExerciseTracker$MutationFromJson(json);

  late String deleteUserMaxUnbrokenExerciseTracker;

  @override
  List<Object?> get props => [deleteUserMaxUnbrokenExerciseTracker];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserMaxUnbrokenExerciseTracker$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserFastestTimeExerciseTracker$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteUserFastestTimeExerciseTracker$Mutation();

  factory DeleteUserFastestTimeExerciseTracker$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserFastestTimeExerciseTracker$MutationFromJson(json);

  late String deleteUserFastestTimeExerciseTracker;

  @override
  List<Object?> get props => [deleteUserFastestTimeExerciseTracker];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserFastestTimeExerciseTracker$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ExerciseTrackerManualEntry extends JsonSerializable
    with EquatableMixin, ExerciseTrackerManualEntryMixin {
  ExerciseTrackerManualEntry();

  factory ExerciseTrackerManualEntry.fromJson(Map<String, dynamic> json) =>
      _$ExerciseTrackerManualEntryFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, completedOn, score, videoUri, videoThumbUri];
  @override
  Map<String, dynamic> toJson() => _$ExerciseTrackerManualEntryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateExerciseTrackerManualEntry$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateExerciseTrackerManualEntry$Mutation();

  factory CreateExerciseTrackerManualEntry$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateExerciseTrackerManualEntry$MutationFromJson(json);

  late ExerciseTrackerManualEntry createExerciseTrackerManualEntry;

  @override
  List<Object?> get props => [createExerciseTrackerManualEntry];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateExerciseTrackerManualEntry$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateExerciseTrackerManualEntryInput extends JsonSerializable
    with EquatableMixin {
  CreateExerciseTrackerManualEntryInput(
      {this.userFastestTimeExerciseTracker,
      this.userMaxLoadExerciseTracker,
      this.userMaxUnbrokenExerciseTracker,
      required this.completedOn,
      required this.score,
      this.videoThumbUri,
      this.videoUri});

  factory CreateExerciseTrackerManualEntryInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateExerciseTrackerManualEntryInputFromJson(json);

  @JsonKey(name: 'UserFastestTimeExerciseTracker')
  ConnectRelationInput? userFastestTimeExerciseTracker;

  @JsonKey(name: 'UserMaxLoadExerciseTracker')
  ConnectRelationInput? userMaxLoadExerciseTracker;

  @JsonKey(name: 'UserMaxUnbrokenExerciseTracker')
  ConnectRelationInput? userMaxUnbrokenExerciseTracker;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime completedOn;

  late double score;

  String? videoThumbUri;

  String? videoUri;

  @override
  List<Object?> get props => [
        userFastestTimeExerciseTracker,
        userMaxLoadExerciseTracker,
        userMaxUnbrokenExerciseTracker,
        completedOn,
        score,
        videoThumbUri,
        videoUri
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateExerciseTrackerManualEntryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteExerciseTrackerManualEntry$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteExerciseTrackerManualEntry$Mutation();

  factory DeleteExerciseTrackerManualEntry$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteExerciseTrackerManualEntry$MutationFromJson(json);

  late String deleteExerciseTrackerManualEntry;

  @override
  List<Object?> get props => [deleteExerciseTrackerManualEntry];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteExerciseTrackerManualEntry$MutationToJson(this);
}

enum ContentAccessScope {
  @JsonValue('PRIVATE')
  private,
  @JsonValue('PUBLIC')
  public,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum BodyweightUnit {
  @JsonValue('KG')
  kg,
  @JsonValue('LB')
  lb,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum UserDayLogRating {
  @JsonValue('AVERAGE')
  average,
  @JsonValue('BAD')
  bad,
  @JsonValue('GOOD')
  good,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum WorkoutMoveRepType {
  @JsonValue('CALORIES')
  calories,
  @JsonValue('DISTANCE')
  distance,
  @JsonValue('REPS')
  reps,
  @JsonValue('TIME')
  time,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum DistanceUnit {
  @JsonValue('KILOMETRES')
  kilometres,
  @JsonValue('METRES')
  metres,
  @JsonValue('MILES')
  miles,
  @JsonValue('YARDS')
  yards,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum LoadUnit {
  @JsonValue('BODYWEIGHTPERCENT')
  bodyweightpercent,
  @JsonValue('KG')
  kg,
  @JsonValue('LB')
  lb,
  @JsonValue('PERCENTMAX')
  percentmax,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum TimeUnit {
  @JsonValue('HOURS')
  hours,
  @JsonValue('MINUTES')
  minutes,
  @JsonValue('SECONDS')
  seconds,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum MoveScope {
  @JsonValue('CUSTOM')
  custom,
  @JsonValue('STANDARD')
  standard,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum BodyAreaFrontBack {
  @JsonValue('BACK')
  back,
  @JsonValue('BOTH')
  both,
  @JsonValue('FRONT')
  front,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum BodyAreaUpperLower {
  @JsonValue('CORE')
  core,
  @JsonValue('LOWER')
  lower,
  @JsonValue('UPPER')
  upper,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum DifficultyLevel {
  @JsonValue('ADVANCED')
  advanced,
  @JsonValue('CHALLENGING')
  challenging,
  @JsonValue('ELITE')
  elite,
  @JsonValue('INTERMEDIATE')
  intermediate,
  @JsonValue('LIGHT')
  light,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum UserProfileScope {
  @JsonValue('PRIVATE')
  private,
  @JsonValue('PUBLIC')
  public,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum Gender {
  @JsonValue('FEMALE')
  female,
  @JsonValue('MALE')
  male,
  @JsonValue('NONBINARY')
  nonbinary,
  @JsonValue('PNTS')
  pnts,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum BenchmarkType {
  @JsonValue('AMRAP')
  amrap,
  @JsonValue('FASTESTTIME')
  fastesttime,
  @JsonValue('MAXLOAD')
  maxload,
  @JsonValue('UNBROKENREPS')
  unbrokenreps,
  @JsonValue('UNBROKENTIME')
  unbrokentime,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum UserClubMemberStatus {
  @JsonValue('ADMIN')
  admin,
  @JsonValue('MEMBER')
  member,
  @JsonValue('NONE')
  none,
  @JsonValue('OWNER')
  owner,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

@JsonSerializable(explicitToJson: true)
class ClubChatSummaryArguments extends JsonSerializable with EquatableMixin {
  ClubChatSummaryArguments({required this.clubId});

  @override
  factory ClubChatSummaryArguments.fromJson(Map<String, dynamic> json) =>
      _$ClubChatSummaryArgumentsFromJson(json);

  late String clubId;

  @override
  List<Object?> get props => [clubId];
  @override
  Map<String, dynamic> toJson() => _$ClubChatSummaryArgumentsToJson(this);
}

final CLUB_CHAT_SUMMARY_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'clubChatSummary'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clubChatSummary'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubChatSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubChatSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubChatSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'Owner'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'Admins'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'Members'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClubChatSummaryQuery
    extends GraphQLQuery<ClubChatSummary$Query, ClubChatSummaryArguments> {
  ClubChatSummaryQuery({required this.variables});

  @override
  final DocumentNode document = CLUB_CHAT_SUMMARY_QUERY_DOCUMENT;

  @override
  final String operationName = 'clubChatSummary';

  @override
  final ClubChatSummaryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClubChatSummary$Query parse(Map<String, dynamic> json) =>
      ClubChatSummary$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteClubArguments extends JsonSerializable with EquatableMixin {
  DeleteClubArguments({required this.id});

  @override
  factory DeleteClubArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteClubArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteClubArgumentsToJson(this);
}

final DELETE_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteClubMutation
    extends GraphQLQuery<DeleteClub$Mutation, DeleteClubArguments> {
  DeleteClubMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteClub';

  @override
  final DeleteClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteClub$Mutation parse(Map<String, dynamic> json) =>
      DeleteClub$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ClubSummaryArguments extends JsonSerializable with EquatableMixin {
  ClubSummaryArguments({required this.id});

  @override
  factory ClubSummaryArguments.fromJson(Map<String, dynamic> json) =>
      _$ClubSummaryArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ClubSummaryArgumentsToJson(this);
}

final CLUB_SUMMARY_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'clubSummary'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clubSummary'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubSummary'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClubSummaryQuery
    extends GraphQLQuery<ClubSummary$Query, ClubSummaryArguments> {
  ClubSummaryQuery({required this.variables});

  @override
  final DocumentNode document = CLUB_SUMMARY_QUERY_DOCUMENT;

  @override
  final String operationName = 'clubSummary';

  @override
  final ClubSummaryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClubSummary$Query parse(Map<String, dynamic> json) =>
      ClubSummary$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateClubArguments extends JsonSerializable with EquatableMixin {
  CreateClubArguments({required this.data});

  @override
  factory CreateClubArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateClubArgumentsFromJson(json);

  late CreateClubInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateClubArgumentsToJson(this);
}

final CREATE_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateClubInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubSummary'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateClubMutation
    extends GraphQLQuery<CreateClub$Mutation, CreateClubArguments> {
  CreateClubMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createClub';

  @override
  final CreateClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateClub$Mutation parse(Map<String, dynamic> json) =>
      CreateClub$Mutation.fromJson(json);
}

final PUBLIC_CLUBS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'publicClubs'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'publicClubs'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubSummary'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class PublicClubsQuery
    extends GraphQLQuery<PublicClubs$Query, JsonSerializable> {
  PublicClubsQuery();

  @override
  final DocumentNode document = PUBLIC_CLUBS_QUERY_DOCUMENT;

  @override
  final String operationName = 'publicClubs';

  @override
  List<Object?> get props => [document, operationName];
  @override
  PublicClubs$Query parse(Map<String, dynamic> json) =>
      PublicClubs$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubSummaryArguments extends JsonSerializable with EquatableMixin {
  UpdateClubSummaryArguments({required this.data});

  @override
  factory UpdateClubSummaryArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubSummaryArgumentsFromJson(json);

  late UpdateClubSummaryInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubSummaryArgumentsToJson(this);
}

final UPDATE_CLUB_SUMMARY_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateClubSummary'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateClubSummaryInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateClubSummary'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubSummary'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateClubSummaryMutation extends GraphQLQuery<UpdateClubSummary$Mutation,
    UpdateClubSummaryArguments> {
  UpdateClubSummaryMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_CLUB_SUMMARY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateClubSummary';

  @override
  final UpdateClubSummaryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateClubSummary$Mutation parse(Map<String, dynamic> json) =>
      UpdateClubSummary$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CheckUniqueClubNameArguments extends JsonSerializable
    with EquatableMixin {
  CheckUniqueClubNameArguments({required this.name});

  @override
  factory CheckUniqueClubNameArguments.fromJson(Map<String, dynamic> json) =>
      _$CheckUniqueClubNameArgumentsFromJson(json);

  late String name;

  @override
  List<Object?> get props => [name];
  @override
  Map<String, dynamic> toJson() => _$CheckUniqueClubNameArgumentsToJson(this);
}

final CHECK_UNIQUE_CLUB_NAME_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'checkUniqueClubName'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'name')),
            type:
                NamedTypeNode(name: NameNode(value: 'String'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'checkUniqueClubName'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'name'),
                  value: VariableNode(name: NameNode(value: 'name')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class CheckUniqueClubNameQuery extends GraphQLQuery<CheckUniqueClubName$Query,
    CheckUniqueClubNameArguments> {
  CheckUniqueClubNameQuery({required this.variables});

  @override
  final DocumentNode document = CHECK_UNIQUE_CLUB_NAME_QUERY_DOCUMENT;

  @override
  final String operationName = 'checkUniqueClubName';

  @override
  final CheckUniqueClubNameArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CheckUniqueClubName$Query parse(Map<String, dynamic> json) =>
      CheckUniqueClubName$Query.fromJson(json);
}

final USER_CLUBS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userClubs'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userClubs'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubSummary'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserClubsQuery extends GraphQLQuery<UserClubs$Query, JsonSerializable> {
  UserClubsQuery();

  @override
  final DocumentNode document = USER_CLUBS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userClubs';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserClubs$Query parse(Map<String, dynamic> json) =>
      UserClubs$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ClubSummariesArguments extends JsonSerializable with EquatableMixin {
  ClubSummariesArguments({required this.ids});

  @override
  factory ClubSummariesArguments.fromJson(Map<String, dynamic> json) =>
      _$ClubSummariesArgumentsFromJson(json);

  late List<String> ids;

  @override
  List<Object?> get props => [ids];
  @override
  Map<String, dynamic> toJson() => _$ClubSummariesArgumentsToJson(this);
}

final CLUB_SUMMARIES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'clubSummaries'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'ids')),
            type: ListTypeNode(
                type:
                    NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clubSummaries'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'ids'),
                  value: VariableNode(name: NameNode(value: 'ids')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubSummary'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClubSummariesQuery
    extends GraphQLQuery<ClubSummaries$Query, ClubSummariesArguments> {
  ClubSummariesQuery({required this.variables});

  @override
  final DocumentNode document = CLUB_SUMMARIES_QUERY_DOCUMENT;

  @override
  final String operationName = 'clubSummaries';

  @override
  final ClubSummariesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClubSummaries$Query parse(Map<String, dynamic> json) =>
      ClubSummaries$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateBodyTrackingEntryArguments extends JsonSerializable
    with EquatableMixin {
  CreateBodyTrackingEntryArguments({required this.data});

  @override
  factory CreateBodyTrackingEntryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateBodyTrackingEntryArgumentsFromJson(json);

  late CreateBodyTrackingEntryInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateBodyTrackingEntryArgumentsToJson(this);
}

final CREATE_BODY_TRACKING_ENTRY_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createBodyTrackingEntry'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateBodyTrackingEntryInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createBodyTrackingEntry'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'BodyTrackingEntry'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyTrackingEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyTrackingEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyweightUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyweight'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'fatPercent'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'photoUris'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateBodyTrackingEntryMutation extends GraphQLQuery<
    CreateBodyTrackingEntry$Mutation, CreateBodyTrackingEntryArguments> {
  CreateBodyTrackingEntryMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_BODY_TRACKING_ENTRY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createBodyTrackingEntry';

  @override
  final CreateBodyTrackingEntryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateBodyTrackingEntry$Mutation parse(Map<String, dynamic> json) =>
      CreateBodyTrackingEntry$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateBodyTrackingEntryArguments extends JsonSerializable
    with EquatableMixin {
  UpdateBodyTrackingEntryArguments({required this.data});

  @override
  factory UpdateBodyTrackingEntryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateBodyTrackingEntryArgumentsFromJson(json);

  late UpdateBodyTrackingEntryInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateBodyTrackingEntryArgumentsToJson(this);
}

final UPDATE_BODY_TRACKING_ENTRY_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateBodyTrackingEntry'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateBodyTrackingEntryInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateBodyTrackingEntry'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'BodyTrackingEntry'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyTrackingEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyTrackingEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyweightUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyweight'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'fatPercent'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'photoUris'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateBodyTrackingEntryMutation extends GraphQLQuery<
    UpdateBodyTrackingEntry$Mutation, UpdateBodyTrackingEntryArguments> {
  UpdateBodyTrackingEntryMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_BODY_TRACKING_ENTRY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateBodyTrackingEntry';

  @override
  final UpdateBodyTrackingEntryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateBodyTrackingEntry$Mutation parse(Map<String, dynamic> json) =>
      UpdateBodyTrackingEntry$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteBodyTrackingEntryByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteBodyTrackingEntryByIdArguments({required this.id});

  @override
  factory DeleteBodyTrackingEntryByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteBodyTrackingEntryByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteBodyTrackingEntryByIdArgumentsToJson(this);
}

final DELETE_BODY_TRACKING_ENTRY_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteBodyTrackingEntryById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteBodyTrackingEntryById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteBodyTrackingEntryByIdMutation extends GraphQLQuery<
    DeleteBodyTrackingEntryById$Mutation,
    DeleteBodyTrackingEntryByIdArguments> {
  DeleteBodyTrackingEntryByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_BODY_TRACKING_ENTRY_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteBodyTrackingEntryById';

  @override
  final DeleteBodyTrackingEntryByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteBodyTrackingEntryById$Mutation parse(Map<String, dynamic> json) =>
      DeleteBodyTrackingEntryById$Mutation.fromJson(json);
}

final BODY_TRACKING_ENTRIES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'bodyTrackingEntries'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'bodyTrackingEntries'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'BodyTrackingEntry'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyTrackingEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyTrackingEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyweightUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyweight'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'fatPercent'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'photoUris'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class BodyTrackingEntriesQuery
    extends GraphQLQuery<BodyTrackingEntries$Query, JsonSerializable> {
  BodyTrackingEntriesQuery();

  @override
  final DocumentNode document = BODY_TRACKING_ENTRIES_QUERY_DOCUMENT;

  @override
  final String operationName = 'bodyTrackingEntries';

  @override
  List<Object?> get props => [document, operationName];
  @override
  BodyTrackingEntries$Query parse(Map<String, dynamic> json) =>
      BodyTrackingEntries$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserGoalArguments extends JsonSerializable with EquatableMixin {
  CreateUserGoalArguments({required this.data});

  @override
  factory CreateUserGoalArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateUserGoalArgumentsFromJson(json);

  late CreateUserGoalInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateUserGoalArgumentsToJson(this);
}

final CREATE_USER_GOAL_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createUserGoal'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateUserGoalInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createUserGoal'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserGoal'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'deadline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateUserGoalMutation
    extends GraphQLQuery<CreateUserGoal$Mutation, CreateUserGoalArguments> {
  CreateUserGoalMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_USER_GOAL_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createUserGoal';

  @override
  final CreateUserGoalArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateUserGoal$Mutation parse(Map<String, dynamic> json) =>
      CreateUserGoal$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserGoalArguments extends JsonSerializable with EquatableMixin {
  DeleteUserGoalArguments({required this.id});

  @override
  factory DeleteUserGoalArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteUserGoalArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteUserGoalArgumentsToJson(this);
}

final DELETE_USER_GOAL_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteUserGoal'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteUserGoal'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteUserGoalMutation
    extends GraphQLQuery<DeleteUserGoal$Mutation, DeleteUserGoalArguments> {
  DeleteUserGoalMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_USER_GOAL_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteUserGoal';

  @override
  final DeleteUserGoalArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteUserGoal$Mutation parse(Map<String, dynamic> json) =>
      DeleteUserGoal$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserSleepWellLogArguments extends JsonSerializable
    with EquatableMixin {
  CreateUserSleepWellLogArguments({required this.data});

  @override
  factory CreateUserSleepWellLogArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateUserSleepWellLogArgumentsFromJson(json);

  late CreateUserSleepWellLogInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserSleepWellLogArgumentsToJson(this);
}

final CREATE_USER_SLEEP_WELL_LOG_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createUserSleepWellLog'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateUserSleepWellLogInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createUserSleepWellLog'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSleepWellLog'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSleepWellLog'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSleepWellLog'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'year'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rating'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'minutesSlept'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateUserSleepWellLogMutation extends GraphQLQuery<
    CreateUserSleepWellLog$Mutation, CreateUserSleepWellLogArguments> {
  CreateUserSleepWellLogMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_USER_SLEEP_WELL_LOG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createUserSleepWellLog';

  @override
  final CreateUserSleepWellLogArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateUserSleepWellLog$Mutation parse(Map<String, dynamic> json) =>
      CreateUserSleepWellLog$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserSleepWellLogArguments extends JsonSerializable
    with EquatableMixin {
  UpdateUserSleepWellLogArguments({required this.data});

  @override
  factory UpdateUserSleepWellLogArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserSleepWellLogArgumentsFromJson(json);

  late UpdateUserSleepWellLogInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateUserSleepWellLogArgumentsToJson(this);
}

final UPDATE_USER_SLEEP_WELL_LOG_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateUserSleepWellLog'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateUserSleepWellLogInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateUserSleepWellLog'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSleepWellLog'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSleepWellLog'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSleepWellLog'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'year'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rating'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'minutesSlept'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateUserSleepWellLogMutation extends GraphQLQuery<
    UpdateUserSleepWellLog$Mutation, UpdateUserSleepWellLogArguments> {
  UpdateUserSleepWellLogMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_USER_SLEEP_WELL_LOG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateUserSleepWellLog';

  @override
  final UpdateUserSleepWellLogArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateUserSleepWellLog$Mutation parse(Map<String, dynamic> json) =>
      UpdateUserSleepWellLog$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserGoalArguments extends JsonSerializable with EquatableMixin {
  UpdateUserGoalArguments({required this.data});

  @override
  factory UpdateUserGoalArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserGoalArgumentsFromJson(json);

  late UpdateUserGoalInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserGoalArgumentsToJson(this);
}

final UPDATE_USER_GOAL_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateUserGoal'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateUserGoalInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateUserGoal'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserGoal'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'deadline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateUserGoalMutation
    extends GraphQLQuery<UpdateUserGoal$Mutation, UpdateUserGoalArguments> {
  UpdateUserGoalMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_USER_GOAL_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateUserGoal';

  @override
  final UpdateUserGoalArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateUserGoal$Mutation parse(Map<String, dynamic> json) =>
      UpdateUserGoal$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserMeditationLogArguments extends JsonSerializable
    with EquatableMixin {
  CreateUserMeditationLogArguments({required this.data});

  @override
  factory CreateUserMeditationLogArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserMeditationLogArgumentsFromJson(json);

  late CreateUserMeditationLogInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserMeditationLogArgumentsToJson(this);
}

final CREATE_USER_MEDITATION_LOG_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createUserMeditationLog'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateUserMeditationLogInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createUserMeditationLog'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserMeditationLog'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserMeditationLog'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserMeditationLog'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'year'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'minutesLogged'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateUserMeditationLogMutation extends GraphQLQuery<
    CreateUserMeditationLog$Mutation, CreateUserMeditationLogArguments> {
  CreateUserMeditationLogMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_USER_MEDITATION_LOG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createUserMeditationLog';

  @override
  final CreateUserMeditationLogArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateUserMeditationLog$Mutation parse(Map<String, dynamic> json) =>
      CreateUserMeditationLog$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserDayLogMoodArguments extends JsonSerializable
    with EquatableMixin {
  DeleteUserDayLogMoodArguments({required this.id});

  @override
  factory DeleteUserDayLogMoodArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteUserDayLogMoodArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteUserDayLogMoodArgumentsToJson(this);
}

final DELETE_USER_DAY_LOG_MOOD_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteUserDayLogMood'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteUserDayLogMood'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteUserDayLogMoodMutation extends GraphQLQuery<
    DeleteUserDayLogMood$Mutation, DeleteUserDayLogMoodArguments> {
  DeleteUserDayLogMoodMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_USER_DAY_LOG_MOOD_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteUserDayLogMood';

  @override
  final DeleteUserDayLogMoodArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteUserDayLogMood$Mutation parse(Map<String, dynamic> json) =>
      DeleteUserDayLogMood$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserEatWellLogArguments extends JsonSerializable
    with EquatableMixin {
  CreateUserEatWellLogArguments({required this.data});

  @override
  factory CreateUserEatWellLogArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateUserEatWellLogArgumentsFromJson(json);

  late CreateUserEatWellLogInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateUserEatWellLogArgumentsToJson(this);
}

final CREATE_USER_EAT_WELL_LOG_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createUserEatWellLog'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateUserEatWellLogInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createUserEatWellLog'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserEatWellLog'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserEatWellLog'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserEatWellLog'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'year'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rating'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateUserEatWellLogMutation extends GraphQLQuery<
    CreateUserEatWellLog$Mutation, CreateUserEatWellLogArguments> {
  CreateUserEatWellLogMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_USER_EAT_WELL_LOG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createUserEatWellLog';

  @override
  final CreateUserEatWellLogArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateUserEatWellLog$Mutation parse(Map<String, dynamic> json) =>
      CreateUserEatWellLog$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserMeditationLogArguments extends JsonSerializable
    with EquatableMixin {
  UpdateUserMeditationLogArguments({required this.data});

  @override
  factory UpdateUserMeditationLogArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateUserMeditationLogArgumentsFromJson(json);

  late UpdateUserMeditationLogInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateUserMeditationLogArgumentsToJson(this);
}

final UPDATE_USER_MEDITATION_LOG_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateUserMeditationLog'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateUserMeditationLogInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateUserMeditationLog'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserMeditationLog'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserMeditationLog'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserMeditationLog'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'year'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'minutesLogged'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateUserMeditationLogMutation extends GraphQLQuery<
    UpdateUserMeditationLog$Mutation, UpdateUserMeditationLogArguments> {
  UpdateUserMeditationLogMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_USER_MEDITATION_LOG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateUserMeditationLog';

  @override
  final UpdateUserMeditationLogArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateUserMeditationLog$Mutation parse(Map<String, dynamic> json) =>
      UpdateUserMeditationLog$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserDayLogMoodArguments extends JsonSerializable
    with EquatableMixin {
  CreateUserDayLogMoodArguments({required this.data});

  @override
  factory CreateUserDayLogMoodArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateUserDayLogMoodArgumentsFromJson(json);

  late CreateUserDayLogMoodInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateUserDayLogMoodArgumentsToJson(this);
}

final CREATE_USER_DAY_LOG_MOOD_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createUserDayLogMood'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateUserDayLogMoodInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createUserDayLogMood'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserDayLogMood'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserDayLogMood'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserDayLogMood'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'moodScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'energyScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateUserDayLogMoodMutation extends GraphQLQuery<
    CreateUserDayLogMood$Mutation, CreateUserDayLogMoodArguments> {
  CreateUserDayLogMoodMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_USER_DAY_LOG_MOOD_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createUserDayLogMood';

  @override
  final CreateUserDayLogMoodArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateUserDayLogMood$Mutation parse(Map<String, dynamic> json) =>
      CreateUserDayLogMood$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserEatWellLogArguments extends JsonSerializable
    with EquatableMixin {
  UpdateUserEatWellLogArguments({required this.data});

  @override
  factory UpdateUserEatWellLogArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserEatWellLogArgumentsFromJson(json);

  late UpdateUserEatWellLogInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserEatWellLogArgumentsToJson(this);
}

final UPDATE_USER_EAT_WELL_LOG_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateUserEatWellLog'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateUserEatWellLogInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateUserEatWellLog'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserEatWellLog'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserEatWellLog'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserEatWellLog'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'year'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rating'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateUserEatWellLogMutation extends GraphQLQuery<
    UpdateUserEatWellLog$Mutation, UpdateUserEatWellLogArguments> {
  UpdateUserEatWellLogMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_USER_EAT_WELL_LOG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateUserEatWellLog';

  @override
  final UpdateUserEatWellLogArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateUserEatWellLog$Mutation parse(Map<String, dynamic> json) =>
      UpdateUserEatWellLog$Mutation.fromJson(json);
}

final USER_MEDITATION_LOGS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userMeditationLogs'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userMeditationLogs'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserMeditationLog'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserMeditationLog'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserMeditationLog'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'year'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'minutesLogged'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserMeditationLogsQuery
    extends GraphQLQuery<UserMeditationLogs$Query, JsonSerializable> {
  UserMeditationLogsQuery();

  @override
  final DocumentNode document = USER_MEDITATION_LOGS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userMeditationLogs';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserMeditationLogs$Query parse(Map<String, dynamic> json) =>
      UserMeditationLogs$Query.fromJson(json);
}

final USER_EAT_WELL_LOGS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userEatWellLogs'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userEatWellLogs'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserEatWellLog'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserEatWellLog'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserEatWellLog'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'year'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rating'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserEatWellLogsQuery
    extends GraphQLQuery<UserEatWellLogs$Query, JsonSerializable> {
  UserEatWellLogsQuery();

  @override
  final DocumentNode document = USER_EAT_WELL_LOGS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userEatWellLogs';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserEatWellLogs$Query parse(Map<String, dynamic> json) =>
      UserEatWellLogs$Query.fromJson(json);
}

final USER_SLEEP_WELL_LOGS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userSleepWellLogs'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userSleepWellLogs'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSleepWellLog'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSleepWellLog'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSleepWellLog'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'year'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rating'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'minutesSlept'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserSleepWellLogsQuery
    extends GraphQLQuery<UserSleepWellLogs$Query, JsonSerializable> {
  UserSleepWellLogsQuery();

  @override
  final DocumentNode document = USER_SLEEP_WELL_LOGS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userSleepWellLogs';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserSleepWellLogs$Query parse(Map<String, dynamic> json) =>
      UserSleepWellLogs$Query.fromJson(json);
}

final USER_GOALS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userGoals'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserGoal'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'deadline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserGoalsQuery extends GraphQLQuery<UserGoals$Query, JsonSerializable> {
  UserGoalsQuery();

  @override
  final DocumentNode document = USER_GOALS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userGoals';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserGoals$Query parse(Map<String, dynamic> json) =>
      UserGoals$Query.fromJson(json);
}

final USER_DAY_LOG_MOODS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userDayLogMoods'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userDayLogMoods'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserDayLogMood'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserDayLogMood'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserDayLogMood'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'moodScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'energyScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserDayLogMoodsQuery
    extends GraphQLQuery<UserDayLogMoods$Query, JsonSerializable> {
  UserDayLogMoodsQuery();

  @override
  final DocumentNode document = USER_DAY_LOG_MOODS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userDayLogMoods';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserDayLogMoods$Query parse(Map<String, dynamic> json) =>
      UserDayLogMoods$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutMoveArguments extends JsonSerializable with EquatableMixin {
  CreateWorkoutMoveArguments({required this.data});

  @override
  factory CreateWorkoutMoveArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutMoveArgumentsFromJson(json);

  late CreateWorkoutMoveInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutMoveArgumentsToJson(this);
}

final CREATE_WORKOUT_MOVE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutMove'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutMoveInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutMove'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutMove'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipment'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Move'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Move'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'MoveType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'MoveType'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BodyAreaMoveScores'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'score'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'BodyArea'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'BodyArea'),
                                    directives: [])
                              ]))
                        ])),
                    FieldNode(
                        name: NameNode(value: 'RequiredEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'SelectableEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutMoveMutation extends GraphQLQuery<CreateWorkoutMove$Mutation,
    CreateWorkoutMoveArguments> {
  CreateWorkoutMoveMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_MOVE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutMove';

  @override
  final CreateWorkoutMoveArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutMove$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutMove$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutMovesArguments extends JsonSerializable with EquatableMixin {
  UpdateWorkoutMovesArguments({required this.data});

  @override
  factory UpdateWorkoutMovesArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutMovesArgumentsFromJson(json);

  late List<UpdateWorkoutMoveInput> data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutMovesArgumentsToJson(this);
}

final UPDATE_WORKOUT_MOVES_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutMoves'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: ListTypeNode(
                type: NamedTypeNode(
                    name: NameNode(value: 'UpdateWorkoutMoveInput'),
                    isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutMoves'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutMove'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipment'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Move'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Move'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'MoveType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'MoveType'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BodyAreaMoveScores'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'score'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'BodyArea'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'BodyArea'),
                                    directives: [])
                              ]))
                        ])),
                    FieldNode(
                        name: NameNode(value: 'RequiredEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'SelectableEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutMovesMutation extends GraphQLQuery<
    UpdateWorkoutMoves$Mutation, UpdateWorkoutMovesArguments> {
  UpdateWorkoutMovesMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_MOVES_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutMoves';

  @override
  final UpdateWorkoutMovesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutMoves$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutMoves$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DuplicateWorkoutMoveByIdArguments extends JsonSerializable
    with EquatableMixin {
  DuplicateWorkoutMoveByIdArguments({required this.id});

  @override
  factory DuplicateWorkoutMoveByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DuplicateWorkoutMoveByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DuplicateWorkoutMoveByIdArgumentsToJson(this);
}

final DUPLICATE_WORKOUT_MOVE_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'duplicateWorkoutMoveById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'duplicateWorkoutMoveById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutMove'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipment'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Move'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Move'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'MoveType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'MoveType'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BodyAreaMoveScores'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'score'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'BodyArea'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'BodyArea'),
                                    directives: [])
                              ]))
                        ])),
                    FieldNode(
                        name: NameNode(value: 'RequiredEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'SelectableEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class DuplicateWorkoutMoveByIdMutation extends GraphQLQuery<
    DuplicateWorkoutMoveById$Mutation, DuplicateWorkoutMoveByIdArguments> {
  DuplicateWorkoutMoveByIdMutation({required this.variables});

  @override
  final DocumentNode document = DUPLICATE_WORKOUT_MOVE_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'duplicateWorkoutMoveById';

  @override
  final DuplicateWorkoutMoveByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DuplicateWorkoutMoveById$Mutation parse(Map<String, dynamic> json) =>
      DuplicateWorkoutMoveById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutMoveByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutMoveByIdArguments({required this.id});

  @override
  factory DeleteWorkoutMoveByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteWorkoutMoveByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteWorkoutMoveByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_MOVE_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutMoveById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutMoveById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutMoveByIdMutation extends GraphQLQuery<
    DeleteWorkoutMoveById$Mutation, DeleteWorkoutMoveByIdArguments> {
  DeleteWorkoutMoveByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_WORKOUT_MOVE_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutMoveById';

  @override
  final DeleteWorkoutMoveByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutMoveById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutMoveById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutMovesArguments extends JsonSerializable
    with EquatableMixin {
  ReorderWorkoutMovesArguments({required this.data});

  @override
  factory ReorderWorkoutMovesArguments.fromJson(Map<String, dynamic> json) =>
      _$ReorderWorkoutMovesArgumentsFromJson(json);

  late List<UpdateSortPositionInput> data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$ReorderWorkoutMovesArgumentsToJson(this);
}

final REORDER_WORKOUT_MOVES_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'reorderWorkoutMoves'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: ListTypeNode(
                type: NamedTypeNode(
                    name: NameNode(value: 'UpdateSortPositionInput'),
                    isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'reorderWorkoutMoves'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'sortPosition'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ]))
]);

class ReorderWorkoutMovesMutation extends GraphQLQuery<
    ReorderWorkoutMoves$Mutation, ReorderWorkoutMovesArguments> {
  ReorderWorkoutMovesMutation({required this.variables});

  @override
  final DocumentNode document = REORDER_WORKOUT_MOVES_MUTATION_DOCUMENT;

  @override
  final String operationName = 'reorderWorkoutMoves';

  @override
  final ReorderWorkoutMovesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ReorderWorkoutMoves$Mutation parse(Map<String, dynamic> json) =>
      ReorderWorkoutMoves$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutMoveArguments extends JsonSerializable with EquatableMixin {
  UpdateWorkoutMoveArguments({required this.data});

  @override
  factory UpdateWorkoutMoveArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutMoveArgumentsFromJson(json);

  late UpdateWorkoutMoveInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutMoveArgumentsToJson(this);
}

final UPDATE_WORKOUT_MOVE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutMove'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutMoveInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutMove'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutMove'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipment'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Move'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Move'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'MoveType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'MoveType'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BodyAreaMoveScores'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'score'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'BodyArea'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'BodyArea'),
                                    directives: [])
                              ]))
                        ])),
                    FieldNode(
                        name: NameNode(value: 'RequiredEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'SelectableEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutMoveMutation extends GraphQLQuery<UpdateWorkoutMove$Mutation,
    UpdateWorkoutMoveArguments> {
  UpdateWorkoutMoveMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_MOVE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutMove';

  @override
  final UpdateWorkoutMoveArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutMove$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutMove$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteCollectionByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteCollectionByIdArguments({required this.id});

  @override
  factory DeleteCollectionByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteCollectionByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteCollectionByIdArgumentsToJson(this);
}

final DELETE_COLLECTION_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteCollectionById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteCollectionById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteCollectionByIdMutation extends GraphQLQuery<
    DeleteCollectionById$Mutation, DeleteCollectionByIdArguments> {
  DeleteCollectionByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_COLLECTION_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteCollectionById';

  @override
  final DeleteCollectionByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteCollectionById$Mutation parse(Map<String, dynamic> json) =>
      DeleteCollectionById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutPlanToCollectionArguments extends JsonSerializable
    with EquatableMixin {
  AddWorkoutPlanToCollectionArguments({required this.data});

  @override
  factory AddWorkoutPlanToCollectionArguments.fromJson(
          Map<String, dynamic> json) =>
      _$AddWorkoutPlanToCollectionArgumentsFromJson(json);

  late AddWorkoutPlanToCollectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$AddWorkoutPlanToCollectionArgumentsToJson(this);
}

final ADD_WORKOUT_PLAN_TO_COLLECTION_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'addWorkoutPlanToCollection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'AddWorkoutPlanToCollectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'addWorkoutPlanToCollection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class AddWorkoutPlanToCollectionMutation extends GraphQLQuery<
    AddWorkoutPlanToCollection$Mutation, AddWorkoutPlanToCollectionArguments> {
  AddWorkoutPlanToCollectionMutation({required this.variables});

  @override
  final DocumentNode document =
      ADD_WORKOUT_PLAN_TO_COLLECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'addWorkoutPlanToCollection';

  @override
  final AddWorkoutPlanToCollectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  AddWorkoutPlanToCollection$Mutation parse(Map<String, dynamic> json) =>
      AddWorkoutPlanToCollection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateCollectionArguments extends JsonSerializable with EquatableMixin {
  CreateCollectionArguments({required this.data});

  @override
  factory CreateCollectionArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateCollectionArgumentsFromJson(json);

  late CreateCollectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateCollectionArgumentsToJson(this);
}

final CREATE_COLLECTION_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createCollection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateCollectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createCollection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateCollectionMutation
    extends GraphQLQuery<CreateCollection$Mutation, CreateCollectionArguments> {
  CreateCollectionMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_COLLECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createCollection';

  @override
  final CreateCollectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateCollection$Mutation parse(Map<String, dynamic> json) =>
      CreateCollection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserCollectionByIdArguments extends JsonSerializable with EquatableMixin {
  UserCollectionByIdArguments({required this.id});

  @override
  factory UserCollectionByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$UserCollectionByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$UserCollectionByIdArgumentsToJson(this);
}

final USER_COLLECTION_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userCollectionById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userCollectionById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserCollectionByIdQuery extends GraphQLQuery<UserCollectionById$Query,
    UserCollectionByIdArguments> {
  UserCollectionByIdQuery({required this.variables});

  @override
  final DocumentNode document = USER_COLLECTION_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'userCollectionById';

  @override
  final UserCollectionByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserCollectionById$Query parse(Map<String, dynamic> json) =>
      UserCollectionById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutToCollectionArguments extends JsonSerializable
    with EquatableMixin {
  AddWorkoutToCollectionArguments({required this.data});

  @override
  factory AddWorkoutToCollectionArguments.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutToCollectionArgumentsFromJson(json);

  late AddWorkoutToCollectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$AddWorkoutToCollectionArgumentsToJson(this);
}

final ADD_WORKOUT_TO_COLLECTION_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'addWorkoutToCollection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'AddWorkoutToCollectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'addWorkoutToCollection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class AddWorkoutToCollectionMutation extends GraphQLQuery<
    AddWorkoutToCollection$Mutation, AddWorkoutToCollectionArguments> {
  AddWorkoutToCollectionMutation({required this.variables});

  @override
  final DocumentNode document = ADD_WORKOUT_TO_COLLECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'addWorkoutToCollection';

  @override
  final AddWorkoutToCollectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  AddWorkoutToCollection$Mutation parse(Map<String, dynamic> json) =>
      AddWorkoutToCollection$Mutation.fromJson(json);
}

final USER_COLLECTIONS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userCollections'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userCollections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserCollectionsQuery
    extends GraphQLQuery<UserCollections$Query, JsonSerializable> {
  UserCollectionsQuery();

  @override
  final DocumentNode document = USER_COLLECTIONS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userCollections';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserCollections$Query parse(Map<String, dynamic> json) =>
      UserCollections$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateCollectionArguments extends JsonSerializable with EquatableMixin {
  UpdateCollectionArguments({required this.data});

  @override
  factory UpdateCollectionArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateCollectionArgumentsFromJson(json);

  late UpdateCollectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateCollectionArgumentsToJson(this);
}

final UPDATE_COLLECTION_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateCollection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateCollectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateCollection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateCollectionMutation
    extends GraphQLQuery<UpdateCollection$Mutation, UpdateCollectionArguments> {
  UpdateCollectionMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_COLLECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateCollection';

  @override
  final UpdateCollectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateCollection$Mutation parse(Map<String, dynamic> json) =>
      UpdateCollection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutPlanFromCollectionArguments extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutPlanFromCollectionArguments({required this.data});

  @override
  factory RemoveWorkoutPlanFromCollectionArguments.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutPlanFromCollectionArgumentsFromJson(json);

  late RemoveWorkoutPlanFromCollectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutPlanFromCollectionArgumentsToJson(this);
}

final REMOVE_WORKOUT_PLAN_FROM_COLLECTION_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'removeWorkoutPlanFromCollection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'RemoveWorkoutPlanFromCollectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'removeWorkoutPlanFromCollection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class RemoveWorkoutPlanFromCollectionMutation extends GraphQLQuery<
    RemoveWorkoutPlanFromCollection$Mutation,
    RemoveWorkoutPlanFromCollectionArguments> {
  RemoveWorkoutPlanFromCollectionMutation({required this.variables});

  @override
  final DocumentNode document =
      REMOVE_WORKOUT_PLAN_FROM_COLLECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'removeWorkoutPlanFromCollection';

  @override
  final RemoveWorkoutPlanFromCollectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  RemoveWorkoutPlanFromCollection$Mutation parse(Map<String, dynamic> json) =>
      RemoveWorkoutPlanFromCollection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutFromCollectionArguments extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutFromCollectionArguments({required this.data});

  @override
  factory RemoveWorkoutFromCollectionArguments.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutFromCollectionArgumentsFromJson(json);

  late RemoveWorkoutFromCollectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutFromCollectionArgumentsToJson(this);
}

final REMOVE_WORKOUT_FROM_COLLECTION_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'removeWorkoutFromCollection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'RemoveWorkoutFromCollectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'removeWorkoutFromCollection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class RemoveWorkoutFromCollectionMutation extends GraphQLQuery<
    RemoveWorkoutFromCollection$Mutation,
    RemoveWorkoutFromCollectionArguments> {
  RemoveWorkoutFromCollectionMutation({required this.variables});

  @override
  final DocumentNode document =
      REMOVE_WORKOUT_FROM_COLLECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'removeWorkoutFromCollection';

  @override
  final RemoveWorkoutFromCollectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  RemoveWorkoutFromCollection$Mutation parse(Map<String, dynamic> json) =>
      RemoveWorkoutFromCollection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class MarkWelcomeTodoItemAsSeenArguments extends JsonSerializable
    with EquatableMixin {
  MarkWelcomeTodoItemAsSeenArguments({required this.data});

  @override
  factory MarkWelcomeTodoItemAsSeenArguments.fromJson(
          Map<String, dynamic> json) =>
      _$MarkWelcomeTodoItemAsSeenArgumentsFromJson(json);

  late MarkWelcomeTodoItemAsSeenInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$MarkWelcomeTodoItemAsSeenArgumentsToJson(this);
}

final MARK_WELCOME_TODO_ITEM_AS_SEEN_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'markWelcomeTodoItemAsSeen'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'MarkWelcomeTodoItemAsSeenInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'markWelcomeTodoItemAsSeen'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class MarkWelcomeTodoItemAsSeenMutation extends GraphQLQuery<
    MarkWelcomeTodoItemAsSeen$Mutation, MarkWelcomeTodoItemAsSeenArguments> {
  MarkWelcomeTodoItemAsSeenMutation({required this.variables});

  @override
  final DocumentNode document =
      MARK_WELCOME_TODO_ITEM_AS_SEEN_MUTATION_DOCUMENT;

  @override
  final String operationName = 'markWelcomeTodoItemAsSeen';

  @override
  final MarkWelcomeTodoItemAsSeenArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  MarkWelcomeTodoItemAsSeen$Mutation parse(Map<String, dynamic> json) =>
      MarkWelcomeTodoItemAsSeen$Mutation.fromJson(json);
}

final WELCOME_TODO_ITEMS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'welcomeTodoItems'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'welcomeTodoItems'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WelcomeTodoItem'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WelcomeTodoItem'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WelcomeTodoItem'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'routeTo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'title'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class WelcomeTodoItemsQuery
    extends GraphQLQuery<WelcomeTodoItems$Query, JsonSerializable> {
  WelcomeTodoItemsQuery();

  @override
  final DocumentNode document = WELCOME_TODO_ITEMS_QUERY_DOCUMENT;

  @override
  final String operationName = 'welcomeTodoItems';

  @override
  List<Object?> get props => [document, operationName];
  @override
  WelcomeTodoItems$Query parse(Map<String, dynamic> json) =>
      WelcomeTodoItems$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutPlanDayWorkoutsArguments extends JsonSerializable
    with EquatableMixin {
  ReorderWorkoutPlanDayWorkoutsArguments({required this.data});

  @override
  factory ReorderWorkoutPlanDayWorkoutsArguments.fromJson(
          Map<String, dynamic> json) =>
      _$ReorderWorkoutPlanDayWorkoutsArgumentsFromJson(json);

  late List<UpdateSortPositionInput> data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$ReorderWorkoutPlanDayWorkoutsArgumentsToJson(this);
}

final REORDER_WORKOUT_PLAN_DAY_WORKOUTS_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'reorderWorkoutPlanDayWorkouts'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: ListTypeNode(
                type: NamedTypeNode(
                    name: NameNode(value: 'UpdateSortPositionInput'),
                    isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'reorderWorkoutPlanDayWorkouts'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'sortPosition'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ]))
]);

class ReorderWorkoutPlanDayWorkoutsMutation extends GraphQLQuery<
    ReorderWorkoutPlanDayWorkouts$Mutation,
    ReorderWorkoutPlanDayWorkoutsArguments> {
  ReorderWorkoutPlanDayWorkoutsMutation({required this.variables});

  @override
  final DocumentNode document =
      REORDER_WORKOUT_PLAN_DAY_WORKOUTS_MUTATION_DOCUMENT;

  @override
  final String operationName = 'reorderWorkoutPlanDayWorkouts';

  @override
  final ReorderWorkoutPlanDayWorkoutsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ReorderWorkoutPlanDayWorkouts$Mutation parse(Map<String, dynamic> json) =>
      ReorderWorkoutPlanDayWorkouts$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanDayWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanDayWorkoutArguments({required this.data});

  @override
  factory CreateWorkoutPlanDayWorkoutArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanDayWorkoutArgumentsFromJson(json);

  late CreateWorkoutPlanDayWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanDayWorkoutArgumentsToJson(this);
}

final CREATE_WORKOUT_PLAN_DAY_WORKOUT_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutPlanDayWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutPlanDayWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutPlanDayWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkout'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'Workout'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutPlanDayWorkoutMutation extends GraphQLQuery<
    CreateWorkoutPlanDayWorkout$Mutation,
    CreateWorkoutPlanDayWorkoutArguments> {
  CreateWorkoutPlanDayWorkoutMutation({required this.variables});

  @override
  final DocumentNode document =
      CREATE_WORKOUT_PLAN_DAY_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutPlanDayWorkout';

  @override
  final CreateWorkoutPlanDayWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutPlanDayWorkout$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutPlanDayWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanDayWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanDayWorkoutArguments({required this.data});

  @override
  factory UpdateWorkoutPlanDayWorkoutArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanDayWorkoutArgumentsFromJson(json);

  late UpdateWorkoutPlanDayWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateWorkoutPlanDayWorkoutArgumentsToJson(this);
}

final UPDATE_WORKOUT_PLAN_DAY_WORKOUT_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutPlanDayWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutPlanDayWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutPlanDayWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkout'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'Workout'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutPlanDayWorkoutMutation extends GraphQLQuery<
    UpdateWorkoutPlanDayWorkout$Mutation,
    UpdateWorkoutPlanDayWorkoutArguments> {
  UpdateWorkoutPlanDayWorkoutMutation({required this.variables});

  @override
  final DocumentNode document =
      UPDATE_WORKOUT_PLAN_DAY_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutPlanDayWorkout';

  @override
  final UpdateWorkoutPlanDayWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutPlanDayWorkout$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutPlanDayWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanDayWorkoutByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanDayWorkoutByIdArguments({required this.id});

  @override
  factory DeleteWorkoutPlanDayWorkoutByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanDayWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanDayWorkoutByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_PLAN_DAY_WORKOUT_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutPlanDayWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutPlanDayWorkoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutPlanDayWorkoutByIdMutation extends GraphQLQuery<
    DeleteWorkoutPlanDayWorkoutById$Mutation,
    DeleteWorkoutPlanDayWorkoutByIdArguments> {
  DeleteWorkoutPlanDayWorkoutByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_WORKOUT_PLAN_DAY_WORKOUT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutPlanDayWorkoutById';

  @override
  final DeleteWorkoutPlanDayWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutPlanDayWorkoutById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutPlanDayWorkoutById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanEnrolmentByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanEnrolmentByIdArguments({required this.id});

  @override
  factory DeleteWorkoutPlanEnrolmentByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanEnrolmentByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanEnrolmentByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_PLAN_ENROLMENT_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutPlanEnrolmentById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutPlanEnrolmentById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutPlanEnrolmentByIdMutation extends GraphQLQuery<
    DeleteWorkoutPlanEnrolmentById$Mutation,
    DeleteWorkoutPlanEnrolmentByIdArguments> {
  DeleteWorkoutPlanEnrolmentByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_WORKOUT_PLAN_ENROLMENT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutPlanEnrolmentById';

  @override
  final DeleteWorkoutPlanEnrolmentByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutPlanEnrolmentById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutPlanEnrolmentById$Mutation.fromJson(json);
}

final WORKOUT_PLAN_ENROLMENTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'workoutPlanEnrolments'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'workoutPlanEnrolments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolmentSummary'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolmentSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolmentSummary'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedWorkoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'WorkoutPlan'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class WorkoutPlanEnrolmentsQuery
    extends GraphQLQuery<WorkoutPlanEnrolments$Query, JsonSerializable> {
  WorkoutPlanEnrolmentsQuery();

  @override
  final DocumentNode document = WORKOUT_PLAN_ENROLMENTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'workoutPlanEnrolments';

  @override
  List<Object?> get props => [document, operationName];
  @override
  WorkoutPlanEnrolments$Query parse(Map<String, dynamic> json) =>
      WorkoutPlanEnrolments$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolmentByIdArguments extends JsonSerializable
    with EquatableMixin {
  WorkoutPlanEnrolmentByIdArguments({required this.id});

  @override
  factory WorkoutPlanEnrolmentByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolmentByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanEnrolmentByIdArgumentsToJson(this);
}

final WORKOUT_PLAN_ENROLMENT_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'workoutPlanEnrolmentById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'workoutPlanEnrolmentById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanEnrolment'),
                        directives: []),
                    FieldNode(
                        name:
                            NameNode(value: 'CompletedWorkoutPlanDayWorkouts'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(
                                  value: 'CompletedWorkoutPlanDayWorkout'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'User'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserAvatarData'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlan'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanData'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanDayWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanDays'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanReviews'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanEnrolments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'CompletedWorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class WorkoutPlanEnrolmentByIdQuery extends GraphQLQuery<
    WorkoutPlanEnrolmentById$Query, WorkoutPlanEnrolmentByIdArguments> {
  WorkoutPlanEnrolmentByIdQuery({required this.variables});

  @override
  final DocumentNode document = WORKOUT_PLAN_ENROLMENT_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'workoutPlanEnrolmentById';

  @override
  final WorkoutPlanEnrolmentByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  WorkoutPlanEnrolmentById$Query parse(Map<String, dynamic> json) =>
      WorkoutPlanEnrolmentById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ClearScheduleForPlanEnrolmentArguments extends JsonSerializable
    with EquatableMixin {
  ClearScheduleForPlanEnrolmentArguments({required this.enrolmentId});

  @override
  factory ClearScheduleForPlanEnrolmentArguments.fromJson(
          Map<String, dynamic> json) =>
      _$ClearScheduleForPlanEnrolmentArgumentsFromJson(json);

  late String enrolmentId;

  @override
  List<Object?> get props => [enrolmentId];
  @override
  Map<String, dynamic> toJson() =>
      _$ClearScheduleForPlanEnrolmentArgumentsToJson(this);
}

final CLEAR_SCHEDULE_FOR_PLAN_ENROLMENT_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'clearScheduleForPlanEnrolment'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'enrolmentId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clearScheduleForPlanEnrolment'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'enrolmentId'),
                  value: VariableNode(name: NameNode(value: 'enrolmentId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'CompletedWorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanDayWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClearScheduleForPlanEnrolmentMutation extends GraphQLQuery<
    ClearScheduleForPlanEnrolment$Mutation,
    ClearScheduleForPlanEnrolmentArguments> {
  ClearScheduleForPlanEnrolmentMutation({required this.variables});

  @override
  final DocumentNode document =
      CLEAR_SCHEDULE_FOR_PLAN_ENROLMENT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'clearScheduleForPlanEnrolment';

  @override
  final ClearScheduleForPlanEnrolmentArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClearScheduleForPlanEnrolment$Mutation parse(Map<String, dynamic> json) =>
      ClearScheduleForPlanEnrolment$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanEnrolmentArguments extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanEnrolmentArguments({required this.workoutPlanId});

  @override
  factory CreateWorkoutPlanEnrolmentArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanEnrolmentArgumentsFromJson(json);

  late String workoutPlanId;

  @override
  List<Object?> get props => [workoutPlanId];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanEnrolmentArgumentsToJson(this);
}

final CREATE_WORKOUT_PLAN_ENROLMENT_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutPlanEnrolment'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'workoutPlanId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutPlanEnrolment'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'workoutPlanId'),
                  value: VariableNode(name: NameNode(value: 'workoutPlanId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanEnrolment'),
                        directives: []),
                    FieldNode(
                        name:
                            NameNode(value: 'CompletedWorkoutPlanDayWorkouts'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(
                                  value: 'CompletedWorkoutPlanDayWorkout'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'User'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserAvatarData'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlan'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanData'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanDayWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanDays'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanReviews'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanEnrolments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'CompletedWorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutPlanEnrolmentMutation extends GraphQLQuery<
    CreateWorkoutPlanEnrolment$Mutation, CreateWorkoutPlanEnrolmentArguments> {
  CreateWorkoutPlanEnrolmentMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_PLAN_ENROLMENT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutPlanEnrolment';

  @override
  final CreateWorkoutPlanEnrolmentArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutPlanEnrolment$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutPlanEnrolment$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteCompletedWorkoutPlanDayWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  DeleteCompletedWorkoutPlanDayWorkoutArguments({required this.data});

  @override
  factory DeleteCompletedWorkoutPlanDayWorkoutArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteCompletedWorkoutPlanDayWorkoutArgumentsFromJson(json);

  late DeleteCompletedWorkoutPlanDayWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteCompletedWorkoutPlanDayWorkoutArgumentsToJson(this);
}

final DELETE_COMPLETED_WORKOUT_PLAN_DAY_WORKOUT_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteCompletedWorkoutPlanDayWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(
                    value: 'DeleteCompletedWorkoutPlanDayWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteCompletedWorkoutPlanDayWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'CompletedWorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanDayWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteCompletedWorkoutPlanDayWorkoutMutation extends GraphQLQuery<
    DeleteCompletedWorkoutPlanDayWorkout$Mutation,
    DeleteCompletedWorkoutPlanDayWorkoutArguments> {
  DeleteCompletedWorkoutPlanDayWorkoutMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_COMPLETED_WORKOUT_PLAN_DAY_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteCompletedWorkoutPlanDayWorkout';

  @override
  final DeleteCompletedWorkoutPlanDayWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteCompletedWorkoutPlanDayWorkout$Mutation parse(
          Map<String, dynamic> json) =>
      DeleteCompletedWorkoutPlanDayWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ClearWorkoutPlanEnrolmentProgressArguments extends JsonSerializable
    with EquatableMixin {
  ClearWorkoutPlanEnrolmentProgressArguments({required this.enrolmentId});

  @override
  factory ClearWorkoutPlanEnrolmentProgressArguments.fromJson(
          Map<String, dynamic> json) =>
      _$ClearWorkoutPlanEnrolmentProgressArgumentsFromJson(json);

  late String enrolmentId;

  @override
  List<Object?> get props => [enrolmentId];
  @override
  Map<String, dynamic> toJson() =>
      _$ClearWorkoutPlanEnrolmentProgressArgumentsToJson(this);
}

final CLEAR_WORKOUT_PLAN_ENROLMENT_PROGRESS_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'clearWorkoutPlanEnrolmentProgress'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'enrolmentId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clearWorkoutPlanEnrolmentProgress'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'enrolmentId'),
                  value: VariableNode(name: NameNode(value: 'enrolmentId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'CompletedWorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanDayWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClearWorkoutPlanEnrolmentProgressMutation extends GraphQLQuery<
    ClearWorkoutPlanEnrolmentProgress$Mutation,
    ClearWorkoutPlanEnrolmentProgressArguments> {
  ClearWorkoutPlanEnrolmentProgressMutation({required this.variables});

  @override
  final DocumentNode document =
      CLEAR_WORKOUT_PLAN_ENROLMENT_PROGRESS_MUTATION_DOCUMENT;

  @override
  final String operationName = 'clearWorkoutPlanEnrolmentProgress';

  @override
  final ClearWorkoutPlanEnrolmentProgressArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClearWorkoutPlanEnrolmentProgress$Mutation parse(Map<String, dynamic> json) =>
      ClearWorkoutPlanEnrolmentProgress$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateScheduleForPlanEnrolmentArguments extends JsonSerializable
    with EquatableMixin {
  CreateScheduleForPlanEnrolmentArguments({required this.data});

  @override
  factory CreateScheduleForPlanEnrolmentArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateScheduleForPlanEnrolmentArgumentsFromJson(json);

  late CreateScheduleForPlanEnrolmentInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateScheduleForPlanEnrolmentArgumentsToJson(this);
}

final CREATE_SCHEDULE_FOR_PLAN_ENROLMENT_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createScheduleForPlanEnrolment'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateScheduleForPlanEnrolmentInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createScheduleForPlanEnrolment'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'CompletedWorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanDayWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateScheduleForPlanEnrolmentMutation extends GraphQLQuery<
    CreateScheduleForPlanEnrolment$Mutation,
    CreateScheduleForPlanEnrolmentArguments> {
  CreateScheduleForPlanEnrolmentMutation({required this.variables});

  @override
  final DocumentNode document =
      CREATE_SCHEDULE_FOR_PLAN_ENROLMENT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createScheduleForPlanEnrolment';

  @override
  final CreateScheduleForPlanEnrolmentArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateScheduleForPlanEnrolment$Mutation parse(Map<String, dynamic> json) =>
      CreateScheduleForPlanEnrolment$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateCompletedWorkoutPlanDayWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  CreateCompletedWorkoutPlanDayWorkoutArguments({required this.data});

  @override
  factory CreateCompletedWorkoutPlanDayWorkoutArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateCompletedWorkoutPlanDayWorkoutArgumentsFromJson(json);

  late CreateCompletedWorkoutPlanDayWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateCompletedWorkoutPlanDayWorkoutArgumentsToJson(this);
}

final CREATE_COMPLETED_WORKOUT_PLAN_DAY_WORKOUT_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createCompletedWorkoutPlanDayWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(
                    value: 'CreateCompletedWorkoutPlanDayWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createCompletedWorkoutPlanDayWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'CompletedWorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanDayWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateCompletedWorkoutPlanDayWorkoutMutation extends GraphQLQuery<
    CreateCompletedWorkoutPlanDayWorkout$Mutation,
    CreateCompletedWorkoutPlanDayWorkoutArguments> {
  CreateCompletedWorkoutPlanDayWorkoutMutation({required this.variables});

  @override
  final DocumentNode document =
      CREATE_COMPLETED_WORKOUT_PLAN_DAY_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createCompletedWorkoutPlanDayWorkout';

  @override
  final CreateCompletedWorkoutPlanDayWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateCompletedWorkoutPlanDayWorkout$Mutation parse(
          Map<String, dynamic> json) =>
      CreateCompletedWorkoutPlanDayWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class MoveWorkoutPlanDayToAnotherDayArguments extends JsonSerializable
    with EquatableMixin {
  MoveWorkoutPlanDayToAnotherDayArguments({required this.data});

  @override
  factory MoveWorkoutPlanDayToAnotherDayArguments.fromJson(
          Map<String, dynamic> json) =>
      _$MoveWorkoutPlanDayToAnotherDayArgumentsFromJson(json);

  late MoveWorkoutPlanDayToAnotherDayInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$MoveWorkoutPlanDayToAnotherDayArgumentsToJson(this);
}

final MOVE_WORKOUT_PLAN_DAY_TO_ANOTHER_DAY_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'moveWorkoutPlanDayToAnotherDay'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'MoveWorkoutPlanDayToAnotherDayInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'moveWorkoutPlanDayToAnotherDay'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class MoveWorkoutPlanDayToAnotherDayMutation extends GraphQLQuery<
    MoveWorkoutPlanDayToAnotherDay$Mutation,
    MoveWorkoutPlanDayToAnotherDayArguments> {
  MoveWorkoutPlanDayToAnotherDayMutation({required this.variables});

  @override
  final DocumentNode document =
      MOVE_WORKOUT_PLAN_DAY_TO_ANOTHER_DAY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'moveWorkoutPlanDayToAnotherDay';

  @override
  final MoveWorkoutPlanDayToAnotherDayArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  MoveWorkoutPlanDayToAnotherDay$Mutation parse(Map<String, dynamic> json) =>
      MoveWorkoutPlanDayToAnotherDay$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanDaysByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanDaysByIdArguments({required this.ids});

  @override
  factory DeleteWorkoutPlanDaysByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanDaysByIdArgumentsFromJson(json);

  late List<String> ids;

  @override
  List<Object?> get props => [ids];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanDaysByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_PLAN_DAYS_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutPlanDaysById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'ids')),
            type: ListTypeNode(
                type:
                    NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutPlanDaysById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'ids'),
                  value: VariableNode(name: NameNode(value: 'ids')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutPlanDaysByIdMutation extends GraphQLQuery<
    DeleteWorkoutPlanDaysById$Mutation, DeleteWorkoutPlanDaysByIdArguments> {
  DeleteWorkoutPlanDaysByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_WORKOUT_PLAN_DAYS_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutPlanDaysById';

  @override
  final DeleteWorkoutPlanDaysByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutPlanDaysById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutPlanDaysById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanDayArguments extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanDayArguments({required this.data});

  @override
  factory UpdateWorkoutPlanDayArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanDayArgumentsFromJson(json);

  late UpdateWorkoutPlanDayInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanDayArgumentsToJson(this);
}

final UPDATE_WORKOUT_PLAN_DAY_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutPlanDay'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutPlanDayInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutPlanDay'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutPlanDayMutation extends GraphQLQuery<
    UpdateWorkoutPlanDay$Mutation, UpdateWorkoutPlanDayArguments> {
  UpdateWorkoutPlanDayMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_PLAN_DAY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutPlanDay';

  @override
  final UpdateWorkoutPlanDayArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutPlanDay$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutPlanDay$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanDayWithWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanDayWithWorkoutArguments({required this.data});

  @override
  factory CreateWorkoutPlanDayWithWorkoutArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanDayWithWorkoutArgumentsFromJson(json);

  late CreateWorkoutPlanDayWithWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanDayWithWorkoutArgumentsToJson(this);
}

final CREATE_WORKOUT_PLAN_DAY_WITH_WORKOUT_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutPlanDayWithWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutPlanDayWithWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutPlanDayWithWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutPlanDayWithWorkoutMutation extends GraphQLQuery<
    CreateWorkoutPlanDayWithWorkout$Mutation,
    CreateWorkoutPlanDayWithWorkoutArguments> {
  CreateWorkoutPlanDayWithWorkoutMutation({required this.variables});

  @override
  final DocumentNode document =
      CREATE_WORKOUT_PLAN_DAY_WITH_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutPlanDayWithWorkout';

  @override
  final CreateWorkoutPlanDayWithWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutPlanDayWithWorkout$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutPlanDayWithWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CopyWorkoutPlanDayToAnotherDayArguments extends JsonSerializable
    with EquatableMixin {
  CopyWorkoutPlanDayToAnotherDayArguments({required this.data});

  @override
  factory CopyWorkoutPlanDayToAnotherDayArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CopyWorkoutPlanDayToAnotherDayArgumentsFromJson(json);

  late CopyWorkoutPlanDayToAnotherDayInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CopyWorkoutPlanDayToAnotherDayArgumentsToJson(this);
}

final COPY_WORKOUT_PLAN_DAY_TO_ANOTHER_DAY_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'copyWorkoutPlanDayToAnotherDay'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CopyWorkoutPlanDayToAnotherDayInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'copyWorkoutPlanDayToAnotherDay'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CopyWorkoutPlanDayToAnotherDayMutation extends GraphQLQuery<
    CopyWorkoutPlanDayToAnotherDay$Mutation,
    CopyWorkoutPlanDayToAnotherDayArguments> {
  CopyWorkoutPlanDayToAnotherDayMutation({required this.variables});

  @override
  final DocumentNode document =
      COPY_WORKOUT_PLAN_DAY_TO_ANOTHER_DAY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'copyWorkoutPlanDayToAnotherDay';

  @override
  final CopyWorkoutPlanDayToAnotherDayArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CopyWorkoutPlanDayToAnotherDay$Mutation parse(Map<String, dynamic> json) =>
      CopyWorkoutPlanDayToAnotherDay$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class LoggedWorkoutByIdArguments extends JsonSerializable with EquatableMixin {
  LoggedWorkoutByIdArguments({required this.id});

  @override
  factory LoggedWorkoutByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$LoggedWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$LoggedWorkoutByIdArgumentsToJson(this);
}

final LOGGED_WORKOUT_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'loggedWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'loggedWorkoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LoggedWorkout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'GymProfile'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'GymProfile'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutGoals'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutGoal'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'LoggedWorkoutSections'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'LoggedWorkoutSection'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutSectionType'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'LoggedWorkoutSets'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'LoggedWorkoutSet'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'LoggedWorkoutMoves'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'LoggedWorkoutMove'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'Move'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Move'),
                                          directives: []),
                                      FieldNode(
                                          name: NameNode(value: 'MoveType'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'MoveType'),
                                                directives: [])
                                          ])),
                                      FieldNode(
                                          name: NameNode(
                                              value: 'BodyAreaMoveScores'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FieldNode(
                                                name: NameNode(value: 'score'),
                                                alias: null,
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null),
                                            FieldNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                alias: null,
                                                arguments: [],
                                                directives: [],
                                                selectionSet: SelectionSetNode(
                                                    selections: [
                                                      FragmentSpreadNode(
                                                          name: NameNode(
                                                              value:
                                                                  'BodyArea'),
                                                          directives: [])
                                                    ]))
                                          ])),
                                      FieldNode(
                                          name: NameNode(
                                              value: 'RequiredEquipments'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: SelectionSetNode(
                                              selections: [
                                                FragmentSpreadNode(
                                                    name: NameNode(
                                                        value: 'Equipment'),
                                                    directives: [])
                                              ])),
                                      FieldNode(
                                          name: NameNode(
                                              value: 'SelectableEquipments'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: SelectionSetNode(
                                              selections: [
                                                FragmentSpreadNode(
                                                    name: NameNode(
                                                        value: 'Equipment'),
                                                    directives: [])
                                              ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'Equipment'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionRoundNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeTakenSeconds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeTakenSeconds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class LoggedWorkoutByIdQuery
    extends GraphQLQuery<LoggedWorkoutById$Query, LoggedWorkoutByIdArguments> {
  LoggedWorkoutByIdQuery({required this.variables});

  @override
  final DocumentNode document = LOGGED_WORKOUT_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'loggedWorkoutById';

  @override
  final LoggedWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  LoggedWorkoutById$Query parse(Map<String, dynamic> json) =>
      LoggedWorkoutById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteLoggedWorkoutByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteLoggedWorkoutByIdArguments({required this.id});

  @override
  factory DeleteLoggedWorkoutByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteLoggedWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteLoggedWorkoutByIdArgumentsToJson(this);
}

final DELETE_LOGGED_WORKOUT_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteLoggedWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteLoggedWorkoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteLoggedWorkoutByIdMutation extends GraphQLQuery<
    DeleteLoggedWorkoutById$Mutation, DeleteLoggedWorkoutByIdArguments> {
  DeleteLoggedWorkoutByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_LOGGED_WORKOUT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteLoggedWorkoutById';

  @override
  final DeleteLoggedWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteLoggedWorkoutById$Mutation parse(Map<String, dynamic> json) =>
      DeleteLoggedWorkoutById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class LifetimeLogStatsSummaryArguments extends JsonSerializable
    with EquatableMixin {
  LifetimeLogStatsSummaryArguments({required this.userId});

  @override
  factory LifetimeLogStatsSummaryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$LifetimeLogStatsSummaryArgumentsFromJson(json);

  late String userId;

  @override
  List<Object?> get props => [userId];
  @override
  Map<String, dynamic> toJson() =>
      _$LifetimeLogStatsSummaryArgumentsToJson(this);
}

final LIFETIME_LOG_STATS_SUMMARY_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'lifetimeLogStatsSummary'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'lifetimeLogStatsSummary'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userId'),
                  value: VariableNode(name: NameNode(value: 'userId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LifetimeLogStatsSummary'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LifetimeLogStatsSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LifetimeLogStatsSummary'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'minutesWorked'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sessionsLogged'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class LifetimeLogStatsSummaryQuery extends GraphQLQuery<
    LifetimeLogStatsSummary$Query, LifetimeLogStatsSummaryArguments> {
  LifetimeLogStatsSummaryQuery({required this.variables});

  @override
  final DocumentNode document = LIFETIME_LOG_STATS_SUMMARY_QUERY_DOCUMENT;

  @override
  final String operationName = 'lifetimeLogStatsSummary';

  @override
  final LifetimeLogStatsSummaryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  LifetimeLogStatsSummary$Query parse(Map<String, dynamic> json) =>
      LifetimeLogStatsSummary$Query.fromJson(json);
}

final USER_LOGGED_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userLoggedWorkouts'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userLoggedWorkouts'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LoggedWorkout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'GymProfile'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'GymProfile'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutGoals'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutGoal'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'LoggedWorkoutSections'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'LoggedWorkoutSection'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutSectionType'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'LoggedWorkoutSets'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'LoggedWorkoutSet'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'LoggedWorkoutMoves'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'LoggedWorkoutMove'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'Move'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Move'),
                                          directives: []),
                                      FieldNode(
                                          name: NameNode(value: 'MoveType'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'MoveType'),
                                                directives: [])
                                          ])),
                                      FieldNode(
                                          name: NameNode(
                                              value: 'BodyAreaMoveScores'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FieldNode(
                                                name: NameNode(value: 'score'),
                                                alias: null,
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null),
                                            FieldNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                alias: null,
                                                arguments: [],
                                                directives: [],
                                                selectionSet: SelectionSetNode(
                                                    selections: [
                                                      FragmentSpreadNode(
                                                          name: NameNode(
                                                              value:
                                                                  'BodyArea'),
                                                          directives: [])
                                                    ]))
                                          ])),
                                      FieldNode(
                                          name: NameNode(
                                              value: 'RequiredEquipments'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: SelectionSetNode(
                                              selections: [
                                                FragmentSpreadNode(
                                                    name: NameNode(
                                                        value: 'Equipment'),
                                                    directives: [])
                                              ])),
                                      FieldNode(
                                          name: NameNode(
                                              value: 'SelectableEquipments'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: SelectionSetNode(
                                              selections: [
                                                FragmentSpreadNode(
                                                    name: NameNode(
                                                        value: 'Equipment'),
                                                    directives: [])
                                              ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'Equipment'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionRoundNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeTakenSeconds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeTakenSeconds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserLoggedWorkoutsQuery
    extends GraphQLQuery<UserLoggedWorkouts$Query, JsonSerializable> {
  UserLoggedWorkoutsQuery();

  @override
  final DocumentNode document = USER_LOGGED_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userLoggedWorkouts';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserLoggedWorkouts$Query parse(Map<String, dynamic> json) =>
      UserLoggedWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkoutArguments({required this.data});

  @override
  factory UpdateLoggedWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutArgumentsFromJson(json);

  late UpdateLoggedWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkoutArgumentsToJson(this);
}

final UPDATE_LOGGED_WORKOUT_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateLoggedWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateLoggedWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateLoggedWorkout'),
            alias: NameNode(value: 'updateLoggedWorkout'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LoggedWorkout'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateLoggedWorkoutMutation extends GraphQLQuery<
    UpdateLoggedWorkout$Mutation, UpdateLoggedWorkoutArguments> {
  UpdateLoggedWorkoutMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_LOGGED_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateLoggedWorkout';

  @override
  final UpdateLoggedWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateLoggedWorkout$Mutation parse(Map<String, dynamic> json) =>
      UpdateLoggedWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateLoggedWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  CreateLoggedWorkoutArguments({required this.data});

  @override
  factory CreateLoggedWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateLoggedWorkoutArgumentsFromJson(json);

  late CreateLoggedWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateLoggedWorkoutArgumentsToJson(this);
}

final CREATE_LOGGED_WORKOUT_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createLoggedWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateLoggedWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createLoggedWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LoggedWorkout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'GymProfile'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'GymProfile'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutGoals'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutGoal'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'LoggedWorkoutSections'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'LoggedWorkoutSection'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutSectionType'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'LoggedWorkoutSets'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'LoggedWorkoutSet'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'LoggedWorkoutMoves'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'LoggedWorkoutMove'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'Move'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Move'),
                                          directives: []),
                                      FieldNode(
                                          name: NameNode(value: 'MoveType'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'MoveType'),
                                                directives: [])
                                          ])),
                                      FieldNode(
                                          name: NameNode(
                                              value: 'BodyAreaMoveScores'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FieldNode(
                                                name: NameNode(value: 'score'),
                                                alias: null,
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null),
                                            FieldNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                alias: null,
                                                arguments: [],
                                                directives: [],
                                                selectionSet: SelectionSetNode(
                                                    selections: [
                                                      FragmentSpreadNode(
                                                          name: NameNode(
                                                              value:
                                                                  'BodyArea'),
                                                          directives: [])
                                                    ]))
                                          ])),
                                      FieldNode(
                                          name: NameNode(
                                              value: 'RequiredEquipments'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: SelectionSetNode(
                                              selections: [
                                                FragmentSpreadNode(
                                                    name: NameNode(
                                                        value: 'Equipment'),
                                                    directives: [])
                                              ])),
                                      FieldNode(
                                          name: NameNode(
                                              value: 'SelectableEquipments'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: SelectionSetNode(
                                              selections: [
                                                FragmentSpreadNode(
                                                    name: NameNode(
                                                        value: 'Equipment'),
                                                    directives: [])
                                              ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'Equipment'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionRoundNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeTakenSeconds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeTakenSeconds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateLoggedWorkoutMutation extends GraphQLQuery<
    CreateLoggedWorkout$Mutation, CreateLoggedWorkoutArguments> {
  CreateLoggedWorkoutMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_LOGGED_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createLoggedWorkout';

  @override
  final CreateLoggedWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateLoggedWorkout$Mutation parse(Map<String, dynamic> json) =>
      CreateLoggedWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteLoggedWorkoutMoveArguments extends JsonSerializable
    with EquatableMixin {
  DeleteLoggedWorkoutMoveArguments({required this.id});

  @override
  factory DeleteLoggedWorkoutMoveArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteLoggedWorkoutMoveArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteLoggedWorkoutMoveArgumentsToJson(this);
}

final DELETE_LOGGED_WORKOUT_MOVE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteLoggedWorkoutMove'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteLoggedWorkoutMove'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteLoggedWorkoutMoveMutation extends GraphQLQuery<
    DeleteLoggedWorkoutMove$Mutation, DeleteLoggedWorkoutMoveArguments> {
  DeleteLoggedWorkoutMoveMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_LOGGED_WORKOUT_MOVE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteLoggedWorkoutMove';

  @override
  final DeleteLoggedWorkoutMoveArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteLoggedWorkoutMove$Mutation parse(Map<String, dynamic> json) =>
      DeleteLoggedWorkoutMove$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutMoveArguments extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkoutMoveArguments({required this.data});

  @override
  factory UpdateLoggedWorkoutMoveArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutMoveArgumentsFromJson(json);

  late UpdateLoggedWorkoutMoveInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateLoggedWorkoutMoveArgumentsToJson(this);
}

final UPDATE_LOGGED_WORKOUT_MOVE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateLoggedWorkoutMove'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateLoggedWorkoutMoveInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateLoggedWorkoutMove'),
            alias: NameNode(value: 'updateLoggedWorkoutMove'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LoggedWorkoutMove'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateLoggedWorkoutMoveMutation extends GraphQLQuery<
    UpdateLoggedWorkoutMove$Mutation, UpdateLoggedWorkoutMoveArguments> {
  UpdateLoggedWorkoutMoveMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_LOGGED_WORKOUT_MOVE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateLoggedWorkoutMove';

  @override
  final UpdateLoggedWorkoutMoveArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateLoggedWorkoutMove$Mutation parse(Map<String, dynamic> json) =>
      UpdateLoggedWorkoutMove$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutSectionArguments extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkoutSectionArguments({required this.data});

  @override
  factory UpdateLoggedWorkoutSectionArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutSectionArgumentsFromJson(json);

  late UpdateLoggedWorkoutSectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateLoggedWorkoutSectionArgumentsToJson(this);
}

final UPDATE_LOGGED_WORKOUT_SECTION_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateLoggedWorkoutSection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateLoggedWorkoutSectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateLoggedWorkoutSection'),
            alias: NameNode(value: 'updateLoggedWorkoutSection'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LoggedWorkoutSection'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeTakenSeconds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateLoggedWorkoutSectionMutation extends GraphQLQuery<
    UpdateLoggedWorkoutSection$Mutation, UpdateLoggedWorkoutSectionArguments> {
  UpdateLoggedWorkoutSectionMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_LOGGED_WORKOUT_SECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateLoggedWorkoutSection';

  @override
  final UpdateLoggedWorkoutSectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateLoggedWorkoutSection$Mutation parse(Map<String, dynamic> json) =>
      UpdateLoggedWorkoutSection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutSetArguments extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkoutSetArguments({required this.data});

  @override
  factory UpdateLoggedWorkoutSetArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutSetArgumentsFromJson(json);

  late UpdateLoggedWorkoutSetInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateLoggedWorkoutSetArgumentsToJson(this);
}

final UPDATE_LOGGED_WORKOUT_SET_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateLoggedWorkoutSet'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateLoggedWorkoutSetInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateLoggedWorkoutSet'),
            alias: NameNode(value: 'updateLoggedWorkoutSet'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LoggedWorkoutSet'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionRoundNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeTakenSeconds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateLoggedWorkoutSetMutation extends GraphQLQuery<
    UpdateLoggedWorkoutSet$Mutation, UpdateLoggedWorkoutSetArguments> {
  UpdateLoggedWorkoutSetMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_LOGGED_WORKOUT_SET_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateLoggedWorkoutSet';

  @override
  final UpdateLoggedWorkoutSetArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateLoggedWorkoutSet$Mutation parse(Map<String, dynamic> json) =>
      UpdateLoggedWorkoutSet$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class LogCountByWorkoutArguments extends JsonSerializable with EquatableMixin {
  LogCountByWorkoutArguments({required this.id});

  @override
  factory LogCountByWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$LogCountByWorkoutArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$LogCountByWorkoutArgumentsToJson(this);
}

final LOG_COUNT_BY_WORKOUT_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'logCountByWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'logCountByWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class LogCountByWorkoutQuery
    extends GraphQLQuery<LogCountByWorkout$Query, LogCountByWorkoutArguments> {
  LogCountByWorkoutQuery({required this.variables});

  @override
  final DocumentNode document = LOG_COUNT_BY_WORKOUT_QUERY_DOCUMENT;

  @override
  final String operationName = 'logCountByWorkout';

  @override
  final LogCountByWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  LogCountByWorkout$Query parse(Map<String, dynamic> json) =>
      LogCountByWorkout$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanReviewByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanReviewByIdArguments({required this.id});

  @override
  factory DeleteWorkoutPlanReviewByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanReviewByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanReviewByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_PLAN_REVIEW_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutPlanReviewById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutPlanReviewById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutPlanReviewByIdMutation extends GraphQLQuery<
    DeleteWorkoutPlanReviewById$Mutation,
    DeleteWorkoutPlanReviewByIdArguments> {
  DeleteWorkoutPlanReviewByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_WORKOUT_PLAN_REVIEW_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutPlanReviewById';

  @override
  final DeleteWorkoutPlanReviewByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutPlanReviewById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutPlanReviewById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanReviewArguments extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanReviewArguments({required this.data});

  @override
  factory UpdateWorkoutPlanReviewArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanReviewArgumentsFromJson(json);

  late UpdateWorkoutPlanReviewInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateWorkoutPlanReviewArgumentsToJson(this);
}

final UPDATE_WORKOUT_PLAN_REVIEW_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutPlanReview'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutPlanReviewInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutPlanReview'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutPlanReviewMutation extends GraphQLQuery<
    UpdateWorkoutPlanReview$Mutation, UpdateWorkoutPlanReviewArguments> {
  UpdateWorkoutPlanReviewMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_PLAN_REVIEW_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutPlanReview';

  @override
  final UpdateWorkoutPlanReviewArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutPlanReview$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutPlanReview$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanReviewArguments extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanReviewArguments({required this.data});

  @override
  factory CreateWorkoutPlanReviewArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanReviewArgumentsFromJson(json);

  late CreateWorkoutPlanReviewInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanReviewArgumentsToJson(this);
}

final CREATE_WORKOUT_PLAN_REVIEW_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutPlanReview'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutPlanReviewInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutPlanReview'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutPlanReviewMutation extends GraphQLQuery<
    CreateWorkoutPlanReview$Mutation, CreateWorkoutPlanReviewArguments> {
  CreateWorkoutPlanReviewMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_PLAN_REVIEW_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutPlanReview';

  @override
  final CreateWorkoutPlanReviewArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutPlanReview$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutPlanReview$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutFromClubArguments extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutFromClubArguments(
      {required this.workoutId, required this.clubId});

  @override
  factory RemoveWorkoutFromClubArguments.fromJson(Map<String, dynamic> json) =>
      _$RemoveWorkoutFromClubArgumentsFromJson(json);

  late String workoutId;

  late String clubId;

  @override
  List<Object?> get props => [workoutId, clubId];
  @override
  Map<String, dynamic> toJson() => _$RemoveWorkoutFromClubArgumentsToJson(this);
}

final REMOVE_WORKOUT_FROM_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'removeWorkoutFromClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'workoutId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'removeWorkoutFromClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'workoutId'),
                  value: VariableNode(name: NameNode(value: 'workoutId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubWorkouts'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubWorkouts'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubWorkouts'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workouts'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class RemoveWorkoutFromClubMutation extends GraphQLQuery<
    RemoveWorkoutFromClub$Mutation, RemoveWorkoutFromClubArguments> {
  RemoveWorkoutFromClubMutation({required this.variables});

  @override
  final DocumentNode document = REMOVE_WORKOUT_FROM_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'removeWorkoutFromClub';

  @override
  final RemoveWorkoutFromClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  RemoveWorkoutFromClub$Mutation parse(Map<String, dynamic> json) =>
      RemoveWorkoutFromClub$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutPlanFromClubArguments extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutPlanFromClubArguments(
      {required this.workoutPlanId, required this.clubId});

  @override
  factory RemoveWorkoutPlanFromClubArguments.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutPlanFromClubArgumentsFromJson(json);

  late String workoutPlanId;

  late String clubId;

  @override
  List<Object?> get props => [workoutPlanId, clubId];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutPlanFromClubArgumentsToJson(this);
}

final REMOVE_WORKOUT_PLAN_FROM_CLUB_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'removeWorkoutPlanFromClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'workoutPlanId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'removeWorkoutPlanFromClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'workoutPlanId'),
                  value: VariableNode(name: NameNode(value: 'workoutPlanId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubWorkoutPlans'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubWorkoutPlans'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubWorkoutPlans'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlans'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class RemoveWorkoutPlanFromClubMutation extends GraphQLQuery<
    RemoveWorkoutPlanFromClub$Mutation, RemoveWorkoutPlanFromClubArguments> {
  RemoveWorkoutPlanFromClubMutation({required this.variables});

  @override
  final DocumentNode document = REMOVE_WORKOUT_PLAN_FROM_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'removeWorkoutPlanFromClub';

  @override
  final RemoveWorkoutPlanFromClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  RemoveWorkoutPlanFromClub$Mutation parse(Map<String, dynamic> json) =>
      RemoveWorkoutPlanFromClub$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutToClubArguments extends JsonSerializable with EquatableMixin {
  AddWorkoutToClubArguments({required this.workoutId, required this.clubId});

  @override
  factory AddWorkoutToClubArguments.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutToClubArgumentsFromJson(json);

  late String workoutId;

  late String clubId;

  @override
  List<Object?> get props => [workoutId, clubId];
  @override
  Map<String, dynamic> toJson() => _$AddWorkoutToClubArgumentsToJson(this);
}

final ADD_WORKOUT_TO_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'addWorkoutToClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'workoutId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'addWorkoutToClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'workoutId'),
                  value: VariableNode(name: NameNode(value: 'workoutId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubWorkouts'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubWorkouts'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubWorkouts'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workouts'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class AddWorkoutToClubMutation
    extends GraphQLQuery<AddWorkoutToClub$Mutation, AddWorkoutToClubArguments> {
  AddWorkoutToClubMutation({required this.variables});

  @override
  final DocumentNode document = ADD_WORKOUT_TO_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'addWorkoutToClub';

  @override
  final AddWorkoutToClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  AddWorkoutToClub$Mutation parse(Map<String, dynamic> json) =>
      AddWorkoutToClub$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutPlanToClubArguments extends JsonSerializable
    with EquatableMixin {
  AddWorkoutPlanToClubArguments(
      {required this.workoutPlanId, required this.clubId});

  @override
  factory AddWorkoutPlanToClubArguments.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutPlanToClubArgumentsFromJson(json);

  late String workoutPlanId;

  late String clubId;

  @override
  List<Object?> get props => [workoutPlanId, clubId];
  @override
  Map<String, dynamic> toJson() => _$AddWorkoutPlanToClubArgumentsToJson(this);
}

final ADD_WORKOUT_PLAN_TO_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'addWorkoutPlanToClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'workoutPlanId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'addWorkoutPlanToClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'workoutPlanId'),
                  value: VariableNode(name: NameNode(value: 'workoutPlanId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubWorkoutPlans'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubWorkoutPlans'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubWorkoutPlans'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlans'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class AddWorkoutPlanToClubMutation extends GraphQLQuery<
    AddWorkoutPlanToClub$Mutation, AddWorkoutPlanToClubArguments> {
  AddWorkoutPlanToClubMutation({required this.variables});

  @override
  final DocumentNode document = ADD_WORKOUT_PLAN_TO_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'addWorkoutPlanToClub';

  @override
  final AddWorkoutPlanToClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  AddWorkoutPlanToClub$Mutation parse(Map<String, dynamic> json) =>
      AddWorkoutPlanToClub$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ClubWorkoutsArguments extends JsonSerializable with EquatableMixin {
  ClubWorkoutsArguments({required this.clubId});

  @override
  factory ClubWorkoutsArguments.fromJson(Map<String, dynamic> json) =>
      _$ClubWorkoutsArgumentsFromJson(json);

  late String clubId;

  @override
  List<Object?> get props => [clubId];
  @override
  Map<String, dynamic> toJson() => _$ClubWorkoutsArgumentsToJson(this);
}

final CLUB_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'clubWorkouts'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clubWorkouts'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubWorkouts'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubWorkouts'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubWorkouts'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workouts'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClubWorkoutsQuery
    extends GraphQLQuery<ClubWorkouts$Query, ClubWorkoutsArguments> {
  ClubWorkoutsQuery({required this.variables});

  @override
  final DocumentNode document = CLUB_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'clubWorkouts';

  @override
  final ClubWorkoutsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClubWorkouts$Query parse(Map<String, dynamic> json) =>
      ClubWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ClubWorkoutPlansArguments extends JsonSerializable with EquatableMixin {
  ClubWorkoutPlansArguments({required this.clubId});

  @override
  factory ClubWorkoutPlansArguments.fromJson(Map<String, dynamic> json) =>
      _$ClubWorkoutPlansArgumentsFromJson(json);

  late String clubId;

  @override
  List<Object?> get props => [clubId];
  @override
  Map<String, dynamic> toJson() => _$ClubWorkoutPlansArgumentsToJson(this);
}

final CLUB_WORKOUT_PLANS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'clubWorkoutPlans'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clubWorkoutPlans'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubWorkoutPlans'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubWorkoutPlans'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubWorkoutPlans'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlans'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClubWorkoutPlansQuery
    extends GraphQLQuery<ClubWorkoutPlans$Query, ClubWorkoutPlansArguments> {
  ClubWorkoutPlansQuery({required this.variables});

  @override
  final DocumentNode document = CLUB_WORKOUT_PLANS_QUERY_DOCUMENT;

  @override
  final String operationName = 'clubWorkoutPlans';

  @override
  final ClubWorkoutPlansArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClubWorkoutPlans$Query parse(Map<String, dynamic> json) =>
      ClubWorkoutPlans$Query.fromJson(json);
}

final USER_WORKOUT_PLANS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userWorkoutPlans'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userWorkoutPlans'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserWorkoutPlansQuery
    extends GraphQLQuery<UserWorkoutPlans$Query, JsonSerializable> {
  UserWorkoutPlansQuery();

  @override
  final DocumentNode document = USER_WORKOUT_PLANS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userWorkoutPlans';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserWorkoutPlans$Query parse(Map<String, dynamic> json) =>
      UserWorkoutPlans$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class PublicWorkoutPlansArguments extends JsonSerializable with EquatableMixin {
  PublicWorkoutPlansArguments({this.cursor, this.filters, this.take});

  @override
  factory PublicWorkoutPlansArguments.fromJson(Map<String, dynamic> json) =>
      _$PublicWorkoutPlansArgumentsFromJson(json);

  final String? cursor;

  final WorkoutPlanFiltersInput? filters;

  final int? take;

  @override
  List<Object?> get props => [cursor, filters, take];
  @override
  Map<String, dynamic> toJson() => _$PublicWorkoutPlansArgumentsToJson(this);
}

final PUBLIC_WORKOUT_PLANS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'publicWorkoutPlans'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'cursor')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'filters')),
            type: NamedTypeNode(
                name: NameNode(value: 'WorkoutPlanFiltersInput'),
                isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'take')),
            type: NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'publicWorkoutPlans'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'cursor'),
                  value: VariableNode(name: NameNode(value: 'cursor'))),
              ArgumentNode(
                  name: NameNode(value: 'filters'),
                  value: VariableNode(name: NameNode(value: 'filters'))),
              ArgumentNode(
                  name: NameNode(value: 'take'),
                  value: VariableNode(name: NameNode(value: 'take')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class PublicWorkoutPlansQuery extends GraphQLQuery<PublicWorkoutPlans$Query,
    PublicWorkoutPlansArguments> {
  PublicWorkoutPlansQuery({required this.variables});

  @override
  final DocumentNode document = PUBLIC_WORKOUT_PLANS_QUERY_DOCUMENT;

  @override
  final String operationName = 'publicWorkoutPlans';

  @override
  final PublicWorkoutPlansArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  PublicWorkoutPlans$Query parse(Map<String, dynamic> json) =>
      PublicWorkoutPlans$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanByIdArguments extends JsonSerializable with EquatableMixin {
  WorkoutPlanByIdArguments({required this.id});

  @override
  factory WorkoutPlanByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanByIdArgumentsToJson(this);
}

final WORKOUT_PLAN_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'workoutPlanById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'workoutPlanById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanDays'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanReviews'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanEnrolments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'CompletedWorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanDayWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class WorkoutPlanByIdQuery
    extends GraphQLQuery<WorkoutPlanById$Query, WorkoutPlanByIdArguments> {
  WorkoutPlanByIdQuery({required this.variables});

  @override
  final DocumentNode document = WORKOUT_PLAN_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'workoutPlanById';

  @override
  final WorkoutPlanByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  WorkoutPlanById$Query parse(Map<String, dynamic> json) =>
      WorkoutPlanById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanArguments extends JsonSerializable with EquatableMixin {
  UpdateWorkoutPlanArguments({required this.data});

  @override
  factory UpdateWorkoutPlanArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanArgumentsFromJson(json);

  late UpdateWorkoutPlanInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanArgumentsToJson(this);
}

final UPDATE_WORKOUT_PLAN_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutPlan'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutPlanInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutPlan'),
            alias: NameNode(value: 'updateWorkoutPlan'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlan'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutTags'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutTag'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlan'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutPlanMutation extends GraphQLQuery<UpdateWorkoutPlan$Mutation,
    UpdateWorkoutPlanArguments> {
  UpdateWorkoutPlanMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_PLAN_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutPlan';

  @override
  final UpdateWorkoutPlanArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutPlan$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutPlan$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserPublicWorkoutPlansArguments extends JsonSerializable
    with EquatableMixin {
  UserPublicWorkoutPlansArguments({required this.userId});

  @override
  factory UserPublicWorkoutPlansArguments.fromJson(Map<String, dynamic> json) =>
      _$UserPublicWorkoutPlansArgumentsFromJson(json);

  late String userId;

  @override
  List<Object?> get props => [userId];
  @override
  Map<String, dynamic> toJson() =>
      _$UserPublicWorkoutPlansArgumentsToJson(this);
}

final USER_PUBLIC_WORKOUT_PLANS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userPublicWorkoutPlans'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userPublicWorkoutPlans'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userId'),
                  value: VariableNode(name: NameNode(value: 'userId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserPublicWorkoutPlansQuery extends GraphQLQuery<
    UserPublicWorkoutPlans$Query, UserPublicWorkoutPlansArguments> {
  UserPublicWorkoutPlansQuery({required this.variables});

  @override
  final DocumentNode document = USER_PUBLIC_WORKOUT_PLANS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userPublicWorkoutPlans';

  @override
  final UserPublicWorkoutPlansArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserPublicWorkoutPlans$Query parse(Map<String, dynamic> json) =>
      UserPublicWorkoutPlans$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanArguments extends JsonSerializable with EquatableMixin {
  CreateWorkoutPlanArguments({required this.data});

  @override
  factory CreateWorkoutPlanArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutPlanArgumentsFromJson(json);

  late CreateWorkoutPlanInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutPlanArgumentsToJson(this);
}

final CREATE_WORKOUT_PLAN_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutPlan'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutPlanInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutPlan'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanDays'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanReviews'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanEnrolments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'CompletedWorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanDayWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutPlanMutation extends GraphQLQuery<CreateWorkoutPlan$Mutation,
    CreateWorkoutPlanArguments> {
  CreateWorkoutPlanMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_PLAN_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutPlan';

  @override
  final CreateWorkoutPlanArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutPlan$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutPlan$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserAvatarByIdArguments extends JsonSerializable with EquatableMixin {
  UserAvatarByIdArguments({required this.id});

  @override
  factory UserAvatarByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$UserAvatarByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$UserAvatarByIdArgumentsToJson(this);
}

final USER_AVATAR_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userAvatarById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userAvatarById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserAvatarByIdQuery
    extends GraphQLQuery<UserAvatarById$Query, UserAvatarByIdArguments> {
  UserAvatarByIdQuery({required this.variables});

  @override
  final DocumentNode document = USER_AVATAR_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'userAvatarById';

  @override
  final UserAvatarByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserAvatarById$Query parse(Map<String, dynamic> json) =>
      UserAvatarById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserProfilesArguments extends JsonSerializable with EquatableMixin {
  UserProfilesArguments({this.cursor, this.take});

  @override
  factory UserProfilesArguments.fromJson(Map<String, dynamic> json) =>
      _$UserProfilesArgumentsFromJson(json);

  final String? cursor;

  final int? take;

  @override
  List<Object?> get props => [cursor, take];
  @override
  Map<String, dynamic> toJson() => _$UserProfilesArgumentsToJson(this);
}

final USER_PROFILES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userProfiles'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'cursor')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'take')),
            type: NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userProfiles'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'cursor'),
                  value: VariableNode(name: NameNode(value: 'cursor'))),
              ArgumentNode(
                  name: NameNode(value: 'take'),
                  value: VariableNode(name: NameNode(value: 'take')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserProfileSummary'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Clubs'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubSummary'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Owner'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserAvatarData'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'Admins'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserAvatarData'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserProfileSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserProfileSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tagline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'townCity'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'countryCode'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'skills'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserProfilesQuery
    extends GraphQLQuery<UserProfiles$Query, UserProfilesArguments> {
  UserProfilesQuery({required this.variables});

  @override
  final DocumentNode document = USER_PROFILES_QUERY_DOCUMENT;

  @override
  final String operationName = 'userProfiles';

  @override
  final UserProfilesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserProfiles$Query parse(Map<String, dynamic> json) =>
      UserProfiles$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UnarchiveWorkoutPlanByIdArguments extends JsonSerializable
    with EquatableMixin {
  UnarchiveWorkoutPlanByIdArguments({required this.id});

  @override
  factory UnarchiveWorkoutPlanByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UnarchiveWorkoutPlanByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$UnarchiveWorkoutPlanByIdArgumentsToJson(this);
}

final UNARCHIVE_WORKOUT_PLAN_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'unarchiveWorkoutPlanById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'unarchiveWorkoutPlanById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanDays'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanReviews'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanEnrolments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'CompletedWorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'CompletedWorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanDayWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UnarchiveWorkoutPlanByIdMutation extends GraphQLQuery<
    UnarchiveWorkoutPlanById$Mutation, UnarchiveWorkoutPlanByIdArguments> {
  UnarchiveWorkoutPlanByIdMutation({required this.variables});

  @override
  final DocumentNode document = UNARCHIVE_WORKOUT_PLAN_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'unarchiveWorkoutPlanById';

  @override
  final UnarchiveWorkoutPlanByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UnarchiveWorkoutPlanById$Mutation parse(Map<String, dynamic> json) =>
      UnarchiveWorkoutPlanById$Mutation.fromJson(json);
}

final USER_ARCHIVED_CUSTOM_MOVES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userArchivedCustomMoves'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userArchivedCustomMoves'),
            alias: NameNode(value: 'archivedMove'),
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ArchivedMove'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ArchivedMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserArchivedCustomMovesQuery
    extends GraphQLQuery<UserArchivedCustomMoves$Query, JsonSerializable> {
  UserArchivedCustomMovesQuery();

  @override
  final DocumentNode document = USER_ARCHIVED_CUSTOM_MOVES_QUERY_DOCUMENT;

  @override
  final String operationName = 'userArchivedCustomMoves';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserArchivedCustomMoves$Query parse(Map<String, dynamic> json) =>
      UserArchivedCustomMoves$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UnarchiveCustomMoveByIdArguments extends JsonSerializable
    with EquatableMixin {
  UnarchiveCustomMoveByIdArguments({required this.id});

  @override
  factory UnarchiveCustomMoveByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UnarchiveCustomMoveByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$UnarchiveCustomMoveByIdArgumentsToJson(this);
}

final UNARCHIVE_CUSTOM_MOVE_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'unarchiveCustomMoveById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'unarchiveCustomMoveById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: []),
              FieldNode(
                  name: NameNode(value: 'MoveType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'MoveType'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'BodyAreaMoveScores'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'score'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null),
                    FieldNode(
                        name: NameNode(value: 'BodyArea'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'BodyArea'), directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'RequiredEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'SelectableEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UnarchiveCustomMoveByIdMutation extends GraphQLQuery<
    UnarchiveCustomMoveById$Mutation, UnarchiveCustomMoveByIdArguments> {
  UnarchiveCustomMoveByIdMutation({required this.variables});

  @override
  final DocumentNode document = UNARCHIVE_CUSTOM_MOVE_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'unarchiveCustomMoveById';

  @override
  final UnarchiveCustomMoveByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UnarchiveCustomMoveById$Mutation parse(Map<String, dynamic> json) =>
      UnarchiveCustomMoveById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ArchiveWorkoutPlanByIdArguments extends JsonSerializable
    with EquatableMixin {
  ArchiveWorkoutPlanByIdArguments({required this.id});

  @override
  factory ArchiveWorkoutPlanByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$ArchiveWorkoutPlanByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$ArchiveWorkoutPlanByIdArgumentsToJson(this);
}

final ARCHIVE_WORKOUT_PLAN_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'archiveWorkoutPlanById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'archiveWorkoutPlanById'),
            alias: NameNode(value: 'archivedWorkoutPlan'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ArchivedWorkoutPlan'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ArchivedWorkoutPlan'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ArchiveWorkoutPlanByIdMutation extends GraphQLQuery<
    ArchiveWorkoutPlanById$Mutation, ArchiveWorkoutPlanByIdArguments> {
  ArchiveWorkoutPlanByIdMutation({required this.variables});

  @override
  final DocumentNode document = ARCHIVE_WORKOUT_PLAN_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'archiveWorkoutPlanById';

  @override
  final ArchiveWorkoutPlanByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ArchiveWorkoutPlanById$Mutation parse(Map<String, dynamic> json) =>
      ArchiveWorkoutPlanById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UnarchiveWorkoutByIdArguments extends JsonSerializable
    with EquatableMixin {
  UnarchiveWorkoutByIdArguments({required this.id});

  @override
  factory UnarchiveWorkoutByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$UnarchiveWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$UnarchiveWorkoutByIdArgumentsToJson(this);
}

final UNARCHIVE_WORKOUT_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'unarchiveWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'unarchiveWorkoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UnarchiveWorkoutByIdMutation extends GraphQLQuery<
    UnarchiveWorkoutById$Mutation, UnarchiveWorkoutByIdArguments> {
  UnarchiveWorkoutByIdMutation({required this.variables});

  @override
  final DocumentNode document = UNARCHIVE_WORKOUT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'unarchiveWorkoutById';

  @override
  final UnarchiveWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UnarchiveWorkoutById$Mutation parse(Map<String, dynamic> json) =>
      UnarchiveWorkoutById$Mutation.fromJson(json);
}

final USER_ARCHIVED_WORKOUT_PLANS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userArchivedWorkoutPlans'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userArchivedWorkoutPlans'),
            alias: NameNode(value: 'archivedWorkoutPlan'),
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ArchivedWorkoutPlan'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ArchivedWorkoutPlan'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserArchivedWorkoutPlansQuery
    extends GraphQLQuery<UserArchivedWorkoutPlans$Query, JsonSerializable> {
  UserArchivedWorkoutPlansQuery();

  @override
  final DocumentNode document = USER_ARCHIVED_WORKOUT_PLANS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userArchivedWorkoutPlans';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserArchivedWorkoutPlans$Query parse(Map<String, dynamic> json) =>
      UserArchivedWorkoutPlans$Query.fromJson(json);
}

final USER_ARCHIVED_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userArchivedWorkouts'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userArchivedWorkouts'),
            alias: NameNode(value: 'archivedWorkout'),
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ArchivedWorkout'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ArchivedWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserArchivedWorkoutsQuery
    extends GraphQLQuery<UserArchivedWorkouts$Query, JsonSerializable> {
  UserArchivedWorkoutsQuery();

  @override
  final DocumentNode document = USER_ARCHIVED_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userArchivedWorkouts';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserArchivedWorkouts$Query parse(Map<String, dynamic> json) =>
      UserArchivedWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ArchiveWorkoutByIdArguments extends JsonSerializable with EquatableMixin {
  ArchiveWorkoutByIdArguments({required this.id});

  @override
  factory ArchiveWorkoutByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$ArchiveWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ArchiveWorkoutByIdArgumentsToJson(this);
}

final ARCHIVE_WORKOUT_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'archiveWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'archiveWorkoutById'),
            alias: NameNode(value: 'archivedWorkout'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ArchivedWorkout'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ArchivedWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ArchiveWorkoutByIdMutation extends GraphQLQuery<
    ArchiveWorkoutById$Mutation, ArchiveWorkoutByIdArguments> {
  ArchiveWorkoutByIdMutation({required this.variables});

  @override
  final DocumentNode document = ARCHIVE_WORKOUT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'archiveWorkoutById';

  @override
  final ArchiveWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ArchiveWorkoutById$Mutation parse(Map<String, dynamic> json) =>
      ArchiveWorkoutById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ArchiveCustomMoveByIdArguments extends JsonSerializable
    with EquatableMixin {
  ArchiveCustomMoveByIdArguments({required this.id});

  @override
  factory ArchiveCustomMoveByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$ArchiveCustomMoveByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ArchiveCustomMoveByIdArgumentsToJson(this);
}

final ARCHIVE_CUSTOM_MOVE_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'archiveCustomMoveById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'archiveCustomMoveById'),
            alias: NameNode(value: 'archivedMove'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ArchivedMove'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ArchivedMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ArchiveCustomMoveByIdMutation extends GraphQLQuery<
    ArchiveCustomMoveById$Mutation, ArchiveCustomMoveByIdArguments> {
  ArchiveCustomMoveByIdMutation({required this.variables});

  @override
  final DocumentNode document = ARCHIVE_CUSTOM_MOVE_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'archiveCustomMoveById';

  @override
  final ArchiveCustomMoveByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ArchiveCustomMoveById$Mutation parse(Map<String, dynamic> json) =>
      ArchiveCustomMoveById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserAvatarsArguments extends JsonSerializable with EquatableMixin {
  UserAvatarsArguments({required this.ids});

  @override
  factory UserAvatarsArguments.fromJson(Map<String, dynamic> json) =>
      _$UserAvatarsArgumentsFromJson(json);

  late List<String> ids;

  @override
  List<Object?> get props => [ids];
  @override
  Map<String, dynamic> toJson() => _$UserAvatarsArgumentsToJson(this);
}

final USER_AVATARS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userAvatars'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'ids')),
            type: ListTypeNode(
                type:
                    NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userAvatars'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'ids'),
                  value: VariableNode(name: NameNode(value: 'ids')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserAvatarsQuery
    extends GraphQLQuery<UserAvatars$Query, UserAvatarsArguments> {
  UserAvatarsQuery({required this.variables});

  @override
  final DocumentNode document = USER_AVATARS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userAvatars';

  @override
  final UserAvatarsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserAvatars$Query parse(Map<String, dynamic> json) =>
      UserAvatars$Query.fromJson(json);
}

final CUSTOM_MOVES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'customMoves'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'customMoves'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: []),
              FieldNode(
                  name: NameNode(value: 'MoveType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'MoveType'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'BodyAreaMoveScores'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'score'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null),
                    FieldNode(
                        name: NameNode(value: 'BodyArea'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'BodyArea'), directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'RequiredEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'SelectableEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CustomMovesQuery
    extends GraphQLQuery<CustomMoves$Query, JsonSerializable> {
  CustomMovesQuery();

  @override
  final DocumentNode document = CUSTOM_MOVES_QUERY_DOCUMENT;

  @override
  final String operationName = 'customMoves';

  @override
  List<Object?> get props => [document, operationName];
  @override
  CustomMoves$Query parse(Map<String, dynamic> json) =>
      CustomMoves$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateMoveArguments extends JsonSerializable with EquatableMixin {
  CreateMoveArguments({required this.data});

  @override
  factory CreateMoveArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateMoveArgumentsFromJson(json);

  late CreateMoveInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateMoveArgumentsToJson(this);
}

final CREATE_MOVE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createMove'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateMoveInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createMove'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: []),
              FieldNode(
                  name: NameNode(value: 'MoveType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'MoveType'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'BodyAreaMoveScores'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'score'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null),
                    FieldNode(
                        name: NameNode(value: 'BodyArea'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'BodyArea'), directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'RequiredEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'SelectableEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateMoveMutation
    extends GraphQLQuery<CreateMove$Mutation, CreateMoveArguments> {
  CreateMoveMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_MOVE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createMove';

  @override
  final CreateMoveArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateMove$Mutation parse(Map<String, dynamic> json) =>
      CreateMove$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateMoveArguments extends JsonSerializable with EquatableMixin {
  UpdateMoveArguments({required this.data});

  @override
  factory UpdateMoveArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateMoveArgumentsFromJson(json);

  late UpdateMoveInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateMoveArgumentsToJson(this);
}

final UPDATE_MOVE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateMove'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateMoveInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateMove'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: []),
              FieldNode(
                  name: NameNode(value: 'MoveType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'MoveType'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'BodyAreaMoveScores'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'score'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null),
                    FieldNode(
                        name: NameNode(value: 'BodyArea'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'BodyArea'), directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'RequiredEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'SelectableEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateMoveMutation
    extends GraphQLQuery<UpdateMove$Mutation, UpdateMoveArguments> {
  UpdateMoveMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_MOVE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateMove';

  @override
  final UpdateMoveArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateMove$Mutation parse(Map<String, dynamic> json) =>
      UpdateMove$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteMoveByIdArguments extends JsonSerializable with EquatableMixin {
  DeleteMoveByIdArguments({required this.id});

  @override
  factory DeleteMoveByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteMoveByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteMoveByIdArgumentsToJson(this);
}

final DELETE_MOVE_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteMoveById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'softDeleteMoveById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteMoveByIdMutation
    extends GraphQLQuery<DeleteMoveById$Mutation, DeleteMoveByIdArguments> {
  DeleteMoveByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_MOVE_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteMoveById';

  @override
  final DeleteMoveByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteMoveById$Mutation parse(Map<String, dynamic> json) =>
      DeleteMoveById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteGymProfileByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteGymProfileByIdArguments({required this.id});

  @override
  factory DeleteGymProfileByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteGymProfileByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteGymProfileByIdArgumentsToJson(this);
}

final DELETE_GYM_PROFILE_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteGymProfileById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteGymProfileById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteGymProfileByIdMutation extends GraphQLQuery<
    DeleteGymProfileById$Mutation, DeleteGymProfileByIdArguments> {
  DeleteGymProfileByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_GYM_PROFILE_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteGymProfileById';

  @override
  final DeleteGymProfileByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteGymProfileById$Mutation parse(Map<String, dynamic> json) =>
      DeleteGymProfileById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateGymProfileArguments extends JsonSerializable with EquatableMixin {
  CreateGymProfileArguments({required this.data});

  @override
  factory CreateGymProfileArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateGymProfileArgumentsFromJson(json);

  late CreateGymProfileInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateGymProfileArgumentsToJson(this);
}

final CREATE_GYM_PROFILE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createGymProfile'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateGymProfileInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createGymProfile'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'GymProfile'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateGymProfileMutation
    extends GraphQLQuery<CreateGymProfile$Mutation, CreateGymProfileArguments> {
  CreateGymProfileMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_GYM_PROFILE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createGymProfile';

  @override
  final CreateGymProfileArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateGymProfile$Mutation parse(Map<String, dynamic> json) =>
      CreateGymProfile$Mutation.fromJson(json);
}

final GYM_PROFILES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'gymProfiles'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'gymProfiles'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'GymProfile'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class GymProfilesQuery
    extends GraphQLQuery<GymProfiles$Query, JsonSerializable> {
  GymProfilesQuery();

  @override
  final DocumentNode document = GYM_PROFILES_QUERY_DOCUMENT;

  @override
  final String operationName = 'gymProfiles';

  @override
  List<Object?> get props => [document, operationName];
  @override
  GymProfiles$Query parse(Map<String, dynamic> json) =>
      GymProfiles$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateGymProfileArguments extends JsonSerializable with EquatableMixin {
  UpdateGymProfileArguments({required this.data});

  @override
  factory UpdateGymProfileArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateGymProfileArgumentsFromJson(json);

  late UpdateGymProfileInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateGymProfileArgumentsToJson(this);
}

final UPDATE_GYM_PROFILE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateGymProfile'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateGymProfileInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateGymProfile'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'GymProfile'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateGymProfileMutation
    extends GraphQLQuery<UpdateGymProfile$Mutation, UpdateGymProfileArguments> {
  UpdateGymProfileMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_GYM_PROFILE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateGymProfile';

  @override
  final UpdateGymProfileArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateGymProfile$Mutation parse(Map<String, dynamic> json) =>
      UpdateGymProfile$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserProfileArguments extends JsonSerializable with EquatableMixin {
  UpdateUserProfileArguments({required this.data});

  @override
  factory UpdateUserProfileArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserProfileArgumentsFromJson(json);

  late UpdateUserProfileInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserProfileArgumentsToJson(this);
}

final UPDATE_USER_PROFILE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateUserProfile'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateUserProfileInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateUserProfile'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserProfileResult'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserProfileResult'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UpdateUserProfileResult'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tagline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'birthdate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'townCity'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'countryCode'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'instagramHandle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tiktokHandle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'youtubeHandle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'linkedinHandle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'firstname'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'gender'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasOnboarded'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lastname'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsPerWeekTarget'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'activeProgressWidgets'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'activeLogDataWidgets'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateUserProfileMutation extends GraphQLQuery<UpdateUserProfile$Mutation,
    UpdateUserProfileArguments> {
  UpdateUserProfileMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_USER_PROFILE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateUserProfile';

  @override
  final UpdateUserProfileArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateUserProfile$Mutation parse(Map<String, dynamic> json) =>
      UpdateUserProfile$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserProfileArguments extends JsonSerializable with EquatableMixin {
  UserProfileArguments({required this.userId});

  @override
  factory UserProfileArguments.fromJson(Map<String, dynamic> json) =>
      _$UserProfileArgumentsFromJson(json);

  late String userId;

  @override
  List<Object?> get props => [userId];
  @override
  Map<String, dynamic> toJson() => _$UserProfileArgumentsToJson(this);
}

final USER_PROFILE_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userProfile'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userProfile'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userId'),
                  value: VariableNode(name: NameNode(value: 'userId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserProfile'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Clubs'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubSummary'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Owner'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserAvatarData'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'Admins'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserAvatarData'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'LifetimeLogStatsSummary'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'LifetimeLogStatsSummary'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Skills'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Skill'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'BenchmarksWithBestEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'UserBenchmarkSummary'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserBenchmarkSummary'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BestEntry'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserBenchmarkEntry'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LifetimeLogStatsSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LifetimeLogStatsSummary'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'minutesWorked'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sessionsLogged'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Skill'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Skill'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'experience'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'certification'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'awardingBody'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'certificateRef'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'documentUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lastEntryAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipmentInfo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'benchmarkType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tagline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'townCity'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'instagramHandle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tiktokHandle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'youtubeHandle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'linkedinHandle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'countryCode'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'gender'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'birthdate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'followerCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsPerWeekTarget'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'activeProgressWidgets'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'activeLogDataWidgets'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserProfileQuery
    extends GraphQLQuery<UserProfile$Query, UserProfileArguments> {
  UserProfileQuery({required this.variables});

  @override
  final DocumentNode document = USER_PROFILE_QUERY_DOCUMENT;

  @override
  final String operationName = 'userProfile';

  @override
  final UserProfileArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserProfile$Query parse(Map<String, dynamic> json) =>
      UserProfile$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutTagByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutTagByIdArguments({required this.id});

  @override
  factory DeleteWorkoutTagByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteWorkoutTagByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteWorkoutTagByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_TAG_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutTagById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutTagById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutTagByIdMutation extends GraphQLQuery<
    DeleteWorkoutTagById$Mutation, DeleteWorkoutTagByIdArguments> {
  DeleteWorkoutTagByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_WORKOUT_TAG_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutTagById';

  @override
  final DeleteWorkoutTagByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutTagById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutTagById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutTagArguments extends JsonSerializable with EquatableMixin {
  UpdateWorkoutTagArguments({required this.data});

  @override
  factory UpdateWorkoutTagArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutTagArgumentsFromJson(json);

  late UpdateWorkoutTagInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutTagArgumentsToJson(this);
}

final UPDATE_WORKOUT_TAG_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutTag'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutTagInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutTag'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutTagMutation
    extends GraphQLQuery<UpdateWorkoutTag$Mutation, UpdateWorkoutTagArguments> {
  UpdateWorkoutTagMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_TAG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutTag';

  @override
  final UpdateWorkoutTagArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutTag$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutTag$Mutation.fromJson(json);
}

final USER_WORKOUT_TAGS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userWorkoutTags'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userWorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserWorkoutTagsQuery
    extends GraphQLQuery<UserWorkoutTags$Query, JsonSerializable> {
  UserWorkoutTagsQuery();

  @override
  final DocumentNode document = USER_WORKOUT_TAGS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userWorkoutTags';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserWorkoutTags$Query parse(Map<String, dynamic> json) =>
      UserWorkoutTags$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutTagArguments extends JsonSerializable with EquatableMixin {
  CreateWorkoutTagArguments({required this.data});

  @override
  factory CreateWorkoutTagArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutTagArgumentsFromJson(json);

  late CreateWorkoutTagInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutTagArgumentsToJson(this);
}

final CREATE_WORKOUT_TAG_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutTag'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutTagInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutTag'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutTagMutation
    extends GraphQLQuery<CreateWorkoutTag$Mutation, CreateWorkoutTagArguments> {
  CreateWorkoutTagMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_TAG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutTag';

  @override
  final CreateWorkoutTagArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutTag$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutTag$Mutation.fromJson(json);
}

final USER_RECENTLY_VIEWED_OBJECTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userRecentlyViewedObjects'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userRecentlyViewedObjects'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'Club'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubSummary'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Owner'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserAvatarData'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'Admins'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserAvatarData'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workout'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlan'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserRecentlyViewedObjectsQuery
    extends GraphQLQuery<UserRecentlyViewedObjects$Query, JsonSerializable> {
  UserRecentlyViewedObjectsQuery();

  @override
  final DocumentNode document = USER_RECENTLY_VIEWED_OBJECTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userRecentlyViewedObjects';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserRecentlyViewedObjects$Query parse(Map<String, dynamic> json) =>
      UserRecentlyViewedObjects$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSetArguments extends JsonSerializable with EquatableMixin {
  UpdateWorkoutSetArguments({required this.data});

  @override
  factory UpdateWorkoutSetArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSetArgumentsFromJson(json);

  late UpdateWorkoutSetInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSetArgumentsToJson(this);
}

final UPDATE_WORKOUT_SET_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutSet'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutSetInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutSet'),
            alias: NameNode(value: 'updateWorkoutSet'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSet'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutSetMutation
    extends GraphQLQuery<UpdateWorkoutSet$Mutation, UpdateWorkoutSetArguments> {
  UpdateWorkoutSetMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_SET_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutSet';

  @override
  final UpdateWorkoutSetArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutSet$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutSet$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSetWithWorkoutMovesArguments extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutSetWithWorkoutMovesArguments({required this.data});

  @override
  factory CreateWorkoutSetWithWorkoutMovesArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutSetWithWorkoutMovesArgumentsFromJson(json);

  late CreateWorkoutSetWithWorkoutMovesInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutSetWithWorkoutMovesArgumentsToJson(this);
}

final CREATE_WORKOUT_SET_WITH_WORKOUT_MOVES_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutSetWithWorkoutMoves'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutSetWithWorkoutMovesInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutSetWithWorkoutMoves'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSet'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutMoves'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutMove'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipment'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'Move'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Move'), directives: []),
                          FieldNode(
                              name: NameNode(value: 'MoveType'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'MoveType'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'BodyAreaMoveScores'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FieldNode(
                                    name: NameNode(value: 'score'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null),
                                FieldNode(
                                    name: NameNode(value: 'BodyArea'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'BodyArea'),
                                          directives: [])
                                    ]))
                              ])),
                          FieldNode(
                              name: NameNode(value: 'RequiredEquipments'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'SelectableEquipments'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutSetWithWorkoutMovesMutation extends GraphQLQuery<
    CreateWorkoutSetWithWorkoutMoves$Mutation,
    CreateWorkoutSetWithWorkoutMovesArguments> {
  CreateWorkoutSetWithWorkoutMovesMutation({required this.variables});

  @override
  final DocumentNode document =
      CREATE_WORKOUT_SET_WITH_WORKOUT_MOVES_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutSetWithWorkoutMoves';

  @override
  final CreateWorkoutSetWithWorkoutMovesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutSetWithWorkoutMoves$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutSetWithWorkoutMoves$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DuplicateWorkoutSetByIdArguments extends JsonSerializable
    with EquatableMixin {
  DuplicateWorkoutSetByIdArguments({required this.id});

  @override
  factory DuplicateWorkoutSetByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DuplicateWorkoutSetByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DuplicateWorkoutSetByIdArgumentsToJson(this);
}

final DUPLICATE_WORKOUT_SET_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'duplicateWorkoutSetById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'duplicateWorkoutSetById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSet'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutMoves'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutMove'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipment'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'Move'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Move'), directives: []),
                          FieldNode(
                              name: NameNode(value: 'MoveType'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'MoveType'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'BodyAreaMoveScores'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FieldNode(
                                    name: NameNode(value: 'score'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null),
                                FieldNode(
                                    name: NameNode(value: 'BodyArea'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'BodyArea'),
                                          directives: [])
                                    ]))
                              ])),
                          FieldNode(
                              name: NameNode(value: 'RequiredEquipments'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'SelectableEquipments'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class DuplicateWorkoutSetByIdMutation extends GraphQLQuery<
    DuplicateWorkoutSetById$Mutation, DuplicateWorkoutSetByIdArguments> {
  DuplicateWorkoutSetByIdMutation({required this.variables});

  @override
  final DocumentNode document = DUPLICATE_WORKOUT_SET_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'duplicateWorkoutSetById';

  @override
  final DuplicateWorkoutSetByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DuplicateWorkoutSetById$Mutation parse(Map<String, dynamic> json) =>
      DuplicateWorkoutSetById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutSetsArguments extends JsonSerializable with EquatableMixin {
  ReorderWorkoutSetsArguments({required this.data});

  @override
  factory ReorderWorkoutSetsArguments.fromJson(Map<String, dynamic> json) =>
      _$ReorderWorkoutSetsArgumentsFromJson(json);

  late List<UpdateSortPositionInput> data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$ReorderWorkoutSetsArgumentsToJson(this);
}

final REORDER_WORKOUT_SETS_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'reorderWorkoutSets'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: ListTypeNode(
                type: NamedTypeNode(
                    name: NameNode(value: 'UpdateSortPositionInput'),
                    isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'reorderWorkoutSets'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'sortPosition'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ]))
]);

class ReorderWorkoutSetsMutation extends GraphQLQuery<
    ReorderWorkoutSets$Mutation, ReorderWorkoutSetsArguments> {
  ReorderWorkoutSetsMutation({required this.variables});

  @override
  final DocumentNode document = REORDER_WORKOUT_SETS_MUTATION_DOCUMENT;

  @override
  final String operationName = 'reorderWorkoutSets';

  @override
  final ReorderWorkoutSetsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ReorderWorkoutSets$Mutation parse(Map<String, dynamic> json) =>
      ReorderWorkoutSets$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSetArguments extends JsonSerializable with EquatableMixin {
  CreateWorkoutSetArguments({required this.data});

  @override
  factory CreateWorkoutSetArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSetArgumentsFromJson(json);

  late CreateWorkoutSetInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSetArgumentsToJson(this);
}

final CREATE_WORKOUT_SET_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutSet'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutSetInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutSet'),
            alias: NameNode(value: 'createWorkoutSet'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSet'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutSetMutation
    extends GraphQLQuery<CreateWorkoutSet$Mutation, CreateWorkoutSetArguments> {
  CreateWorkoutSetMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_SET_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutSet';

  @override
  final CreateWorkoutSetArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutSet$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutSet$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutSetByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutSetByIdArguments({required this.id});

  @override
  factory DeleteWorkoutSetByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteWorkoutSetByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteWorkoutSetByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_SET_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutSetById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutSetById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutSetByIdMutation extends GraphQLQuery<
    DeleteWorkoutSetById$Mutation, DeleteWorkoutSetByIdArguments> {
  DeleteWorkoutSetByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_WORKOUT_SET_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutSetById';

  @override
  final DeleteWorkoutSetByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutSetById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutSetById$Mutation.fromJson(json);
}

final CORE_DATA_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'coreData'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'coreData'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'bodyAreas'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'BodyArea'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'equipment'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'moveTypes'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'MoveType'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'workoutGoals'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutGoal'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'workoutSectionTypes'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'standardMoves'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Move'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'MoveType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'MoveType'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BodyAreaMoveScores'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'score'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'BodyArea'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'BodyArea'),
                                    directives: [])
                              ]))
                        ])),
                    FieldNode(
                        name: NameNode(value: 'RequiredEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'SelectableEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'progressWidgets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ProgressWidget'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressWidget'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressWidget'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'subtitle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CoreDataQuery extends GraphQLQuery<CoreData$Query, JsonSerializable> {
  CoreDataQuery();

  @override
  final DocumentNode document = CORE_DATA_QUERY_DOCUMENT;

  @override
  final String operationName = 'coreData';

  @override
  List<Object?> get props => [document, operationName];
  @override
  CoreData$Query parse(Map<String, dynamic> json) =>
      CoreData$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CheckUniqueDisplayNameArguments extends JsonSerializable
    with EquatableMixin {
  CheckUniqueDisplayNameArguments({required this.displayName});

  @override
  factory CheckUniqueDisplayNameArguments.fromJson(Map<String, dynamic> json) =>
      _$CheckUniqueDisplayNameArgumentsFromJson(json);

  late String displayName;

  @override
  List<Object?> get props => [displayName];
  @override
  Map<String, dynamic> toJson() =>
      _$CheckUniqueDisplayNameArgumentsToJson(this);
}

final CHECK_UNIQUE_DISPLAY_NAME_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'checkUniqueDisplayName'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'displayName')),
            type:
                NamedTypeNode(name: NameNode(value: 'String'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'checkUniqueDisplayName'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'displayName'),
                  value: VariableNode(name: NameNode(value: 'displayName')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class CheckUniqueDisplayNameQuery extends GraphQLQuery<
    CheckUniqueDisplayName$Query, CheckUniqueDisplayNameArguments> {
  CheckUniqueDisplayNameQuery({required this.variables});

  @override
  final DocumentNode document = CHECK_UNIQUE_DISPLAY_NAME_QUERY_DOCUMENT;

  @override
  final String operationName = 'checkUniqueDisplayName';

  @override
  final CheckUniqueDisplayNameArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CheckUniqueDisplayName$Query parse(Map<String, dynamic> json) =>
      CheckUniqueDisplayName$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmarkEntryArguments extends JsonSerializable
    with EquatableMixin {
  CreateUserBenchmarkEntryArguments({required this.data});

  @override
  factory CreateUserBenchmarkEntryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserBenchmarkEntryArgumentsFromJson(json);

  late CreateUserBenchmarkEntryInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserBenchmarkEntryArgumentsToJson(this);
}

final CREATE_USER_BENCHMARK_ENTRY_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createUserBenchmarkEntry'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateUserBenchmarkEntryInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createUserBenchmarkEntry'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmarkEntry'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateUserBenchmarkEntryMutation extends GraphQLQuery<
    CreateUserBenchmarkEntry$Mutation, CreateUserBenchmarkEntryArguments> {
  CreateUserBenchmarkEntryMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_USER_BENCHMARK_ENTRY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createUserBenchmarkEntry';

  @override
  final CreateUserBenchmarkEntryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateUserBenchmarkEntry$Mutation parse(Map<String, dynamic> json) =>
      CreateUserBenchmarkEntry$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmarkEntryArguments extends JsonSerializable
    with EquatableMixin {
  UpdateUserBenchmarkEntryArguments({required this.data});

  @override
  factory UpdateUserBenchmarkEntryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateUserBenchmarkEntryArgumentsFromJson(json);

  late UpdateUserBenchmarkEntryInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateUserBenchmarkEntryArgumentsToJson(this);
}

final UPDATE_USER_BENCHMARK_ENTRY_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateUserBenchmarkEntry'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateUserBenchmarkEntryInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateUserBenchmarkEntry'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmarkEntry'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateUserBenchmarkEntryMutation extends GraphQLQuery<
    UpdateUserBenchmarkEntry$Mutation, UpdateUserBenchmarkEntryArguments> {
  UpdateUserBenchmarkEntryMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_USER_BENCHMARK_ENTRY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateUserBenchmarkEntry';

  @override
  final UpdateUserBenchmarkEntryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateUserBenchmarkEntry$Mutation parse(Map<String, dynamic> json) =>
      UpdateUserBenchmarkEntry$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserBenchmarkEntryArguments extends JsonSerializable
    with EquatableMixin {
  DeleteUserBenchmarkEntryArguments({required this.id});

  @override
  factory DeleteUserBenchmarkEntryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserBenchmarkEntryArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserBenchmarkEntryArgumentsToJson(this);
}

final DELETE_USER_BENCHMARK_ENTRY_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteUserBenchmarkEntry'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteUserBenchmarkEntry'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteUserBenchmarkEntryMutation extends GraphQLQuery<
    DeleteUserBenchmarkEntry$Mutation, DeleteUserBenchmarkEntryArguments> {
  DeleteUserBenchmarkEntryMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_USER_BENCHMARK_ENTRY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteUserBenchmarkEntry';

  @override
  final DeleteUserBenchmarkEntryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteUserBenchmarkEntry$Mutation parse(Map<String, dynamic> json) =>
      DeleteUserBenchmarkEntry$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmarkArguments extends JsonSerializable with EquatableMixin {
  UserBenchmarkArguments({required this.id});

  @override
  factory UserBenchmarkArguments.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarkArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarkArgumentsToJson(this);
}

final USER_BENCHMARK_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userBenchmark'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userBenchmark'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmark'), directives: []),
              FieldNode(
                  name: NameNode(value: 'UserBenchmarkEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserBenchmarkEntry'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmark'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmark'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lastEntryAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipmentInfo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'benchmarkType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserBenchmarkQuery
    extends GraphQLQuery<UserBenchmark$Query, UserBenchmarkArguments> {
  UserBenchmarkQuery({required this.variables});

  @override
  final DocumentNode document = USER_BENCHMARK_QUERY_DOCUMENT;

  @override
  final String operationName = 'userBenchmark';

  @override
  final UserBenchmarkArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserBenchmark$Query parse(Map<String, dynamic> json) =>
      UserBenchmark$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmarkArguments extends JsonSerializable
    with EquatableMixin {
  UpdateUserBenchmarkArguments({required this.data});

  @override
  factory UpdateUserBenchmarkArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserBenchmarkArgumentsFromJson(json);

  late UpdateUserBenchmarkInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserBenchmarkArgumentsToJson(this);
}

final UPDATE_USER_BENCHMARK_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateUserBenchmark'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateUserBenchmarkInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateUserBenchmark'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmark'), directives: []),
              FieldNode(
                  name: NameNode(value: 'UserBenchmarkEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserBenchmarkEntry'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmark'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmark'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lastEntryAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipmentInfo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'benchmarkType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateUserBenchmarkMutation extends GraphQLQuery<
    UpdateUserBenchmark$Mutation, UpdateUserBenchmarkArguments> {
  UpdateUserBenchmarkMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_USER_BENCHMARK_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateUserBenchmark';

  @override
  final UpdateUserBenchmarkArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateUserBenchmark$Mutation parse(Map<String, dynamic> json) =>
      UpdateUserBenchmark$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmarkArguments extends JsonSerializable
    with EquatableMixin {
  CreateUserBenchmarkArguments({required this.data});

  @override
  factory CreateUserBenchmarkArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateUserBenchmarkArgumentsFromJson(json);

  late CreateUserBenchmarkInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateUserBenchmarkArgumentsToJson(this);
}

final CREATE_USER_BENCHMARK_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createUserBenchmark'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateUserBenchmarkInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createUserBenchmark'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmark'), directives: []),
              FieldNode(
                  name: NameNode(value: 'UserBenchmarkEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserBenchmarkEntry'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmark'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmark'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lastEntryAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipmentInfo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'benchmarkType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateUserBenchmarkMutation extends GraphQLQuery<
    CreateUserBenchmark$Mutation, CreateUserBenchmarkArguments> {
  CreateUserBenchmarkMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_USER_BENCHMARK_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createUserBenchmark';

  @override
  final CreateUserBenchmarkArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateUserBenchmark$Mutation parse(Map<String, dynamic> json) =>
      CreateUserBenchmark$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserBenchmarkArguments extends JsonSerializable
    with EquatableMixin {
  DeleteUserBenchmarkArguments({required this.id});

  @override
  factory DeleteUserBenchmarkArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteUserBenchmarkArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteUserBenchmarkArgumentsToJson(this);
}

final DELETE_USER_BENCHMARK_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteUserBenchmark'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteUserBenchmark'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteUserBenchmarkMutation extends GraphQLQuery<
    DeleteUserBenchmark$Mutation, DeleteUserBenchmarkArguments> {
  DeleteUserBenchmarkMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_USER_BENCHMARK_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteUserBenchmark';

  @override
  final DeleteUserBenchmarkArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteUserBenchmark$Mutation parse(Map<String, dynamic> json) =>
      DeleteUserBenchmark$Mutation.fromJson(json);
}

final USER_BENCHMARKS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userBenchmarks'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userBenchmarks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmark'), directives: []),
              FieldNode(
                  name: NameNode(value: 'UserBenchmarkEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserBenchmarkEntry'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmark'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmark'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lastEntryAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipmentInfo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'benchmarkType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserBenchmarksQuery
    extends GraphQLQuery<UserBenchmarks$Query, JsonSerializable> {
  UserBenchmarksQuery();

  @override
  final DocumentNode document = USER_BENCHMARKS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userBenchmarks';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserBenchmarks$Query parse(Map<String, dynamic> json) =>
      UserBenchmarks$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutPlansArguments extends JsonSerializable
    with EquatableMixin {
  TextSearchWorkoutPlansArguments({required this.text});

  @override
  factory TextSearchWorkoutPlansArguments.fromJson(Map<String, dynamic> json) =>
      _$TextSearchWorkoutPlansArgumentsFromJson(json);

  late String text;

  @override
  List<Object?> get props => [text];
  @override
  Map<String, dynamic> toJson() =>
      _$TextSearchWorkoutPlansArgumentsToJson(this);
}

final TEXT_SEARCH_WORKOUT_PLANS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'textSearchWorkoutPlans'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'text')),
            type:
                NamedTypeNode(name: NameNode(value: 'String'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'textSearchWorkoutPlans'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'text'),
                  value: VariableNode(name: NameNode(value: 'text')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class TextSearchWorkoutPlansQuery extends GraphQLQuery<
    TextSearchWorkoutPlans$Query, TextSearchWorkoutPlansArguments> {
  TextSearchWorkoutPlansQuery({required this.variables});

  @override
  final DocumentNode document = TEXT_SEARCH_WORKOUT_PLANS_QUERY_DOCUMENT;

  @override
  final String operationName = 'textSearchWorkoutPlans';

  @override
  final TextSearchWorkoutPlansArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  TextSearchWorkoutPlans$Query parse(Map<String, dynamic> json) =>
      TextSearchWorkoutPlans$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutPlanNamesArguments extends JsonSerializable
    with EquatableMixin {
  TextSearchWorkoutPlanNamesArguments({required this.text});

  @override
  factory TextSearchWorkoutPlanNamesArguments.fromJson(
          Map<String, dynamic> json) =>
      _$TextSearchWorkoutPlanNamesArgumentsFromJson(json);

  late String text;

  @override
  List<Object?> get props => [text];
  @override
  Map<String, dynamic> toJson() =>
      _$TextSearchWorkoutPlanNamesArgumentsToJson(this);
}

final TEXT_SEARCH_WORKOUT_PLAN_NAMES_QUERY_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'textSearchWorkoutPlanNames'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'text')),
            type:
                NamedTypeNode(name: NameNode(value: 'String'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'textSearchWorkoutPlanNames'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'text'),
                  value: VariableNode(name: NameNode(value: 'text')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'name'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ]))
]);

class TextSearchWorkoutPlanNamesQuery extends GraphQLQuery<
    TextSearchWorkoutPlanNames$Query, TextSearchWorkoutPlanNamesArguments> {
  TextSearchWorkoutPlanNamesQuery({required this.variables});

  @override
  final DocumentNode document = TEXT_SEARCH_WORKOUT_PLAN_NAMES_QUERY_DOCUMENT;

  @override
  final String operationName = 'textSearchWorkoutPlanNames';

  @override
  final TextSearchWorkoutPlanNamesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  TextSearchWorkoutPlanNames$Query parse(Map<String, dynamic> json) =>
      TextSearchWorkoutPlanNames$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutsArguments extends JsonSerializable with EquatableMixin {
  TextSearchWorkoutsArguments({required this.text});

  @override
  factory TextSearchWorkoutsArguments.fromJson(Map<String, dynamic> json) =>
      _$TextSearchWorkoutsArgumentsFromJson(json);

  late String text;

  @override
  List<Object?> get props => [text];
  @override
  Map<String, dynamic> toJson() => _$TextSearchWorkoutsArgumentsToJson(this);
}

final TEXT_SEARCH_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'textSearchWorkouts'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'text')),
            type:
                NamedTypeNode(name: NameNode(value: 'String'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'textSearchWorkouts'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'text'),
                  value: VariableNode(name: NameNode(value: 'text')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class TextSearchWorkoutsQuery extends GraphQLQuery<TextSearchWorkouts$Query,
    TextSearchWorkoutsArguments> {
  TextSearchWorkoutsQuery({required this.variables});

  @override
  final DocumentNode document = TEXT_SEARCH_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'textSearchWorkouts';

  @override
  final TextSearchWorkoutsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  TextSearchWorkouts$Query parse(Map<String, dynamic> json) =>
      TextSearchWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutNamesArguments extends JsonSerializable
    with EquatableMixin {
  TextSearchWorkoutNamesArguments({required this.text});

  @override
  factory TextSearchWorkoutNamesArguments.fromJson(Map<String, dynamic> json) =>
      _$TextSearchWorkoutNamesArgumentsFromJson(json);

  late String text;

  @override
  List<Object?> get props => [text];
  @override
  Map<String, dynamic> toJson() =>
      _$TextSearchWorkoutNamesArgumentsToJson(this);
}

final TEXT_SEARCH_WORKOUT_NAMES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'textSearchWorkoutNames'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'text')),
            type:
                NamedTypeNode(name: NameNode(value: 'String'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'textSearchWorkoutNames'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'text'),
                  value: VariableNode(name: NameNode(value: 'text')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'name'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ]))
]);

class TextSearchWorkoutNamesQuery extends GraphQLQuery<
    TextSearchWorkoutNames$Query, TextSearchWorkoutNamesArguments> {
  TextSearchWorkoutNamesQuery({required this.variables});

  @override
  final DocumentNode document = TEXT_SEARCH_WORKOUT_NAMES_QUERY_DOCUMENT;

  @override
  final String operationName = 'textSearchWorkoutNames';

  @override
  final TextSearchWorkoutNamesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  TextSearchWorkoutNames$Query parse(Map<String, dynamic> json) =>
      TextSearchWorkoutNames$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class MarkAnnouncementUpdateAsSeenArguments extends JsonSerializable
    with EquatableMixin {
  MarkAnnouncementUpdateAsSeenArguments({required this.data});

  @override
  factory MarkAnnouncementUpdateAsSeenArguments.fromJson(
          Map<String, dynamic> json) =>
      _$MarkAnnouncementUpdateAsSeenArgumentsFromJson(json);

  late MarkAnnouncementUpdateAsSeenInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$MarkAnnouncementUpdateAsSeenArgumentsToJson(this);
}

final MARK_ANNOUNCEMENT_UPDATE_AS_SEEN_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'markAnnouncementUpdateAsSeen'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'MarkAnnouncementUpdateAsSeenInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'markAnnouncementUpdateAsSeen'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class MarkAnnouncementUpdateAsSeenMutation extends GraphQLQuery<
    MarkAnnouncementUpdateAsSeen$Mutation,
    MarkAnnouncementUpdateAsSeenArguments> {
  MarkAnnouncementUpdateAsSeenMutation({required this.variables});

  @override
  final DocumentNode document =
      MARK_ANNOUNCEMENT_UPDATE_AS_SEEN_MUTATION_DOCUMENT;

  @override
  final String operationName = 'markAnnouncementUpdateAsSeen';

  @override
  final MarkAnnouncementUpdateAsSeenArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  MarkAnnouncementUpdateAsSeen$Mutation parse(Map<String, dynamic> json) =>
      MarkAnnouncementUpdateAsSeen$Mutation.fromJson(json);
}

final ANNOUNCEMENT_UPDATES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'announcementUpdates'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'announcementUpdates'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'AnnouncementUpdate'), directives: []),
              FieldNode(
                  name: NameNode(value: 'actions'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'AnnouncementUpdateAction'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'AnnouncementUpdateAction'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'AnnouncementUpdateAction'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'text'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'routeTo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'AnnouncementUpdate'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'AnnouncementUpdate'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'audioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'articleUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'title'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'subtitle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyOne'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyTwo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class AnnouncementUpdatesQuery
    extends GraphQLQuery<AnnouncementUpdates$Query, JsonSerializable> {
  AnnouncementUpdatesQuery();

  @override
  final DocumentNode document = ANNOUNCEMENT_UPDATES_QUERY_DOCUMENT;

  @override
  final String operationName = 'announcementUpdates';

  @override
  List<Object?> get props => [document, operationName];
  @override
  AnnouncementUpdates$Query parse(Map<String, dynamic> json) =>
      AnnouncementUpdates$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSectionArguments extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutSectionArguments({required this.data});

  @override
  factory UpdateWorkoutSectionArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSectionArgumentsFromJson(json);

  late UpdateWorkoutSectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSectionArgumentsToJson(this);
}

final UPDATE_WORKOUT_SECTION_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutSection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutSectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutSection'),
            alias: NameNode(value: 'updateWorkoutSection'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutSectionMutation extends GraphQLQuery<
    UpdateWorkoutSection$Mutation, UpdateWorkoutSectionArguments> {
  UpdateWorkoutSectionMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_SECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutSection';

  @override
  final UpdateWorkoutSectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutSection$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutSection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSectionArguments extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutSectionArguments({required this.data});

  @override
  factory CreateWorkoutSectionArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSectionArgumentsFromJson(json);

  late CreateWorkoutSectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSectionArgumentsToJson(this);
}

final CREATE_WORKOUT_SECTION_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutSection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutSectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutSection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutSectionMutation extends GraphQLQuery<
    CreateWorkoutSection$Mutation, CreateWorkoutSectionArguments> {
  CreateWorkoutSectionMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_SECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutSection';

  @override
  final CreateWorkoutSectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutSection$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutSection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutSectionsArguments extends JsonSerializable
    with EquatableMixin {
  ReorderWorkoutSectionsArguments({required this.data});

  @override
  factory ReorderWorkoutSectionsArguments.fromJson(Map<String, dynamic> json) =>
      _$ReorderWorkoutSectionsArgumentsFromJson(json);

  late List<UpdateSortPositionInput> data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$ReorderWorkoutSectionsArgumentsToJson(this);
}

final REORDER_WORKOUT_SECTIONS_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'reorderWorkoutSections'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: ListTypeNode(
                type: NamedTypeNode(
                    name: NameNode(value: 'UpdateSortPositionInput'),
                    isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'reorderWorkoutSections'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'sortPosition'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ]))
]);

class ReorderWorkoutSectionsMutation extends GraphQLQuery<
    ReorderWorkoutSections$Mutation, ReorderWorkoutSectionsArguments> {
  ReorderWorkoutSectionsMutation({required this.variables});

  @override
  final DocumentNode document = REORDER_WORKOUT_SECTIONS_MUTATION_DOCUMENT;

  @override
  final String operationName = 'reorderWorkoutSections';

  @override
  final ReorderWorkoutSectionsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ReorderWorkoutSections$Mutation parse(Map<String, dynamic> json) =>
      ReorderWorkoutSections$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutSectionByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutSectionByIdArguments({required this.id});

  @override
  factory DeleteWorkoutSectionByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutSectionByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutSectionByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_SECTION_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutSectionById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutSectionById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutSectionByIdMutation extends GraphQLQuery<
    DeleteWorkoutSectionById$Mutation, DeleteWorkoutSectionByIdArguments> {
  DeleteWorkoutSectionByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_WORKOUT_SECTION_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutSectionById';

  @override
  final DeleteWorkoutSectionByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutSectionById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutSectionById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateScheduledWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  UpdateScheduledWorkoutArguments({required this.data});

  @override
  factory UpdateScheduledWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateScheduledWorkoutArgumentsFromJson(json);

  late UpdateScheduledWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateScheduledWorkoutArgumentsToJson(this);
}

final UPDATE_SCHEDULED_WORKOUT_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateScheduledWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateScheduledWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateScheduledWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ScheduledWorkout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workout'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'GymProfile'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'GymProfile'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ScheduledWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ScheduledWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scheduledAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanEnrolmentId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanDayWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateScheduledWorkoutMutation extends GraphQLQuery<
    UpdateScheduledWorkout$Mutation, UpdateScheduledWorkoutArguments> {
  UpdateScheduledWorkoutMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_SCHEDULED_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateScheduledWorkout';

  @override
  final UpdateScheduledWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateScheduledWorkout$Mutation parse(Map<String, dynamic> json) =>
      UpdateScheduledWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateScheduledWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  CreateScheduledWorkoutArguments({required this.data});

  @override
  factory CreateScheduledWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateScheduledWorkoutArgumentsFromJson(json);

  late CreateScheduledWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateScheduledWorkoutArgumentsToJson(this);
}

final CREATE_SCHEDULED_WORKOUT_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createScheduledWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateScheduledWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createScheduledWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ScheduledWorkout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workout'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'GymProfile'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'GymProfile'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ScheduledWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ScheduledWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scheduledAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanEnrolmentId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanDayWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateScheduledWorkoutMutation extends GraphQLQuery<
    CreateScheduledWorkout$Mutation, CreateScheduledWorkoutArguments> {
  CreateScheduledWorkoutMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_SCHEDULED_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createScheduledWorkout';

  @override
  final CreateScheduledWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateScheduledWorkout$Mutation parse(Map<String, dynamic> json) =>
      CreateScheduledWorkout$Mutation.fromJson(json);
}

final USER_SCHEDULED_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userScheduledWorkouts'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userScheduledWorkouts'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ScheduledWorkout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workout'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'GymProfile'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'GymProfile'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ScheduledWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ScheduledWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scheduledAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanEnrolmentId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanDayWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedWorkoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserScheduledWorkoutsQuery
    extends GraphQLQuery<UserScheduledWorkouts$Query, JsonSerializable> {
  UserScheduledWorkoutsQuery();

  @override
  final DocumentNode document = USER_SCHEDULED_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userScheduledWorkouts';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserScheduledWorkouts$Query parse(Map<String, dynamic> json) =>
      UserScheduledWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteScheduledWorkoutByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteScheduledWorkoutByIdArguments({required this.id});

  @override
  factory DeleteScheduledWorkoutByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteScheduledWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteScheduledWorkoutByIdArgumentsToJson(this);
}

final DELETE_SCHEDULED_WORKOUT_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteScheduledWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteScheduledWorkoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteScheduledWorkoutByIdMutation extends GraphQLQuery<
    DeleteScheduledWorkoutById$Mutation, DeleteScheduledWorkoutByIdArguments> {
  DeleteScheduledWorkoutByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_SCHEDULED_WORKOUT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteScheduledWorkoutById';

  @override
  final DeleteScheduledWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteScheduledWorkoutById$Mutation parse(Map<String, dynamic> json) =>
      DeleteScheduledWorkoutById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateClubMembersFeedPostArguments extends JsonSerializable
    with EquatableMixin {
  CreateClubMembersFeedPostArguments(
      {required this.clubId, required this.data});

  @override
  factory CreateClubMembersFeedPostArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateClubMembersFeedPostArgumentsFromJson(json);

  late String clubId;

  late CreateStreamFeedActivityInput data;

  @override
  List<Object?> get props => [clubId, data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateClubMembersFeedPostArgumentsToJson(this);
}

final CREATE_CLUB_MEMBERS_FEED_POST_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createClubMembersFeedPost'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateStreamFeedActivityInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createClubMembersFeedPost'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId'))),
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'StreamEnrichedActivity'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'reactionCounts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'StreamActivityReactionCounts'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'actor'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null),
                    FieldNode(
                        name: NameNode(value: 'data'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'name'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'image'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null)
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'extraData'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'StreamActivityExtraData'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'creator'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'id'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'data'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FieldNode(
                                    name: NameNode(value: 'name'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null),
                                FieldNode(
                                    name: NameNode(value: 'image'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null)
                              ]))
                        ])),
                    FieldNode(
                        name: NameNode(value: 'club'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'id'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'data'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FieldNode(
                                    name: NameNode(value: 'name'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null),
                                FieldNode(
                                    name: NameNode(value: 'image'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null)
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'StreamActivityReactionCounts'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'StreamActivityReactionCounts'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'StreamActivityExtraData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'StreamActivityExtraData'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'title'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'caption'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'articleUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'audioUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'originalPostId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'StreamEnrichedActivity'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'StreamEnrichedActivity'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'verb'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'object'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'time'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userLikeReactionId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateClubMembersFeedPostMutation extends GraphQLQuery<
    CreateClubMembersFeedPost$Mutation, CreateClubMembersFeedPostArguments> {
  CreateClubMembersFeedPostMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_CLUB_MEMBERS_FEED_POST_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createClubMembersFeedPost';

  @override
  final CreateClubMembersFeedPostArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateClubMembersFeedPost$Mutation parse(Map<String, dynamic> json) =>
      CreateClubMembersFeedPost$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ClubMembersFeedPostsArguments extends JsonSerializable
    with EquatableMixin {
  ClubMembersFeedPostsArguments(
      {required this.clubId, required this.limit, required this.offset});

  @override
  factory ClubMembersFeedPostsArguments.fromJson(Map<String, dynamic> json) =>
      _$ClubMembersFeedPostsArgumentsFromJson(json);

  late String clubId;

  late int limit;

  late int offset;

  @override
  List<Object?> get props => [clubId, limit, offset];
  @override
  Map<String, dynamic> toJson() => _$ClubMembersFeedPostsArgumentsToJson(this);
}

final CLUB_MEMBERS_FEED_POSTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'clubMembersFeedPosts'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'limit')),
            type: NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'offset')),
            type: NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clubMembersFeedPosts'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId'))),
              ArgumentNode(
                  name: NameNode(value: 'limit'),
                  value: VariableNode(name: NameNode(value: 'limit'))),
              ArgumentNode(
                  name: NameNode(value: 'offset'),
                  value: VariableNode(name: NameNode(value: 'offset')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'StreamEnrichedActivity'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'reactionCounts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'StreamActivityReactionCounts'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'actor'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null),
                    FieldNode(
                        name: NameNode(value: 'data'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'name'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'image'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null)
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'extraData'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'StreamActivityExtraData'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'creator'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'id'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'data'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FieldNode(
                                    name: NameNode(value: 'name'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null),
                                FieldNode(
                                    name: NameNode(value: 'image'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null)
                              ]))
                        ])),
                    FieldNode(
                        name: NameNode(value: 'club'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'id'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'data'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FieldNode(
                                    name: NameNode(value: 'name'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null),
                                FieldNode(
                                    name: NameNode(value: 'image'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null)
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'StreamActivityReactionCounts'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'StreamActivityReactionCounts'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'StreamActivityExtraData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'StreamActivityExtraData'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'title'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'caption'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'articleUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'audioUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'originalPostId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'StreamEnrichedActivity'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'StreamEnrichedActivity'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'verb'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'object'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'time'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userLikeReactionId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClubMembersFeedPostsQuery extends GraphQLQuery<ClubMembersFeedPosts$Query,
    ClubMembersFeedPostsArguments> {
  ClubMembersFeedPostsQuery({required this.variables});

  @override
  final DocumentNode document = CLUB_MEMBERS_FEED_POSTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'clubMembersFeedPosts';

  @override
  final ClubMembersFeedPostsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClubMembersFeedPosts$Query parse(Map<String, dynamic> json) =>
      ClubMembersFeedPosts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteClubMembersFeedPostArguments extends JsonSerializable
    with EquatableMixin {
  DeleteClubMembersFeedPostArguments({required this.activityId});

  @override
  factory DeleteClubMembersFeedPostArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteClubMembersFeedPostArgumentsFromJson(json);

  late String activityId;

  @override
  List<Object?> get props => [activityId];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteClubMembersFeedPostArgumentsToJson(this);
}

final DELETE_CLUB_MEMBERS_FEED_POST_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteClubMembersFeedPost'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'activityId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteClubMembersFeedPost'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'activityId'),
                  value: VariableNode(name: NameNode(value: 'activityId')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteClubMembersFeedPostMutation extends GraphQLQuery<
    DeleteClubMembersFeedPost$Mutation, DeleteClubMembersFeedPostArguments> {
  DeleteClubMembersFeedPostMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_CLUB_MEMBERS_FEED_POST_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteClubMembersFeedPost';

  @override
  final DeleteClubMembersFeedPostArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteClubMembersFeedPost$Mutation parse(Map<String, dynamic> json) =>
      DeleteClubMembersFeedPost$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class PublicWorkoutsArguments extends JsonSerializable with EquatableMixin {
  PublicWorkoutsArguments({this.cursor, this.filters, this.take});

  @override
  factory PublicWorkoutsArguments.fromJson(Map<String, dynamic> json) =>
      _$PublicWorkoutsArgumentsFromJson(json);

  final String? cursor;

  final WorkoutFiltersInput? filters;

  final int? take;

  @override
  List<Object?> get props => [cursor, filters, take];
  @override
  Map<String, dynamic> toJson() => _$PublicWorkoutsArgumentsToJson(this);
}

final PUBLIC_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'publicWorkouts'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'cursor')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'filters')),
            type: NamedTypeNode(
                name: NameNode(value: 'WorkoutFiltersInput'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'take')),
            type: NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'publicWorkouts'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'cursor'),
                  value: VariableNode(name: NameNode(value: 'cursor'))),
              ArgumentNode(
                  name: NameNode(value: 'filters'),
                  value: VariableNode(name: NameNode(value: 'filters'))),
              ArgumentNode(
                  name: NameNode(value: 'take'),
                  value: VariableNode(name: NameNode(value: 'take')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class PublicWorkoutsQuery
    extends GraphQLQuery<PublicWorkouts$Query, PublicWorkoutsArguments> {
  PublicWorkoutsQuery({required this.variables});

  @override
  final DocumentNode document = PUBLIC_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'publicWorkouts';

  @override
  final PublicWorkoutsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  PublicWorkouts$Query parse(Map<String, dynamic> json) =>
      PublicWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutArguments extends JsonSerializable with EquatableMixin {
  UpdateWorkoutArguments({required this.data});

  @override
  factory UpdateWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutArgumentsFromJson(json);

  late UpdateWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutArgumentsToJson(this);
}

final UPDATE_WORKOUT_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkout'),
            alias: NameNode(value: 'updateWorkout'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Workout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutGoals'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutGoal'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutTags'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutTag'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Workout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutMutation
    extends GraphQLQuery<UpdateWorkout$Mutation, UpdateWorkoutArguments> {
  UpdateWorkoutMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkout';

  @override
  final UpdateWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkout$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkout$Mutation.fromJson(json);
}

final USER_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userWorkouts'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userWorkouts'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserWorkoutsQuery
    extends GraphQLQuery<UserWorkouts$Query, JsonSerializable> {
  UserWorkoutsQuery();

  @override
  final DocumentNode document = USER_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userWorkouts';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserWorkouts$Query parse(Map<String, dynamic> json) =>
      UserWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DuplicateWorkoutByIdArguments extends JsonSerializable
    with EquatableMixin {
  DuplicateWorkoutByIdArguments({required this.id});

  @override
  factory DuplicateWorkoutByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DuplicateWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DuplicateWorkoutByIdArgumentsToJson(this);
}

final DUPLICATE_WORKOUT_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'duplicateWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'duplicateWorkoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class DuplicateWorkoutByIdMutation extends GraphQLQuery<
    DuplicateWorkoutById$Mutation, DuplicateWorkoutByIdArguments> {
  DuplicateWorkoutByIdMutation({required this.variables});

  @override
  final DocumentNode document = DUPLICATE_WORKOUT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'duplicateWorkoutById';

  @override
  final DuplicateWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DuplicateWorkoutById$Mutation parse(Map<String, dynamic> json) =>
      DuplicateWorkoutById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserPublicWorkoutsArguments extends JsonSerializable with EquatableMixin {
  UserPublicWorkoutsArguments({required this.userId});

  @override
  factory UserPublicWorkoutsArguments.fromJson(Map<String, dynamic> json) =>
      _$UserPublicWorkoutsArgumentsFromJson(json);

  late String userId;

  @override
  List<Object?> get props => [userId];
  @override
  Map<String, dynamic> toJson() => _$UserPublicWorkoutsArgumentsToJson(this);
}

final USER_PUBLIC_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userPublicWorkouts'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userPublicWorkouts'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userId'),
                  value: VariableNode(name: NameNode(value: 'userId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserPublicWorkoutsQuery extends GraphQLQuery<UserPublicWorkouts$Query,
    UserPublicWorkoutsArguments> {
  UserPublicWorkoutsQuery({required this.variables});

  @override
  final DocumentNode document = USER_PUBLIC_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userPublicWorkouts';

  @override
  final UserPublicWorkoutsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserPublicWorkouts$Query parse(Map<String, dynamic> json) =>
      UserPublicWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutArguments extends JsonSerializable with EquatableMixin {
  CreateWorkoutArguments({required this.data});

  @override
  factory CreateWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutArgumentsFromJson(json);

  late CreateWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutArgumentsToJson(this);
}

final CREATE_WORKOUT_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutMutation
    extends GraphQLQuery<CreateWorkout$Mutation, CreateWorkoutArguments> {
  CreateWorkoutMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkout';

  @override
  final CreateWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkout$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class WorkoutByIdArguments extends JsonSerializable with EquatableMixin {
  WorkoutByIdArguments({required this.id});

  @override
  factory WorkoutByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$WorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$WorkoutByIdArgumentsToJson(this);
}

final WORKOUT_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'workoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'workoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class WorkoutByIdQuery
    extends GraphQLQuery<WorkoutById$Query, WorkoutByIdArguments> {
  WorkoutByIdQuery({required this.variables});

  @override
  final DocumentNode document = WORKOUT_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'workoutById';

  @override
  final WorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  WorkoutById$Query parse(Map<String, dynamic> json) =>
      WorkoutById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubMemberNoteArguments extends JsonSerializable
    with EquatableMixin {
  UpdateClubMemberNoteArguments({required this.data});

  @override
  factory UpdateClubMemberNoteArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubMemberNoteArgumentsFromJson(json);

  late UpdateClubMemberNoteInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubMemberNoteArgumentsToJson(this);
}

final UPDATE_CLUB_MEMBER_NOTE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateClubMemberNote'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateClubMemberNoteInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateClubMemberNote'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubMemberNote'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubMemberNote'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubMemberNote'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateClubMemberNoteMutation extends GraphQLQuery<
    UpdateClubMemberNote$Mutation, UpdateClubMemberNoteArguments> {
  UpdateClubMemberNoteMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_CLUB_MEMBER_NOTE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateClubMemberNote';

  @override
  final UpdateClubMemberNoteArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateClubMemberNote$Mutation parse(Map<String, dynamic> json) =>
      UpdateClubMemberNote$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateClubMemberNoteArguments extends JsonSerializable
    with EquatableMixin {
  CreateClubMemberNoteArguments({required this.data});

  @override
  factory CreateClubMemberNoteArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateClubMemberNoteArgumentsFromJson(json);

  late CreateClubMemberNoteInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateClubMemberNoteArgumentsToJson(this);
}

final CREATE_CLUB_MEMBER_NOTE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createClubMemberNote'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateClubMemberNoteInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createClubMemberNote'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubMemberNote'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubMemberNote'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubMemberNote'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateClubMemberNoteMutation extends GraphQLQuery<
    CreateClubMemberNote$Mutation, CreateClubMemberNoteArguments> {
  CreateClubMemberNoteMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_CLUB_MEMBER_NOTE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createClubMemberNote';

  @override
  final CreateClubMemberNoteArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateClubMemberNote$Mutation parse(Map<String, dynamic> json) =>
      CreateClubMemberNote$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ClubMemberNotesArguments extends JsonSerializable with EquatableMixin {
  ClubMemberNotesArguments(
      {required this.clubId, required this.memberId, this.cursor, this.take});

  @override
  factory ClubMemberNotesArguments.fromJson(Map<String, dynamic> json) =>
      _$ClubMemberNotesArgumentsFromJson(json);

  late String clubId;

  late String memberId;

  final String? cursor;

  final int? take;

  @override
  List<Object?> get props => [clubId, memberId, cursor, take];
  @override
  Map<String, dynamic> toJson() => _$ClubMemberNotesArgumentsToJson(this);
}

final CLUB_MEMBER_NOTES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'clubMemberNotes'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'memberId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'cursor')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'take')),
            type: NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clubMemberNotes'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId'))),
              ArgumentNode(
                  name: NameNode(value: 'memberId'),
                  value: VariableNode(name: NameNode(value: 'memberId'))),
              ArgumentNode(
                  name: NameNode(value: 'cursor'),
                  value: VariableNode(name: NameNode(value: 'cursor'))),
              ArgumentNode(
                  name: NameNode(value: 'take'),
                  value: VariableNode(name: NameNode(value: 'take')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubMemberNote'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserAvatarData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubMemberNote'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubMemberNote'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClubMemberNotesQuery
    extends GraphQLQuery<ClubMemberNotes$Query, ClubMemberNotesArguments> {
  ClubMemberNotesQuery({required this.variables});

  @override
  final DocumentNode document = CLUB_MEMBER_NOTES_QUERY_DOCUMENT;

  @override
  final String operationName = 'clubMemberNotes';

  @override
  final ClubMemberNotesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClubMemberNotes$Query parse(Map<String, dynamic> json) =>
      ClubMemberNotes$Query.fromJson(json);
}

final USER_MAX_UNBROKEN_EXERCISE_TRACKERS_QUERY_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userMaxUnbrokenExerciseTrackers'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userMaxUnbrokenExerciseTrackers'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserMaxUnbrokenExerciseTracker'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserMaxUnbrokenExerciseTracker'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserMaxUnbrokenExerciseTracker'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'Move'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'Equipment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Equipment'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'ExerciseTrackerManualEntries'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ExerciseTrackerManualEntry'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ExerciseTrackerManualEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ExerciseTrackerManualEntry'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserMaxUnbrokenExerciseTrackersQuery extends GraphQLQuery<
    UserMaxUnbrokenExerciseTrackers$Query, JsonSerializable> {
  UserMaxUnbrokenExerciseTrackersQuery();

  @override
  final DocumentNode document =
      USER_MAX_UNBROKEN_EXERCISE_TRACKERS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userMaxUnbrokenExerciseTrackers';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserMaxUnbrokenExerciseTrackers$Query parse(Map<String, dynamic> json) =>
      UserMaxUnbrokenExerciseTrackers$Query.fromJson(json);
}

final USER_MAX_LOAD_EXERCISE_TRACKERS_QUERY_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userMaxLoadExerciseTrackers'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userMaxLoadExerciseTrackers'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserMaxLoadExerciseTracker'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserMaxLoadExerciseTracker'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserMaxLoadExerciseTracker'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'Move'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'Equipment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Equipment'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'ExerciseTrackerManualEntries'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ExerciseTrackerManualEntry'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ExerciseTrackerManualEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ExerciseTrackerManualEntry'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserMaxLoadExerciseTrackersQuery
    extends GraphQLQuery<UserMaxLoadExerciseTrackers$Query, JsonSerializable> {
  UserMaxLoadExerciseTrackersQuery();

  @override
  final DocumentNode document = USER_MAX_LOAD_EXERCISE_TRACKERS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userMaxLoadExerciseTrackers';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserMaxLoadExerciseTrackers$Query parse(Map<String, dynamic> json) =>
      UserMaxLoadExerciseTrackers$Query.fromJson(json);
}

final USER_FASTEST_TIME_EXERCISE_TRACKERS_QUERY_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userFastestTimeExerciseTrackers'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userFastestTimeExerciseTrackers'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserFastestTimeExerciseTracker'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserFastestTimeExerciseTracker'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserFastestTimeExerciseTracker'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'Move'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'Equipment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Equipment'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'ExerciseTrackerManualEntries'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ExerciseTrackerManualEntry'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ExerciseTrackerManualEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ExerciseTrackerManualEntry'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserFastestTimeExerciseTrackersQuery extends GraphQLQuery<
    UserFastestTimeExerciseTrackers$Query, JsonSerializable> {
  UserFastestTimeExerciseTrackersQuery();

  @override
  final DocumentNode document =
      USER_FASTEST_TIME_EXERCISE_TRACKERS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userFastestTimeExerciseTrackers';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserFastestTimeExerciseTrackers$Query parse(Map<String, dynamic> json) =>
      UserFastestTimeExerciseTrackers$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveDocumentFromSkillArguments extends JsonSerializable
    with EquatableMixin {
  RemoveDocumentFromSkillArguments({required this.data});

  @override
  factory RemoveDocumentFromSkillArguments.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveDocumentFromSkillArgumentsFromJson(json);

  late RemoveDocumentFromSkillInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveDocumentFromSkillArgumentsToJson(this);
}

final REMOVE_DOCUMENT_FROM_SKILL_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'removeDocumentFromSkill'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'RemoveDocumentFromSkillInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'removeDocumentFromSkill'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Skill'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Skill'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Skill'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'experience'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'certification'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'awardingBody'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'certificateRef'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'documentUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class RemoveDocumentFromSkillMutation extends GraphQLQuery<
    RemoveDocumentFromSkill$Mutation, RemoveDocumentFromSkillArguments> {
  RemoveDocumentFromSkillMutation({required this.variables});

  @override
  final DocumentNode document = REMOVE_DOCUMENT_FROM_SKILL_MUTATION_DOCUMENT;

  @override
  final String operationName = 'removeDocumentFromSkill';

  @override
  final RemoveDocumentFromSkillArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  RemoveDocumentFromSkill$Mutation parse(Map<String, dynamic> json) =>
      RemoveDocumentFromSkill$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteSkillByIdArguments extends JsonSerializable with EquatableMixin {
  DeleteSkillByIdArguments({required this.id});

  @override
  factory DeleteSkillByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteSkillByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteSkillByIdArgumentsToJson(this);
}

final DELETE_SKILL_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteSkillById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteSkillById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteSkillByIdMutation
    extends GraphQLQuery<DeleteSkillById$Mutation, DeleteSkillByIdArguments> {
  DeleteSkillByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_SKILL_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteSkillById';

  @override
  final DeleteSkillByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteSkillById$Mutation parse(Map<String, dynamic> json) =>
      DeleteSkillById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AddDocumentToSkillArguments extends JsonSerializable with EquatableMixin {
  AddDocumentToSkillArguments({required this.data});

  @override
  factory AddDocumentToSkillArguments.fromJson(Map<String, dynamic> json) =>
      _$AddDocumentToSkillArgumentsFromJson(json);

  late AddDocumentToSkillInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$AddDocumentToSkillArgumentsToJson(this);
}

final ADD_DOCUMENT_TO_SKILL_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'addDocumentToSkill'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'AddDocumentToSkillInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'addDocumentToSkill'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Skill'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Skill'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Skill'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'experience'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'certification'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'awardingBody'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'certificateRef'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'documentUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class AddDocumentToSkillMutation extends GraphQLQuery<
    AddDocumentToSkill$Mutation, AddDocumentToSkillArguments> {
  AddDocumentToSkillMutation({required this.variables});

  @override
  final DocumentNode document = ADD_DOCUMENT_TO_SKILL_MUTATION_DOCUMENT;

  @override
  final String operationName = 'addDocumentToSkill';

  @override
  final AddDocumentToSkillArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  AddDocumentToSkill$Mutation parse(Map<String, dynamic> json) =>
      AddDocumentToSkill$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateSkillArguments extends JsonSerializable with EquatableMixin {
  CreateSkillArguments({required this.data});

  @override
  factory CreateSkillArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateSkillArgumentsFromJson(json);

  late CreateSkillInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateSkillArgumentsToJson(this);
}

final CREATE_SKILL_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createSkill'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateSkillInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createSkill'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Skill'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Skill'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Skill'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'experience'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'certification'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'awardingBody'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'certificateRef'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'documentUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateSkillMutation
    extends GraphQLQuery<CreateSkill$Mutation, CreateSkillArguments> {
  CreateSkillMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_SKILL_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createSkill';

  @override
  final CreateSkillArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateSkill$Mutation parse(Map<String, dynamic> json) =>
      CreateSkill$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateSkillArguments extends JsonSerializable with EquatableMixin {
  UpdateSkillArguments({required this.data});

  @override
  factory UpdateSkillArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateSkillArgumentsFromJson(json);

  late UpdateSkillInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateSkillArgumentsToJson(this);
}

final UPDATE_SKILL_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateSkill'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateSkillInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateSkill'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Skill'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Skill'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Skill'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'experience'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'certification'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'awardingBody'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'certificateRef'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'documentUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateSkillMutation
    extends GraphQLQuery<UpdateSkill$Mutation, UpdateSkillArguments> {
  UpdateSkillMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_SKILL_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateSkill';

  @override
  final UpdateSkillArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateSkill$Mutation parse(Map<String, dynamic> json) =>
      UpdateSkill$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveMemberAdminStatusArguments extends JsonSerializable
    with EquatableMixin {
  RemoveMemberAdminStatusArguments(
      {required this.userId, required this.clubId});

  @override
  factory RemoveMemberAdminStatusArguments.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveMemberAdminStatusArgumentsFromJson(json);

  late String userId;

  late String clubId;

  @override
  List<Object?> get props => [userId, clubId];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveMemberAdminStatusArgumentsToJson(this);
}

final REMOVE_MEMBER_ADMIN_STATUS_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'removeMemberAdminStatus'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'removeMemberAdminStatus'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userId'),
                  value: VariableNode(name: NameNode(value: 'userId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubMemberSummary'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubMemberSummary'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubMemberSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubMemberSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubMemberSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'townCity'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'countryCode'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tagline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'skills'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class RemoveMemberAdminStatusMutation extends GraphQLQuery<
    RemoveMemberAdminStatus$Mutation, RemoveMemberAdminStatusArguments> {
  RemoveMemberAdminStatusMutation({required this.variables});

  @override
  final DocumentNode document = REMOVE_MEMBER_ADMIN_STATUS_MUTATION_DOCUMENT;

  @override
  final String operationName = 'removeMemberAdminStatus';

  @override
  final RemoveMemberAdminStatusArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  RemoveMemberAdminStatus$Mutation parse(Map<String, dynamic> json) =>
      RemoveMemberAdminStatus$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AddUserToClubViaInviteTokenArguments extends JsonSerializable
    with EquatableMixin {
  AddUserToClubViaInviteTokenArguments(
      {required this.userId, required this.clubInviteTokenId});

  @override
  factory AddUserToClubViaInviteTokenArguments.fromJson(
          Map<String, dynamic> json) =>
      _$AddUserToClubViaInviteTokenArgumentsFromJson(json);

  late String userId;

  late String clubInviteTokenId;

  @override
  List<Object?> get props => [userId, clubInviteTokenId];
  @override
  Map<String, dynamic> toJson() =>
      _$AddUserToClubViaInviteTokenArgumentsToJson(this);
}

final ADD_USER_TO_CLUB_VIA_INVITE_TOKEN_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'addUserToClubViaInviteToken'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubInviteTokenId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'addUserToClubViaInviteToken'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userId'),
                  value: VariableNode(name: NameNode(value: 'userId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubInviteTokenId'),
                  value:
                      VariableNode(name: NameNode(value: 'clubInviteTokenId')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class AddUserToClubViaInviteTokenMutation extends GraphQLQuery<
    AddUserToClubViaInviteToken$Mutation,
    AddUserToClubViaInviteTokenArguments> {
  AddUserToClubViaInviteTokenMutation({required this.variables});

  @override
  final DocumentNode document =
      ADD_USER_TO_CLUB_VIA_INVITE_TOKEN_MUTATION_DOCUMENT;

  @override
  final String operationName = 'addUserToClubViaInviteToken';

  @override
  final AddUserToClubViaInviteTokenArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  AddUserToClubViaInviteToken$Mutation parse(Map<String, dynamic> json) =>
      AddUserToClubViaInviteToken$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserJoinPublicClubArguments extends JsonSerializable with EquatableMixin {
  UserJoinPublicClubArguments({required this.clubId});

  @override
  factory UserJoinPublicClubArguments.fromJson(Map<String, dynamic> json) =>
      _$UserJoinPublicClubArgumentsFromJson(json);

  late String clubId;

  @override
  List<Object?> get props => [clubId];
  @override
  Map<String, dynamic> toJson() => _$UserJoinPublicClubArgumentsToJson(this);
}

final USER_JOIN_PUBLIC_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'userJoinPublicClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userJoinPublicClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserJoinPublicClubMutation extends GraphQLQuery<
    UserJoinPublicClub$Mutation, UserJoinPublicClubArguments> {
  UserJoinPublicClubMutation({required this.variables});

  @override
  final DocumentNode document = USER_JOIN_PUBLIC_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'userJoinPublicClub';

  @override
  final UserJoinPublicClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserJoinPublicClub$Mutation parse(Map<String, dynamic> json) =>
      UserJoinPublicClub$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CheckClubInviteTokenArguments extends JsonSerializable
    with EquatableMixin {
  CheckClubInviteTokenArguments({required this.id});

  @override
  factory CheckClubInviteTokenArguments.fromJson(Map<String, dynamic> json) =>
      _$CheckClubInviteTokenArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$CheckClubInviteTokenArgumentsToJson(this);
}

final CHECK_CLUB_INVITE_TOKEN_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'checkClubInviteToken'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'checkClubInviteToken'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              InlineFragmentNode(
                  typeCondition: TypeConditionNode(
                      on: NamedTypeNode(
                          name: NameNode(value: 'ClubInviteTokenData'),
                          isNonNull: false)),
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteTokenData'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Club'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'ClubSummary'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Owner'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'UserAvatarData'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Admins'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'UserAvatarData'),
                                    directives: [])
                              ]))
                        ])),
                    FieldNode(
                        name: NameNode(value: 'introVideoUri'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null),
                    FieldNode(
                        name: NameNode(value: 'introVideoThumbUri'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null),
                    FieldNode(
                        name: NameNode(value: 'introAudioUri'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null)
                  ])),
              InlineFragmentNode(
                  typeCondition: TypeConditionNode(
                      on: NamedTypeNode(
                          name: NameNode(value: 'InviteTokenError'),
                          isNonNull: false)),
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'InviteTokenError'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteTokenData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteTokenData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'token'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'InviteTokenError'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'InviteTokenError'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'message'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CheckClubInviteTokenQuery extends GraphQLQuery<CheckClubInviteToken$Query,
    CheckClubInviteTokenArguments> {
  CheckClubInviteTokenQuery({required this.variables});

  @override
  final DocumentNode document = CHECK_CLUB_INVITE_TOKEN_QUERY_DOCUMENT;

  @override
  final String operationName = 'checkClubInviteToken';

  @override
  final CheckClubInviteTokenArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CheckClubInviteToken$Query parse(Map<String, dynamic> json) =>
      CheckClubInviteToken$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ClubInviteTokensArguments extends JsonSerializable with EquatableMixin {
  ClubInviteTokensArguments({required this.clubId});

  @override
  factory ClubInviteTokensArguments.fromJson(Map<String, dynamic> json) =>
      _$ClubInviteTokensArgumentsFromJson(json);

  late String clubId;

  @override
  List<Object?> get props => [clubId];
  @override
  Map<String, dynamic> toJson() => _$ClubInviteTokensArgumentsToJson(this);
}

final CLUB_INVITE_TOKENS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'clubInviteTokens'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clubInviteTokens'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'tokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClubInviteTokensQuery
    extends GraphQLQuery<ClubInviteTokens$Query, ClubInviteTokensArguments> {
  ClubInviteTokensQuery({required this.variables});

  @override
  final DocumentNode document = CLUB_INVITE_TOKENS_QUERY_DOCUMENT;

  @override
  final String operationName = 'clubInviteTokens';

  @override
  final ClubInviteTokensArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClubInviteTokens$Query parse(Map<String, dynamic> json) =>
      ClubInviteTokens$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveUserFromClubArguments extends JsonSerializable with EquatableMixin {
  RemoveUserFromClubArguments(
      {required this.userToRemoveId, required this.clubId});

  @override
  factory RemoveUserFromClubArguments.fromJson(Map<String, dynamic> json) =>
      _$RemoveUserFromClubArgumentsFromJson(json);

  late String userToRemoveId;

  late String clubId;

  @override
  List<Object?> get props => [userToRemoveId, clubId];
  @override
  Map<String, dynamic> toJson() => _$RemoveUserFromClubArgumentsToJson(this);
}

final REMOVE_USER_FROM_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'removeUserFromClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userToRemoveId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'removeUserFromClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userToRemoveId'),
                  value: VariableNode(name: NameNode(value: 'userToRemoveId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubMemberSummary'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubMemberSummary'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubMemberSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubMemberSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubMemberSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'townCity'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'countryCode'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tagline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'skills'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class RemoveUserFromClubMutation extends GraphQLQuery<
    RemoveUserFromClub$Mutation, RemoveUserFromClubArguments> {
  RemoveUserFromClubMutation({required this.variables});

  @override
  final DocumentNode document = REMOVE_USER_FROM_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'removeUserFromClub';

  @override
  final RemoveUserFromClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  RemoveUserFromClub$Mutation parse(Map<String, dynamic> json) =>
      RemoveUserFromClub$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CheckUserClubMemberStatusArguments extends JsonSerializable
    with EquatableMixin {
  CheckUserClubMemberStatusArguments({required this.clubId});

  @override
  factory CheckUserClubMemberStatusArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CheckUserClubMemberStatusArgumentsFromJson(json);

  late String clubId;

  @override
  List<Object?> get props => [clubId];
  @override
  Map<String, dynamic> toJson() =>
      _$CheckUserClubMemberStatusArgumentsToJson(this);
}

final CHECK_USER_CLUB_MEMBER_STATUS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'checkUserClubMemberStatus'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'checkUserClubMemberStatus'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class CheckUserClubMemberStatusQuery extends GraphQLQuery<
    CheckUserClubMemberStatus$Query, CheckUserClubMemberStatusArguments> {
  CheckUserClubMemberStatusQuery({required this.variables});

  @override
  final DocumentNode document = CHECK_USER_CLUB_MEMBER_STATUS_QUERY_DOCUMENT;

  @override
  final String operationName = 'checkUserClubMemberStatus';

  @override
  final CheckUserClubMemberStatusArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CheckUserClubMemberStatus$Query parse(Map<String, dynamic> json) =>
      CheckUserClubMemberStatus$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ClubMembersArguments extends JsonSerializable with EquatableMixin {
  ClubMembersArguments({required this.clubId});

  @override
  factory ClubMembersArguments.fromJson(Map<String, dynamic> json) =>
      _$ClubMembersArgumentsFromJson(json);

  late String clubId;

  @override
  List<Object?> get props => [clubId];
  @override
  Map<String, dynamic> toJson() => _$ClubMembersArgumentsToJson(this);
}

final CLUB_MEMBERS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'clubMembers'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clubMembers'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubMemberSummary'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubMemberSummary'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubMemberSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubMemberSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubMemberSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'townCity'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'countryCode'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tagline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'skills'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClubMembersQuery
    extends GraphQLQuery<ClubMembers$Query, ClubMembersArguments> {
  ClubMembersQuery({required this.variables});

  @override
  final DocumentNode document = CLUB_MEMBERS_QUERY_DOCUMENT;

  @override
  final String operationName = 'clubMembers';

  @override
  final ClubMembersArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClubMembers$Query parse(Map<String, dynamic> json) =>
      ClubMembers$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubInviteTokenArguments extends JsonSerializable
    with EquatableMixin {
  UpdateClubInviteTokenArguments({required this.data});

  @override
  factory UpdateClubInviteTokenArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubInviteTokenArgumentsFromJson(json);

  late UpdateClubInviteTokenInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubInviteTokenArgumentsToJson(this);
}

final UPDATE_CLUB_INVITE_TOKEN_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateClubInviteToken'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateClubInviteTokenInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateClubInviteToken'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'tokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateClubInviteTokenMutation extends GraphQLQuery<
    UpdateClubInviteToken$Mutation, UpdateClubInviteTokenArguments> {
  UpdateClubInviteTokenMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_CLUB_INVITE_TOKEN_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateClubInviteToken';

  @override
  final UpdateClubInviteTokenArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateClubInviteToken$Mutation parse(Map<String, dynamic> json) =>
      UpdateClubInviteToken$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteClubInviteTokenArguments extends JsonSerializable
    with EquatableMixin {
  DeleteClubInviteTokenArguments({required this.data});

  @override
  factory DeleteClubInviteTokenArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteClubInviteTokenArgumentsFromJson(json);

  late DeleteClubInviteTokenInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$DeleteClubInviteTokenArgumentsToJson(this);
}

final DELETE_CLUB_INVITE_TOKEN_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteClubInviteToken'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'DeleteClubInviteTokenInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteClubInviteToken'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'tokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteClubInviteTokenMutation extends GraphQLQuery<
    DeleteClubInviteToken$Mutation, DeleteClubInviteTokenArguments> {
  DeleteClubInviteTokenMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_CLUB_INVITE_TOKEN_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteClubInviteToken';

  @override
  final DeleteClubInviteTokenArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteClubInviteToken$Mutation parse(Map<String, dynamic> json) =>
      DeleteClubInviteToken$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class GiveMemberAdminStatusArguments extends JsonSerializable
    with EquatableMixin {
  GiveMemberAdminStatusArguments({required this.userId, required this.clubId});

  @override
  factory GiveMemberAdminStatusArguments.fromJson(Map<String, dynamic> json) =>
      _$GiveMemberAdminStatusArgumentsFromJson(json);

  late String userId;

  late String clubId;

  @override
  List<Object?> get props => [userId, clubId];
  @override
  Map<String, dynamic> toJson() => _$GiveMemberAdminStatusArgumentsToJson(this);
}

final GIVE_MEMBER_ADMIN_STATUS_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'giveMemberAdminStatus'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'giveMemberAdminStatus'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userId'),
                  value: VariableNode(name: NameNode(value: 'userId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubMemberSummary'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubMemberSummary'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubMemberSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubMemberSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubMemberSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'townCity'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'countryCode'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tagline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'skills'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class GiveMemberAdminStatusMutation extends GraphQLQuery<
    GiveMemberAdminStatus$Mutation, GiveMemberAdminStatusArguments> {
  GiveMemberAdminStatusMutation({required this.variables});

  @override
  final DocumentNode document = GIVE_MEMBER_ADMIN_STATUS_MUTATION_DOCUMENT;

  @override
  final String operationName = 'giveMemberAdminStatus';

  @override
  final GiveMemberAdminStatusArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  GiveMemberAdminStatus$Mutation parse(Map<String, dynamic> json) =>
      GiveMemberAdminStatus$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateClubInviteTokenArguments extends JsonSerializable
    with EquatableMixin {
  CreateClubInviteTokenArguments({required this.data});

  @override
  factory CreateClubInviteTokenArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateClubInviteTokenArgumentsFromJson(json);

  late CreateClubInviteTokenInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateClubInviteTokenArgumentsToJson(this);
}

final CREATE_CLUB_INVITE_TOKEN_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createClubInviteToken'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateClubInviteTokenInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createClubInviteToken'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'tokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateClubInviteTokenMutation extends GraphQLQuery<
    CreateClubInviteToken$Mutation, CreateClubInviteTokenArguments> {
  CreateClubInviteTokenMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_CLUB_INVITE_TOKEN_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createClubInviteToken';

  @override
  final CreateClubInviteTokenArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateClubInviteToken$Mutation parse(Map<String, dynamic> json) =>
      CreateClubInviteToken$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserMaxUnbrokenExerciseTrackerArguments extends JsonSerializable
    with EquatableMixin {
  CreateUserMaxUnbrokenExerciseTrackerArguments({required this.data});

  @override
  factory CreateUserMaxUnbrokenExerciseTrackerArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserMaxUnbrokenExerciseTrackerArgumentsFromJson(json);

  late CreateUserMaxUnbrokenExerciseTrackerInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserMaxUnbrokenExerciseTrackerArgumentsToJson(this);
}

final CREATE_USER_MAX_UNBROKEN_EXERCISE_TRACKER_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createUserMaxUnbrokenExerciseTracker'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(
                    value: 'CreateUserMaxUnbrokenExerciseTrackerInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createUserMaxUnbrokenExerciseTracker'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserMaxUnbrokenExerciseTracker'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserMaxUnbrokenExerciseTracker'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserMaxUnbrokenExerciseTracker'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'Move'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'Equipment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Equipment'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'ExerciseTrackerManualEntries'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ExerciseTrackerManualEntry'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ExerciseTrackerManualEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ExerciseTrackerManualEntry'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateUserMaxUnbrokenExerciseTrackerMutation extends GraphQLQuery<
    CreateUserMaxUnbrokenExerciseTracker$Mutation,
    CreateUserMaxUnbrokenExerciseTrackerArguments> {
  CreateUserMaxUnbrokenExerciseTrackerMutation({required this.variables});

  @override
  final DocumentNode document =
      CREATE_USER_MAX_UNBROKEN_EXERCISE_TRACKER_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createUserMaxUnbrokenExerciseTracker';

  @override
  final CreateUserMaxUnbrokenExerciseTrackerArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateUserMaxUnbrokenExerciseTracker$Mutation parse(
          Map<String, dynamic> json) =>
      CreateUserMaxUnbrokenExerciseTracker$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserFastestTimeExerciseTrackerArguments extends JsonSerializable
    with EquatableMixin {
  CreateUserFastestTimeExerciseTrackerArguments({required this.data});

  @override
  factory CreateUserFastestTimeExerciseTrackerArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserFastestTimeExerciseTrackerArgumentsFromJson(json);

  late CreateUserFastestTimeExerciseTrackerInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserFastestTimeExerciseTrackerArgumentsToJson(this);
}

final CREATE_USER_FASTEST_TIME_EXERCISE_TRACKER_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createUserFastestTimeExerciseTracker'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(
                    value: 'CreateUserFastestTimeExerciseTrackerInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createUserFastestTimeExerciseTracker'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserFastestTimeExerciseTracker'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserFastestTimeExerciseTracker'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserFastestTimeExerciseTracker'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'Move'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'Equipment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Equipment'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'ExerciseTrackerManualEntries'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ExerciseTrackerManualEntry'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ExerciseTrackerManualEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ExerciseTrackerManualEntry'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateUserFastestTimeExerciseTrackerMutation extends GraphQLQuery<
    CreateUserFastestTimeExerciseTracker$Mutation,
    CreateUserFastestTimeExerciseTrackerArguments> {
  CreateUserFastestTimeExerciseTrackerMutation({required this.variables});

  @override
  final DocumentNode document =
      CREATE_USER_FASTEST_TIME_EXERCISE_TRACKER_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createUserFastestTimeExerciseTracker';

  @override
  final CreateUserFastestTimeExerciseTrackerArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateUserFastestTimeExerciseTracker$Mutation parse(
          Map<String, dynamic> json) =>
      CreateUserFastestTimeExerciseTracker$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserMaxLoadExerciseTrackerArguments extends JsonSerializable
    with EquatableMixin {
  CreateUserMaxLoadExerciseTrackerArguments({required this.data});

  @override
  factory CreateUserMaxLoadExerciseTrackerArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserMaxLoadExerciseTrackerArgumentsFromJson(json);

  late CreateUserMaxLoadExerciseTrackerInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserMaxLoadExerciseTrackerArgumentsToJson(this);
}

final CREATE_USER_MAX_LOAD_EXERCISE_TRACKER_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createUserMaxLoadExerciseTracker'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateUserMaxLoadExerciseTrackerInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createUserMaxLoadExerciseTracker'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserMaxLoadExerciseTracker'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserMaxLoadExerciseTracker'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserMaxLoadExerciseTracker'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'Move'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'Equipment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Equipment'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'ExerciseTrackerManualEntries'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ExerciseTrackerManualEntry'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ExerciseTrackerManualEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ExerciseTrackerManualEntry'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateUserMaxLoadExerciseTrackerMutation extends GraphQLQuery<
    CreateUserMaxLoadExerciseTracker$Mutation,
    CreateUserMaxLoadExerciseTrackerArguments> {
  CreateUserMaxLoadExerciseTrackerMutation({required this.variables});

  @override
  final DocumentNode document =
      CREATE_USER_MAX_LOAD_EXERCISE_TRACKER_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createUserMaxLoadExerciseTracker';

  @override
  final CreateUserMaxLoadExerciseTrackerArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateUserMaxLoadExerciseTracker$Mutation parse(Map<String, dynamic> json) =>
      CreateUserMaxLoadExerciseTracker$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserMaxLoadExerciseTrackerArguments extends JsonSerializable
    with EquatableMixin {
  DeleteUserMaxLoadExerciseTrackerArguments({required this.id});

  @override
  factory DeleteUserMaxLoadExerciseTrackerArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserMaxLoadExerciseTrackerArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserMaxLoadExerciseTrackerArgumentsToJson(this);
}

final DELETE_USER_MAX_LOAD_EXERCISE_TRACKER_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteUserMaxLoadExerciseTracker'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteUserMaxLoadExerciseTracker'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteUserMaxLoadExerciseTrackerMutation extends GraphQLQuery<
    DeleteUserMaxLoadExerciseTracker$Mutation,
    DeleteUserMaxLoadExerciseTrackerArguments> {
  DeleteUserMaxLoadExerciseTrackerMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_USER_MAX_LOAD_EXERCISE_TRACKER_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteUserMaxLoadExerciseTracker';

  @override
  final DeleteUserMaxLoadExerciseTrackerArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteUserMaxLoadExerciseTracker$Mutation parse(Map<String, dynamic> json) =>
      DeleteUserMaxLoadExerciseTracker$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserMaxUnbrokenExerciseTrackerArguments extends JsonSerializable
    with EquatableMixin {
  DeleteUserMaxUnbrokenExerciseTrackerArguments({required this.id});

  @override
  factory DeleteUserMaxUnbrokenExerciseTrackerArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserMaxUnbrokenExerciseTrackerArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserMaxUnbrokenExerciseTrackerArgumentsToJson(this);
}

final DELETE_USER_MAX_UNBROKEN_EXERCISE_TRACKER_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteUserMaxUnbrokenExerciseTracker'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteUserMaxUnbrokenExerciseTracker'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteUserMaxUnbrokenExerciseTrackerMutation extends GraphQLQuery<
    DeleteUserMaxUnbrokenExerciseTracker$Mutation,
    DeleteUserMaxUnbrokenExerciseTrackerArguments> {
  DeleteUserMaxUnbrokenExerciseTrackerMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_USER_MAX_UNBROKEN_EXERCISE_TRACKER_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteUserMaxUnbrokenExerciseTracker';

  @override
  final DeleteUserMaxUnbrokenExerciseTrackerArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteUserMaxUnbrokenExerciseTracker$Mutation parse(
          Map<String, dynamic> json) =>
      DeleteUserMaxUnbrokenExerciseTracker$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserFastestTimeExerciseTrackerArguments extends JsonSerializable
    with EquatableMixin {
  DeleteUserFastestTimeExerciseTrackerArguments({required this.id});

  @override
  factory DeleteUserFastestTimeExerciseTrackerArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserFastestTimeExerciseTrackerArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserFastestTimeExerciseTrackerArgumentsToJson(this);
}

final DELETE_USER_FASTEST_TIME_EXERCISE_TRACKER_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteUserFastestTimeExerciseTracker'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteUserFastestTimeExerciseTracker'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteUserFastestTimeExerciseTrackerMutation extends GraphQLQuery<
    DeleteUserFastestTimeExerciseTracker$Mutation,
    DeleteUserFastestTimeExerciseTrackerArguments> {
  DeleteUserFastestTimeExerciseTrackerMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_USER_FASTEST_TIME_EXERCISE_TRACKER_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteUserFastestTimeExerciseTracker';

  @override
  final DeleteUserFastestTimeExerciseTrackerArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteUserFastestTimeExerciseTracker$Mutation parse(
          Map<String, dynamic> json) =>
      DeleteUserFastestTimeExerciseTracker$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateExerciseTrackerManualEntryArguments extends JsonSerializable
    with EquatableMixin {
  CreateExerciseTrackerManualEntryArguments({required this.data});

  @override
  factory CreateExerciseTrackerManualEntryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateExerciseTrackerManualEntryArgumentsFromJson(json);

  late CreateExerciseTrackerManualEntryInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateExerciseTrackerManualEntryArgumentsToJson(this);
}

final CREATE_EXERCISE_TRACKER_MANUAL_ENTRY_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createExerciseTrackerManualEntry'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateExerciseTrackerManualEntryInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createExerciseTrackerManualEntry'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ExerciseTrackerManualEntry'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ExerciseTrackerManualEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ExerciseTrackerManualEntry'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateExerciseTrackerManualEntryMutation extends GraphQLQuery<
    CreateExerciseTrackerManualEntry$Mutation,
    CreateExerciseTrackerManualEntryArguments> {
  CreateExerciseTrackerManualEntryMutation({required this.variables});

  @override
  final DocumentNode document =
      CREATE_EXERCISE_TRACKER_MANUAL_ENTRY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createExerciseTrackerManualEntry';

  @override
  final CreateExerciseTrackerManualEntryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateExerciseTrackerManualEntry$Mutation parse(Map<String, dynamic> json) =>
      CreateExerciseTrackerManualEntry$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteExerciseTrackerManualEntryArguments extends JsonSerializable
    with EquatableMixin {
  DeleteExerciseTrackerManualEntryArguments({required this.id});

  @override
  factory DeleteExerciseTrackerManualEntryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteExerciseTrackerManualEntryArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteExerciseTrackerManualEntryArgumentsToJson(this);
}

final DELETE_EXERCISE_TRACKER_MANUAL_ENTRY_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteExerciseTrackerManualEntry'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteExerciseTrackerManualEntry'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteExerciseTrackerManualEntryMutation extends GraphQLQuery<
    DeleteExerciseTrackerManualEntry$Mutation,
    DeleteExerciseTrackerManualEntryArguments> {
  DeleteExerciseTrackerManualEntryMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_EXERCISE_TRACKER_MANUAL_ENTRY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteExerciseTrackerManualEntry';

  @override
  final DeleteExerciseTrackerManualEntryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteExerciseTrackerManualEntry$Mutation parse(Map<String, dynamic> json) =>
      DeleteExerciseTrackerManualEntry$Mutation.fromJson(json);
}
