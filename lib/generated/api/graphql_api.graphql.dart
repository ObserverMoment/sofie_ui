// GENERATED CODE - DO NOT MODIFY BY HAND
// @dart = 2.12

import 'package:artemis/artemis.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:equatable/equatable.dart';
import 'package:gql/ast.dart';
import 'package:sofie_ui/coercers.dart';
part 'graphql_api.graphql.g.dart';

mixin UserSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  String? avatarUri;
  late String displayName;
  @JsonKey(unknownEnumValue: UserProfileScope.artemisUnknown)
  late UserProfileScope userProfileScope;
}
mixin ClubSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late String name;
  String? description;
  String? coverImageUri;
  String? location;
  late int memberCount;
}
mixin ClubInviteTokenMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late String name;
  late bool active;
  late int inviteLimit;
  late List<String> joinedUserIds;
}
mixin JoinClubInviteMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? respondedAt;
  @JsonKey(unknownEnumValue: JoinClubRequestStatus.artemisUnknown)
  late JoinClubRequestStatus status;
}
mixin JoinClubRequestMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? respondedAt;
  @JsonKey(unknownEnumValue: JoinClubRequestStatus.artemisUnknown)
  late JoinClubRequestStatus status;
}
mixin WorkoutSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late bool archived;
  late String name;
  @JsonKey(name: 'User')
  late UserSummary user;
  int? lengthMinutes;
  String? coverImageUri;
  String? description;
  @JsonKey(unknownEnumValue: DifficultyLevel.artemisUnknown)
  late DifficultyLevel difficultyLevel;
  late int loggedSessionsCount;
  late bool hasClassVideo;
  late bool hasClassAudio;
  late List<String> equipments;
  late List<String> tags;
}
mixin WorkoutPlanSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late bool archived;
  late String name;
  String? description;
  String? coverImageUri;
  late int lengthWeeks;
  late int daysPerWeek;
  late int workoutsCount;
  @JsonKey(name: 'User')
  late UserSummary user;
  late int enrolmentsCount;
  late List<WorkoutGoal> goals;
  late List<String> tags;
  double? reviewScore;
  late int reviewCount;
}
mixin WorkoutGoalMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  late String description;
  late String hexColor;
}
mixin ClubMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late String name;
  String? description;
  String? location;
  String? coverImageUri;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? introAudioUri;
  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;
}
mixin EquipmentMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  late bool loadAdjustable;
}
mixin MoveTypeMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  String? description;
  String? imageUri;
}
mixin BodyAreaMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  @JsonKey(unknownEnumValue: BodyAreaFrontBack.artemisUnknown)
  late BodyAreaFrontBack frontBack;
  @JsonKey(unknownEnumValue: BodyAreaUpperLower.artemisUnknown)
  late BodyAreaUpperLower upperLower;
}
mixin MoveMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  String? searchTerms;
  String? description;
  String? demoVideoUri;
  String? demoVideoThumbUri;
  @JsonKey(unknownEnumValue: MoveScope.artemisUnknown)
  late MoveScope scope;
  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late List<WorkoutMoveRepType> validRepTypes;
}
mixin WorkoutMoveMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late int sortPosition;
  late double reps;
  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late WorkoutMoveRepType repType;
  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  late DistanceUnit distanceUnit;
  late double loadAmount;
  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  late LoadUnit loadUnit;
  @JsonKey(unknownEnumValue: TimeUnit.artemisUnknown)
  late TimeUnit timeUnit;
}
mixin CollectionMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late String name;
  String? description;
}
mixin WorkoutDataMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late bool archived;
  late String name;
  String? description;
  int? lengthMinutes;
  @JsonKey(unknownEnumValue: DifficultyLevel.artemisUnknown)
  late DifficultyLevel difficultyLevel;
  String? coverImageUri;
  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? introAudioUri;
  @JsonKey(name: 'User')
  late UserSummary user;
  @JsonKey(name: 'WorkoutGoals')
  late List<WorkoutGoal> workoutGoals;
  @JsonKey(name: 'WorkoutTags')
  late List<WorkoutTag> workoutTags;
  @JsonKey(name: 'WorkoutSections')
  late List<WorkoutSection> workoutSections;
}
mixin WorkoutTagMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String tag;
}
mixin WorkoutSectionTypeMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  late String description;
}
mixin WorkoutSetMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late int sortPosition;
  late int rounds;
  late int duration;
}
mixin WorkoutSectionMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  String? name;
  String? note;
  late int rounds;
  late int timecap;
  late int sortPosition;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? introAudioUri;
  String? classVideoUri;
  String? classVideoThumbUri;
  String? classAudioUri;
}
mixin WorkoutPlanDayWorkoutMixin {
  late String id;
  @JsonKey(name: '__typename')
  String? $$typename;
  String? note;
  late int sortPosition;
}
mixin WorkoutPlanEnrolmentMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime startDate;
  late List<String> completedPlanDayWorkoutIds;
}
mixin WorkoutPlanEnrolmentSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime startDate;
  late List<String> completedPlanDayWorkoutIds;
  @JsonKey(name: 'WorkoutPlan')
  late WorkoutPlanSummary workoutPlan;
}
mixin WorkoutPlanDataMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late bool archived;
  late String name;
  String? description;
  late int lengthWeeks;
  late int daysPerWeek;
  String? coverImageUri;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? introAudioUri;
  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;
  @JsonKey(name: 'User')
  late UserSummary user;
  @JsonKey(name: 'WorkoutPlanDays')
  late List<WorkoutPlanDay> workoutPlanDays;
  @JsonKey(name: 'WorkoutPlanReviews')
  late List<WorkoutPlanReview> workoutPlanReviews;
  @JsonKey(name: 'WorkoutTags')
  late List<WorkoutTag> workoutTags;
  @JsonKey(name: 'WorkoutPlanEnrolments')
  late List<WorkoutPlanEnrolment> workoutPlanEnrolments;
}
mixin WorkoutPlanDayMixin {
  late String id;
  @JsonKey(name: '__typename')
  String? $$typename;
  String? note;
  late int dayNumber;
}
mixin WorkoutPlanReviewMixin {
  late String id;
  @JsonKey(name: '__typename')
  String? $$typename;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late double score;
  String? comment;
}
mixin ProgressJournalGoalTagMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late String tag;
  late String hexColor;
}
mixin ProgressJournalEntryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  String? note;
  String? voiceNoteUri;
  double? moodScore;
  double? energyScore;
  double? confidenceScore;
  double? motivationScore;
}
mixin ProgressJournalGoalMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late String name;
  String? description;
  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? deadline;
  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? completedDate;
}
mixin ProgressJournalMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late String name;
  String? description;
  String? coverImageUri;
}
mixin GymProfileMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  String? description;
}
mixin LoggedWorkoutSectionMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  String? name;
  int? repScore;
  late int timeTakenSeconds;
  late int sortPosition;
}
mixin LoggedWorkoutMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime completedOn;
  String? note;
  late String name;
  String? workoutId;
}
mixin LifetimeLogStatsSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late int minutesWorked;
  late int sessionsLogged;
}
mixin WorkoutPlanMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late bool archived;
  late String name;
  String? description;
  late int lengthWeeks;
  late int daysPerWeek;
  String? coverImageUri;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? introAudioUri;
  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;
}
mixin UserMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  String? avatarUri;
  String? bio;
  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? birthdate;
  String? countryCode;
  late String displayName;
  String? introVideoUri;
  String? introVideoThumbUri;
  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  late Gender gender;
  @JsonKey(unknownEnumValue: UserProfileScope.artemisUnknown)
  late UserProfileScope userProfileScope;
}
mixin UserAvatarDataMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  String? avatarUri;
  late String displayName;
}
mixin ArchivedMoveMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  late bool archived;
}
mixin ArchivedWorkoutPlanMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  late bool archived;
}
mixin ArchivedWorkoutMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  late bool archived;
}
mixin UserPublicProfileSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  @JsonKey(unknownEnumValue: UserProfileScope.artemisUnknown)
  late UserProfileScope userProfileScope;
  late String id;
  String? avatarUri;
  String? tagline;
  String? townCity;
  String? countryCode;
  late String displayName;
  late int workoutCount;
  late int planCount;
}
mixin UserBenchmarkSummaryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime lastEntryAt;
  late String name;
  String? equipmentInfo;
  @JsonKey(unknownEnumValue: BenchmarkType.artemisUnknown)
  late BenchmarkType benchmarkType;
  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  late LoadUnit loadUnit;
}
mixin UserBenchmarkEntryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime completedOn;
  late double score;
  String? note;
  String? videoUri;
  String? videoThumbUri;
}
mixin UserPublicProfileMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(unknownEnumValue: UserProfileScope.artemisUnknown)
  late UserProfileScope userProfileScope;
  String? avatarUri;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? bio;
  String? tagline;
  String? townCity;
  String? instagramHandle;
  String? tiktokHandle;
  String? youtubeHandle;
  String? linkedinHandle;
  String? countryCode;
  late String displayName;
  int? followerCount;
  int? postsCount;
  int? workoutCount;
  int? planCount;
}
mixin UserBenchmarkTagMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String name;
  String? description;
}
mixin UserBenchmarkMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime lastEntryAt;
  late String name;
  String? description;
  String? equipmentInfo;
  @JsonKey(unknownEnumValue: BenchmarkType.artemisUnknown)
  late BenchmarkType benchmarkType;
  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  late LoadUnit loadUnit;
}
mixin ScheduledWorkoutMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime scheduledAt;
  String? note;
  String? workoutPlanEnrolmentId;
}
mixin TimelinePostObjectDataUserMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  late String displayName;
  String? avatarUri;
}
mixin TimelinePostObjectDataObjectMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(unknownEnumValue: TimelinePostType.artemisUnknown)
  late TimelinePostType type;
  late String name;
  String? introAudioUri;
  String? coverImageUri;
  String? introVideoUri;
  String? introVideoThumbUri;
}
mixin WorkoutMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  late bool archived;
  late String name;
  String? description;
  int? lengthMinutes;
  @JsonKey(unknownEnumValue: DifficultyLevel.artemisUnknown)
  late DifficultyLevel difficultyLevel;
  String? coverImageUri;
  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;
  String? introVideoUri;
  String? introVideoThumbUri;
  String? introAudioUri;
}
mixin BodyTrackingEntryMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String id;
  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime createdAt;
  @JsonKey(unknownEnumValue: BodyweightUnit.artemisUnknown)
  BodyweightUnit? bodyweightUnit;
  double? bodyweight;
  double? fatPercent;
  String? note;
  late List<String> photoUris;
}
mixin ClubInviteTokenDataMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String token;
}
mixin InviteTokenErrorMixin {
  @JsonKey(name: '__typename')
  String? $$typename;
  late String message;
}

@JsonSerializable(explicitToJson: true)
class UserSummary extends JsonSerializable
    with EquatableMixin, UserSummaryMixin {
  UserSummary();

  factory UserSummary.fromJson(Map<String, dynamic> json) =>
      _$UserSummaryFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, avatarUri, displayName, userProfileScope];
  @override
  Map<String, dynamic> toJson() => _$UserSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubSummary extends JsonSerializable
    with EquatableMixin, ClubSummaryMixin {
  ClubSummary();

  factory ClubSummary.fromJson(Map<String, dynamic> json) =>
      _$ClubSummaryFromJson(json);

  @JsonKey(name: 'Owner')
  late UserSummary owner;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        name,
        description,
        coverImageUri,
        location,
        memberCount,
        owner
      ];
  @override
  Map<String, dynamic> toJson() => _$ClubSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubSummariesById$Query extends JsonSerializable with EquatableMixin {
  ClubSummariesById$Query();

  factory ClubSummariesById$Query.fromJson(Map<String, dynamic> json) =>
      _$ClubSummariesById$QueryFromJson(json);

  late List<ClubSummary> clubSummariesById;

  @override
  List<Object?> get props => [clubSummariesById];
  @override
  Map<String, dynamic> toJson() => _$ClubSummariesById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubInviteToken extends JsonSerializable
    with EquatableMixin, ClubInviteTokenMixin {
  ClubInviteToken();

  factory ClubInviteToken.fromJson(Map<String, dynamic> json) =>
      _$ClubInviteTokenFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, name, active, inviteLimit, joinedUserIds];
  @override
  Map<String, dynamic> toJson() => _$ClubInviteTokenToJson(this);
}

@JsonSerializable(explicitToJson: true)
class JoinClubInvite extends JsonSerializable
    with EquatableMixin, JoinClubInviteMixin {
  JoinClubInvite();

  factory JoinClubInvite.fromJson(Map<String, dynamic> json) =>
      _$JoinClubInviteFromJson(json);

  @JsonKey(name: 'Invited')
  late UserSummary invited;

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, respondedAt, status, invited];
  @override
  Map<String, dynamic> toJson() => _$JoinClubInviteToJson(this);
}

@JsonSerializable(explicitToJson: true)
class JoinClubRequest extends JsonSerializable
    with EquatableMixin, JoinClubRequestMixin {
  JoinClubRequest();

  factory JoinClubRequest.fromJson(Map<String, dynamic> json) =>
      _$JoinClubRequestFromJson(json);

  @JsonKey(name: 'Applicant')
  late UserSummary applicant;

  @override
  List<Object?> get props =>
      [$$typename, id, createdAt, respondedAt, status, applicant];
  @override
  Map<String, dynamic> toJson() => _$JoinClubRequestToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSummary extends JsonSerializable
    with EquatableMixin, WorkoutSummaryMixin {
  WorkoutSummary();

  factory WorkoutSummary.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSummaryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        archived,
        name,
        user,
        lengthMinutes,
        coverImageUri,
        description,
        difficultyLevel,
        loggedSessionsCount,
        hasClassVideo,
        hasClassAudio,
        equipments,
        tags
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanSummary extends JsonSerializable
    with EquatableMixin, WorkoutPlanSummaryMixin {
  WorkoutPlanSummary();

  factory WorkoutPlanSummary.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanSummaryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        archived,
        name,
        description,
        coverImageUri,
        lengthWeeks,
        daysPerWeek,
        workoutsCount,
        user,
        enrolmentsCount,
        goals,
        tags,
        reviewScore,
        reviewCount
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Club extends JsonSerializable with EquatableMixin, ClubMixin {
  Club();

  factory Club.fromJson(Map<String, dynamic> json) => _$ClubFromJson(json);

  @JsonKey(name: 'Owner')
  late UserSummary owner;

  @JsonKey(name: 'Admins')
  late List<UserSummary> admins;

  @JsonKey(name: 'Members')
  late List<UserSummary> members;

  @JsonKey(name: 'ClubInviteTokens')
  List<ClubInviteToken>? clubInviteTokens;

  @JsonKey(name: 'JoinClubInvites')
  List<JoinClubInvite>? joinClubInvites;

  @JsonKey(name: 'JoinClubRequests')
  List<JoinClubRequest>? joinClubRequests;

  @JsonKey(name: 'Workouts')
  List<WorkoutSummary>? workouts;

  @JsonKey(name: 'WorkoutPlans')
  List<WorkoutPlanSummary>? workoutPlans;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        name,
        description,
        location,
        coverImageUri,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        contentAccessScope,
        owner,
        admins,
        members,
        clubInviteTokens,
        joinClubInvites,
        joinClubRequests,
        workouts,
        workoutPlans
      ];
  @override
  Map<String, dynamic> toJson() => _$ClubToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateClub$Mutation extends JsonSerializable with EquatableMixin {
  CreateClub$Mutation();

  factory CreateClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateClub$MutationFromJson(json);

  late Club createClub;

  @override
  List<Object?> get props => [createClub];
  @override
  Map<String, dynamic> toJson() => _$CreateClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSummaryMixin$UserSummary extends JsonSerializable
    with EquatableMixin, UserSummaryMixin {
  WorkoutSummaryMixin$UserSummary();

  factory WorkoutSummaryMixin$UserSummary.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSummaryMixin$UserSummaryFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, avatarUri, displayName, userProfileScope];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutSummaryMixin$UserSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanSummaryMixin$UserSummary extends JsonSerializable
    with EquatableMixin, UserSummaryMixin {
  WorkoutPlanSummaryMixin$UserSummary();

  factory WorkoutPlanSummaryMixin$UserSummary.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanSummaryMixin$UserSummaryFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, avatarUri, displayName, userProfileScope];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanSummaryMixin$UserSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanSummaryMixin$WorkoutGoal extends JsonSerializable
    with EquatableMixin, WorkoutGoalMixin {
  WorkoutPlanSummaryMixin$WorkoutGoal();

  factory WorkoutPlanSummaryMixin$WorkoutGoal.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanSummaryMixin$WorkoutGoalFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, description, hexColor];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanSummaryMixin$WorkoutGoalToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateClubInput extends JsonSerializable with EquatableMixin {
  CreateClubInput({this.description, this.location, required this.name});

  factory CreateClubInput.fromJson(Map<String, dynamic> json) =>
      _$CreateClubInputFromJson(json);

  String? description;

  String? location;

  late String name;

  @override
  List<Object?> get props => [description, location, name];
  @override
  Map<String, dynamic> toJson() => _$CreateClubInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PublicClubs$Query extends JsonSerializable with EquatableMixin {
  PublicClubs$Query();

  factory PublicClubs$Query.fromJson(Map<String, dynamic> json) =>
      _$PublicClubs$QueryFromJson(json);

  late List<ClubSummary> publicClubs;

  @override
  List<Object?> get props => [publicClubs];
  @override
  Map<String, dynamic> toJson() => _$PublicClubs$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteClubById$Mutation extends JsonSerializable with EquatableMixin {
  DeleteClubById$Mutation();

  factory DeleteClubById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteClubById$MutationFromJson(json);

  late String deleteClubById;

  @override
  List<Object?> get props => [deleteClubById];
  @override
  Map<String, dynamic> toJson() => _$DeleteClubById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateClub$Mutation extends JsonSerializable with EquatableMixin {
  UpdateClub$Mutation();

  factory UpdateClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateClub$MutationFromJson(json);

  late Club updateClub;

  @override
  List<Object?> get props => [updateClub];
  @override
  Map<String, dynamic> toJson() => _$UpdateClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubInput extends JsonSerializable with EquatableMixin {
  UpdateClubInput(
      {this.contentAccessScope,
      this.coverImageUri,
      this.description,
      required this.id,
      this.introAudioUri,
      this.introVideoThumbUri,
      this.introVideoUri,
      this.location,
      this.name});

  factory UpdateClubInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubInputFromJson(json);

  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  ContentAccessScope? contentAccessScope;

  String? coverImageUri;

  String? description;

  late String id;

  String? introAudioUri;

  String? introVideoThumbUri;

  String? introVideoUri;

  String? location;

  String? name;

  @override
  List<Object?> get props => [
        contentAccessScope,
        coverImageUri,
        description,
        id,
        introAudioUri,
        introVideoThumbUri,
        introVideoUri,
        location,
        name
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubById$Query extends JsonSerializable with EquatableMixin {
  ClubById$Query();

  factory ClubById$Query.fromJson(Map<String, dynamic> json) =>
      _$ClubById$QueryFromJson(json);

  late Club clubById;

  @override
  List<Object?> get props => [clubById];
  @override
  Map<String, dynamic> toJson() => _$ClubById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CheckUniqueClubName$Query extends JsonSerializable with EquatableMixin {
  CheckUniqueClubName$Query();

  factory CheckUniqueClubName$Query.fromJson(Map<String, dynamic> json) =>
      _$CheckUniqueClubName$QueryFromJson(json);

  late bool checkUniqueClubName;

  @override
  List<Object?> get props => [checkUniqueClubName];
  @override
  Map<String, dynamic> toJson() => _$CheckUniqueClubName$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserClubs$Query extends JsonSerializable with EquatableMixin {
  UserClubs$Query();

  factory UserClubs$Query.fromJson(Map<String, dynamic> json) =>
      _$UserClubs$QueryFromJson(json);

  late List<ClubSummary> userClubs;

  @override
  List<Object?> get props => [userClubs];
  @override
  Map<String, dynamic> toJson() => _$UserClubs$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Equipment extends JsonSerializable with EquatableMixin, EquipmentMixin {
  Equipment();

  factory Equipment.fromJson(Map<String, dynamic> json) =>
      _$EquipmentFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, loadAdjustable];
  @override
  Map<String, dynamic> toJson() => _$EquipmentToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MoveType extends JsonSerializable with EquatableMixin, MoveTypeMixin {
  MoveType();

  factory MoveType.fromJson(Map<String, dynamic> json) =>
      _$MoveTypeFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, description, imageUri];
  @override
  Map<String, dynamic> toJson() => _$MoveTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BodyArea extends JsonSerializable with EquatableMixin, BodyAreaMixin {
  BodyArea();

  factory BodyArea.fromJson(Map<String, dynamic> json) =>
      _$BodyAreaFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, frontBack, upperLower];
  @override
  Map<String, dynamic> toJson() => _$BodyAreaToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BodyAreaMoveScore extends JsonSerializable with EquatableMixin {
  BodyAreaMoveScore();

  factory BodyAreaMoveScore.fromJson(Map<String, dynamic> json) =>
      _$BodyAreaMoveScoreFromJson(json);

  late int score;

  @JsonKey(name: 'BodyArea')
  late BodyArea bodyArea;

  @override
  List<Object?> get props => [score, bodyArea];
  @override
  Map<String, dynamic> toJson() => _$BodyAreaMoveScoreToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Move extends JsonSerializable with EquatableMixin, MoveMixin {
  Move();

  factory Move.fromJson(Map<String, dynamic> json) => _$MoveFromJson(json);

  @JsonKey(name: 'MoveType')
  late MoveType moveType;

  @JsonKey(name: 'BodyAreaMoveScores')
  late List<BodyAreaMoveScore> bodyAreaMoveScores;

  @JsonKey(name: 'RequiredEquipments')
  late List<Equipment> requiredEquipments;

  @JsonKey(name: 'SelectableEquipments')
  late List<Equipment> selectableEquipments;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        searchTerms,
        description,
        demoVideoUri,
        demoVideoThumbUri,
        scope,
        validRepTypes,
        moveType,
        bodyAreaMoveScores,
        requiredEquipments,
        selectableEquipments
      ];
  @override
  Map<String, dynamic> toJson() => _$MoveToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutMove extends JsonSerializable
    with EquatableMixin, WorkoutMoveMixin {
  WorkoutMove();

  factory WorkoutMove.fromJson(Map<String, dynamic> json) =>
      _$WorkoutMoveFromJson(json);

  @JsonKey(name: 'Equipment')
  Equipment? equipment;

  @JsonKey(name: 'Move')
  late Move move;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        sortPosition,
        reps,
        repType,
        distanceUnit,
        loadAmount,
        loadUnit,
        timeUnit,
        equipment,
        move
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutMoveToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutMove$Mutation extends JsonSerializable with EquatableMixin {
  CreateWorkoutMove$Mutation();

  factory CreateWorkoutMove$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutMove$MutationFromJson(json);

  late WorkoutMove createWorkoutMove;

  @override
  List<Object?> get props => [createWorkoutMove];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutMove$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutMoveInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutMoveInput(
      {this.equipment,
      required this.move,
      required this.workoutSet,
      this.distanceUnit,
      required this.loadAmount,
      this.loadUnit,
      required this.repType,
      required this.reps,
      required this.sortPosition,
      this.timeUnit});

  factory CreateWorkoutMoveInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutMoveInputFromJson(json);

  @JsonKey(name: 'Equipment')
  ConnectRelationInput? equipment;

  @JsonKey(name: 'Move')
  late ConnectRelationInput move;

  @JsonKey(name: 'WorkoutSet')
  late ConnectRelationInput workoutSet;

  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  DistanceUnit? distanceUnit;

  late double loadAmount;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  LoadUnit? loadUnit;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late WorkoutMoveRepType repType;

  late double reps;

  late int sortPosition;

  @JsonKey(unknownEnumValue: TimeUnit.artemisUnknown)
  TimeUnit? timeUnit;

  @override
  List<Object?> get props => [
        equipment,
        move,
        workoutSet,
        distanceUnit,
        loadAmount,
        loadUnit,
        repType,
        reps,
        sortPosition,
        timeUnit
      ];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutMoveInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ConnectRelationInput extends JsonSerializable with EquatableMixin {
  ConnectRelationInput({required this.id});

  factory ConnectRelationInput.fromJson(Map<String, dynamic> json) =>
      _$ConnectRelationInputFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ConnectRelationInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutMoves$Mutation extends JsonSerializable with EquatableMixin {
  UpdateWorkoutMoves$Mutation();

  factory UpdateWorkoutMoves$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutMoves$MutationFromJson(json);

  late List<WorkoutMove> updateWorkoutMoves;

  @override
  List<Object?> get props => [updateWorkoutMoves];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutMoves$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutMoveInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutMoveInput(
      {this.equipment,
      this.move,
      this.distanceUnit,
      required this.id,
      this.loadAmount,
      this.loadUnit,
      this.repType,
      this.reps,
      this.timeUnit});

  factory UpdateWorkoutMoveInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutMoveInputFromJson(json);

  @JsonKey(name: 'Equipment')
  ConnectRelationInput? equipment;

  @JsonKey(name: 'Move')
  ConnectRelationInput? move;

  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  DistanceUnit? distanceUnit;

  late String id;

  double? loadAmount;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  LoadUnit? loadUnit;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  WorkoutMoveRepType? repType;

  double? reps;

  @JsonKey(unknownEnumValue: TimeUnit.artemisUnknown)
  TimeUnit? timeUnit;

  @override
  List<Object?> get props => [
        equipment,
        move,
        distanceUnit,
        id,
        loadAmount,
        loadUnit,
        repType,
        reps,
        timeUnit
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutMoveInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DuplicateWorkoutMoveById$Mutation extends JsonSerializable
    with EquatableMixin {
  DuplicateWorkoutMoveById$Mutation();

  factory DuplicateWorkoutMoveById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DuplicateWorkoutMoveById$MutationFromJson(json);

  late WorkoutMove duplicateWorkoutMoveById;

  @override
  List<Object?> get props => [duplicateWorkoutMoveById];
  @override
  Map<String, dynamic> toJson() =>
      _$DuplicateWorkoutMoveById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutMoveById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutMoveById$Mutation();

  factory DeleteWorkoutMoveById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteWorkoutMoveById$MutationFromJson(json);

  late String deleteWorkoutMoveById;

  @override
  List<Object?> get props => [deleteWorkoutMoveById];
  @override
  Map<String, dynamic> toJson() => _$DeleteWorkoutMoveById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class SortPositionUpdated extends JsonSerializable with EquatableMixin {
  SortPositionUpdated();

  factory SortPositionUpdated.fromJson(Map<String, dynamic> json) =>
      _$SortPositionUpdatedFromJson(json);

  late String id;

  late int sortPosition;

  @override
  List<Object?> get props => [id, sortPosition];
  @override
  Map<String, dynamic> toJson() => _$SortPositionUpdatedToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutMoves$Mutation extends JsonSerializable
    with EquatableMixin {
  ReorderWorkoutMoves$Mutation();

  factory ReorderWorkoutMoves$Mutation.fromJson(Map<String, dynamic> json) =>
      _$ReorderWorkoutMoves$MutationFromJson(json);

  late List<SortPositionUpdated> reorderWorkoutMoves;

  @override
  List<Object?> get props => [reorderWorkoutMoves];
  @override
  Map<String, dynamic> toJson() => _$ReorderWorkoutMoves$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateSortPositionInput extends JsonSerializable with EquatableMixin {
  UpdateSortPositionInput({required this.id, required this.sortPosition});

  factory UpdateSortPositionInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateSortPositionInputFromJson(json);

  late String id;

  late int sortPosition;

  @override
  List<Object?> get props => [id, sortPosition];
  @override
  Map<String, dynamic> toJson() => _$UpdateSortPositionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutMove$Mutation extends JsonSerializable with EquatableMixin {
  UpdateWorkoutMove$Mutation();

  factory UpdateWorkoutMove$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutMove$MutationFromJson(json);

  late WorkoutMove updateWorkoutMove;

  @override
  List<Object?> get props => [updateWorkoutMove];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutMove$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteCollectionById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteCollectionById$Mutation();

  factory DeleteCollectionById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteCollectionById$MutationFromJson(json);

  late String deleteCollectionById;

  @override
  List<Object?> get props => [deleteCollectionById];
  @override
  Map<String, dynamic> toJson() => _$DeleteCollectionById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Collection extends JsonSerializable with EquatableMixin, CollectionMixin {
  Collection();

  factory Collection.fromJson(Map<String, dynamic> json) =>
      _$CollectionFromJson(json);

  @JsonKey(name: 'User')
  late UserSummary user;

  @JsonKey(name: 'Workouts')
  late List<WorkoutSummary> workouts;

  @JsonKey(name: 'WorkoutPlans')
  late List<WorkoutPlanSummary> workoutPlans;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        name,
        description,
        user,
        workouts,
        workoutPlans
      ];
  @override
  Map<String, dynamic> toJson() => _$CollectionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutPlanToCollection$Mutation extends JsonSerializable
    with EquatableMixin {
  AddWorkoutPlanToCollection$Mutation();

  factory AddWorkoutPlanToCollection$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$AddWorkoutPlanToCollection$MutationFromJson(json);

  late Collection addWorkoutPlanToCollection;

  @override
  List<Object?> get props => [addWorkoutPlanToCollection];
  @override
  Map<String, dynamic> toJson() =>
      _$AddWorkoutPlanToCollection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutPlanToCollectionInput extends JsonSerializable
    with EquatableMixin {
  AddWorkoutPlanToCollectionInput(
      {required this.workoutPlan, required this.collectionId});

  factory AddWorkoutPlanToCollectionInput.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutPlanToCollectionInputFromJson(json);

  @JsonKey(name: 'WorkoutPlan')
  late ConnectRelationInput workoutPlan;

  late String collectionId;

  @override
  List<Object?> get props => [workoutPlan, collectionId];
  @override
  Map<String, dynamic> toJson() =>
      _$AddWorkoutPlanToCollectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateCollection$Mutation extends JsonSerializable with EquatableMixin {
  CreateCollection$Mutation();

  factory CreateCollection$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateCollection$MutationFromJson(json);

  late Collection createCollection;

  @override
  List<Object?> get props => [createCollection];
  @override
  Map<String, dynamic> toJson() => _$CreateCollection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateCollectionInput extends JsonSerializable with EquatableMixin {
  CreateCollectionInput({this.description, required this.name});

  factory CreateCollectionInput.fromJson(Map<String, dynamic> json) =>
      _$CreateCollectionInputFromJson(json);

  String? description;

  late String name;

  @override
  List<Object?> get props => [description, name];
  @override
  Map<String, dynamic> toJson() => _$CreateCollectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserCollectionById$Query extends JsonSerializable with EquatableMixin {
  UserCollectionById$Query();

  factory UserCollectionById$Query.fromJson(Map<String, dynamic> json) =>
      _$UserCollectionById$QueryFromJson(json);

  late Collection userCollectionById;

  @override
  List<Object?> get props => [userCollectionById];
  @override
  Map<String, dynamic> toJson() => _$UserCollectionById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutToCollection$Mutation extends JsonSerializable
    with EquatableMixin {
  AddWorkoutToCollection$Mutation();

  factory AddWorkoutToCollection$Mutation.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutToCollection$MutationFromJson(json);

  late Collection addWorkoutToCollection;

  @override
  List<Object?> get props => [addWorkoutToCollection];
  @override
  Map<String, dynamic> toJson() =>
      _$AddWorkoutToCollection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutToCollectionInput extends JsonSerializable with EquatableMixin {
  AddWorkoutToCollectionInput(
      {required this.workout, required this.collectionId});

  factory AddWorkoutToCollectionInput.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutToCollectionInputFromJson(json);

  @JsonKey(name: 'Workout')
  late ConnectRelationInput workout;

  late String collectionId;

  @override
  List<Object?> get props => [workout, collectionId];
  @override
  Map<String, dynamic> toJson() => _$AddWorkoutToCollectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserCollections$Query extends JsonSerializable with EquatableMixin {
  UserCollections$Query();

  factory UserCollections$Query.fromJson(Map<String, dynamic> json) =>
      _$UserCollections$QueryFromJson(json);

  late List<Collection> userCollections;

  @override
  List<Object?> get props => [userCollections];
  @override
  Map<String, dynamic> toJson() => _$UserCollections$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateCollection$Mutation extends JsonSerializable with EquatableMixin {
  UpdateCollection$Mutation();

  factory UpdateCollection$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateCollection$MutationFromJson(json);

  late Collection updateCollection;

  @override
  List<Object?> get props => [updateCollection];
  @override
  Map<String, dynamic> toJson() => _$UpdateCollection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateCollectionInput extends JsonSerializable with EquatableMixin {
  UpdateCollectionInput({this.description, required this.id, this.name});

  factory UpdateCollectionInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateCollectionInputFromJson(json);

  String? description;

  late String id;

  String? name;

  @override
  List<Object?> get props => [description, id, name];
  @override
  Map<String, dynamic> toJson() => _$UpdateCollectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutPlanFromCollection$Mutation extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutPlanFromCollection$Mutation();

  factory RemoveWorkoutPlanFromCollection$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutPlanFromCollection$MutationFromJson(json);

  late Collection removeWorkoutPlanFromCollection;

  @override
  List<Object?> get props => [removeWorkoutPlanFromCollection];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutPlanFromCollection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutPlanFromCollectionInput extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutPlanFromCollectionInput(
      {required this.workoutPlan, required this.collectionId});

  factory RemoveWorkoutPlanFromCollectionInput.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutPlanFromCollectionInputFromJson(json);

  @JsonKey(name: 'WorkoutPlan')
  late ConnectRelationInput workoutPlan;

  late String collectionId;

  @override
  List<Object?> get props => [workoutPlan, collectionId];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutPlanFromCollectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutFromCollection$Mutation extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutFromCollection$Mutation();

  factory RemoveWorkoutFromCollection$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutFromCollection$MutationFromJson(json);

  late Collection removeWorkoutFromCollection;

  @override
  List<Object?> get props => [removeWorkoutFromCollection];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutFromCollection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutFromCollectionInput extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutFromCollectionInput(
      {required this.workout, required this.collectionId});

  factory RemoveWorkoutFromCollectionInput.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutFromCollectionInputFromJson(json);

  @JsonKey(name: 'Workout')
  late ConnectRelationInput workout;

  late String collectionId;

  @override
  List<Object?> get props => [workout, collectionId];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutFromCollectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutPlanDayWorkouts$Mutation extends JsonSerializable
    with EquatableMixin {
  ReorderWorkoutPlanDayWorkouts$Mutation();

  factory ReorderWorkoutPlanDayWorkouts$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$ReorderWorkoutPlanDayWorkouts$MutationFromJson(json);

  late List<SortPositionUpdated> reorderWorkoutPlanDayWorkouts;

  @override
  List<Object?> get props => [reorderWorkoutPlanDayWorkouts];
  @override
  Map<String, dynamic> toJson() =>
      _$ReorderWorkoutPlanDayWorkouts$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Workout extends JsonSerializable with EquatableMixin, WorkoutDataMixin {
  Workout();

  factory Workout.fromJson(Map<String, dynamic> json) =>
      _$WorkoutFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        archived,
        name,
        description,
        lengthMinutes,
        difficultyLevel,
        coverImageUri,
        contentAccessScope,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        user,
        workoutGoals,
        workoutTags,
        workoutSections
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDayWorkout extends JsonSerializable
    with EquatableMixin, WorkoutPlanDayWorkoutMixin {
  WorkoutPlanDayWorkout();

  factory WorkoutPlanDayWorkout.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanDayWorkoutFromJson(json);

  @JsonKey(name: 'Workout')
  late Workout workout;

  @override
  List<Object?> get props => [id, $$typename, note, sortPosition, workout];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanDayWorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanDayWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanDayWorkout$Mutation();

  factory CreateWorkoutPlanDayWorkout$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanDayWorkout$MutationFromJson(json);

  late WorkoutPlanDayWorkout createWorkoutPlanDayWorkout;

  @override
  List<Object?> get props => [createWorkoutPlanDayWorkout];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanDayWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutDataMixin$UserSummary extends JsonSerializable
    with EquatableMixin, UserSummaryMixin {
  WorkoutDataMixin$UserSummary();

  factory WorkoutDataMixin$UserSummary.fromJson(Map<String, dynamic> json) =>
      _$WorkoutDataMixin$UserSummaryFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, avatarUri, displayName, userProfileScope];
  @override
  Map<String, dynamic> toJson() => _$WorkoutDataMixin$UserSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutDataMixin$WorkoutGoal extends JsonSerializable
    with EquatableMixin, WorkoutGoalMixin {
  WorkoutDataMixin$WorkoutGoal();

  factory WorkoutDataMixin$WorkoutGoal.fromJson(Map<String, dynamic> json) =>
      _$WorkoutDataMixin$WorkoutGoalFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, description, hexColor];
  @override
  Map<String, dynamic> toJson() => _$WorkoutDataMixin$WorkoutGoalToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutDataMixin$WorkoutTag extends JsonSerializable
    with EquatableMixin, WorkoutTagMixin {
  WorkoutDataMixin$WorkoutTag();

  factory WorkoutDataMixin$WorkoutTag.fromJson(Map<String, dynamic> json) =>
      _$WorkoutDataMixin$WorkoutTagFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, tag];
  @override
  Map<String, dynamic> toJson() => _$WorkoutDataMixin$WorkoutTagToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSectionType extends JsonSerializable
    with EquatableMixin, WorkoutSectionTypeMixin {
  WorkoutSectionType();

  factory WorkoutSectionType.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSectionTypeFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, description];
  @override
  Map<String, dynamic> toJson() => _$WorkoutSectionTypeToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSet extends JsonSerializable with EquatableMixin, WorkoutSetMixin {
  WorkoutSet();

  factory WorkoutSet.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSetFromJson(json);

  @JsonKey(name: 'WorkoutMoves')
  late List<WorkoutMove> workoutMoves;

  @override
  List<Object?> get props =>
      [$$typename, id, sortPosition, rounds, duration, workoutMoves];
  @override
  Map<String, dynamic> toJson() => _$WorkoutSetToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutDataMixin$WorkoutSection extends JsonSerializable
    with EquatableMixin, WorkoutSectionMixin {
  WorkoutDataMixin$WorkoutSection();

  factory WorkoutDataMixin$WorkoutSection.fromJson(Map<String, dynamic> json) =>
      _$WorkoutDataMixin$WorkoutSectionFromJson(json);

  @JsonKey(name: 'WorkoutSectionType')
  late WorkoutSectionType workoutSectionType;

  @JsonKey(name: 'WorkoutSets')
  late List<WorkoutSet> workoutSets;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        note,
        rounds,
        timecap,
        sortPosition,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        classVideoUri,
        classVideoThumbUri,
        classAudioUri,
        workoutSectionType,
        workoutSets
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutDataMixin$WorkoutSectionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanDayWorkoutInput extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanDayWorkoutInput(
      {required this.workout,
      required this.workoutPlanDay,
      this.note,
      required this.sortPosition});

  factory CreateWorkoutPlanDayWorkoutInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanDayWorkoutInputFromJson(json);

  @JsonKey(name: 'Workout')
  late ConnectRelationInput workout;

  @JsonKey(name: 'WorkoutPlanDay')
  late ConnectRelationInput workoutPlanDay;

  String? note;

  late int sortPosition;

  @override
  List<Object?> get props => [workout, workoutPlanDay, note, sortPosition];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanDayWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanDayWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanDayWorkout$Mutation();

  factory UpdateWorkoutPlanDayWorkout$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanDayWorkout$MutationFromJson(json);

  late WorkoutPlanDayWorkout updateWorkoutPlanDayWorkout;

  @override
  List<Object?> get props => [updateWorkoutPlanDayWorkout];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateWorkoutPlanDayWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanDayWorkoutInput extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanDayWorkoutInput(
      {this.workout, this.workoutPlanDay, required this.id, this.note});

  factory UpdateWorkoutPlanDayWorkoutInput.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanDayWorkoutInputFromJson(json);

  @JsonKey(name: 'Workout')
  ConnectRelationInput? workout;

  @JsonKey(name: 'WorkoutPlanDay')
  ConnectRelationInput? workoutPlanDay;

  late String id;

  String? note;

  @override
  List<Object?> get props => [workout, workoutPlanDay, id, note];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateWorkoutPlanDayWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanDayWorkoutById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanDayWorkoutById$Mutation();

  factory DeleteWorkoutPlanDayWorkoutById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanDayWorkoutById$MutationFromJson(json);

  late String deleteWorkoutPlanDayWorkoutById;

  @override
  List<Object?> get props => [deleteWorkoutPlanDayWorkoutById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanDayWorkoutById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolment extends JsonSerializable
    with EquatableMixin, WorkoutPlanEnrolmentMixin {
  WorkoutPlanEnrolment();

  factory WorkoutPlanEnrolment.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolmentFromJson(json);

  @JsonKey(name: 'User')
  late UserSummary user;

  @override
  List<Object?> get props =>
      [$$typename, id, startDate, completedPlanDayWorkoutIds, user];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanEnrolmentToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanEnrolment$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanEnrolment$Mutation();

  factory UpdateWorkoutPlanEnrolment$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanEnrolment$MutationFromJson(json);

  late WorkoutPlanEnrolment updateWorkoutPlanEnrolment;

  @override
  List<Object?> get props => [updateWorkoutPlanEnrolment];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateWorkoutPlanEnrolment$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanEnrolmentInput extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanEnrolmentInput(
      {this.completedPlanDayWorkoutIds, required this.id, this.startDate});

  factory UpdateWorkoutPlanEnrolmentInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanEnrolmentInputFromJson(json);

  List<String>? completedPlanDayWorkoutIds;

  late String id;

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? startDate;

  @override
  List<Object?> get props => [completedPlanDayWorkoutIds, id, startDate];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateWorkoutPlanEnrolmentInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanEnrolmentById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanEnrolmentById$Mutation();

  factory DeleteWorkoutPlanEnrolmentById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanEnrolmentById$MutationFromJson(json);

  late String deleteWorkoutPlanEnrolmentById;

  @override
  List<Object?> get props => [deleteWorkoutPlanEnrolmentById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanEnrolmentById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolmentSummary extends JsonSerializable
    with EquatableMixin, WorkoutPlanEnrolmentSummaryMixin {
  WorkoutPlanEnrolmentSummary();

  factory WorkoutPlanEnrolmentSummary.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolmentSummaryFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, startDate, completedPlanDayWorkoutIds, workoutPlan];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanEnrolmentSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolments$Query extends JsonSerializable with EquatableMixin {
  WorkoutPlanEnrolments$Query();

  factory WorkoutPlanEnrolments$Query.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolments$QueryFromJson(json);

  late List<WorkoutPlanEnrolmentSummary> workoutPlanEnrolments;

  @override
  List<Object?> get props => [workoutPlanEnrolments];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanEnrolments$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolmentSummaryMixin$WorkoutPlanSummary
    extends JsonSerializable with EquatableMixin, WorkoutPlanSummaryMixin {
  WorkoutPlanEnrolmentSummaryMixin$WorkoutPlanSummary();

  factory WorkoutPlanEnrolmentSummaryMixin$WorkoutPlanSummary.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolmentSummaryMixin$WorkoutPlanSummaryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        archived,
        name,
        description,
        coverImageUri,
        lengthWeeks,
        daysPerWeek,
        workoutsCount,
        user,
        enrolmentsCount,
        goals,
        tags,
        reviewScore,
        reviewCount
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanEnrolmentSummaryMixin$WorkoutPlanSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlan extends JsonSerializable
    with EquatableMixin, WorkoutPlanDataMixin {
  WorkoutPlan();

  factory WorkoutPlan.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        archived,
        name,
        description,
        lengthWeeks,
        daysPerWeek,
        coverImageUri,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        contentAccessScope,
        user,
        workoutPlanDays,
        workoutPlanReviews,
        workoutTags,
        workoutPlanEnrolments
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolmentWithPlan extends JsonSerializable
    with EquatableMixin {
  WorkoutPlanEnrolmentWithPlan();

  factory WorkoutPlanEnrolmentWithPlan.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolmentWithPlanFromJson(json);

  @JsonKey(name: '__typename')
  String? $$typename;

  @JsonKey(name: 'WorkoutPlanEnrolment')
  late WorkoutPlanEnrolment workoutPlanEnrolment;

  @JsonKey(name: 'WorkoutPlan')
  late WorkoutPlan workoutPlan;

  @override
  List<Object?> get props => [$$typename, workoutPlanEnrolment, workoutPlan];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanEnrolmentWithPlanToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolmentById$Query extends JsonSerializable
    with EquatableMixin {
  WorkoutPlanEnrolmentById$Query();

  factory WorkoutPlanEnrolmentById$Query.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolmentById$QueryFromJson(json);

  late WorkoutPlanEnrolmentWithPlan workoutPlanEnrolmentById;

  @override
  List<Object?> get props => [workoutPlanEnrolmentById];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanEnrolmentById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDataMixin$UserSummary extends JsonSerializable
    with EquatableMixin, UserSummaryMixin {
  WorkoutPlanDataMixin$UserSummary();

  factory WorkoutPlanDataMixin$UserSummary.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanDataMixin$UserSummaryFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, avatarUri, displayName, userProfileScope];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanDataMixin$UserSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDataMixin$WorkoutPlanDay extends JsonSerializable
    with EquatableMixin, WorkoutPlanDayMixin {
  WorkoutPlanDataMixin$WorkoutPlanDay();

  factory WorkoutPlanDataMixin$WorkoutPlanDay.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanDataMixin$WorkoutPlanDayFromJson(json);

  @JsonKey(name: 'WorkoutPlanDayWorkouts')
  late List<WorkoutPlanDayWorkout> workoutPlanDayWorkouts;

  @override
  List<Object?> get props =>
      [id, $$typename, note, dayNumber, workoutPlanDayWorkouts];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanDataMixin$WorkoutPlanDayToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDataMixin$WorkoutPlanReview extends JsonSerializable
    with EquatableMixin, WorkoutPlanReviewMixin {
  WorkoutPlanDataMixin$WorkoutPlanReview();

  factory WorkoutPlanDataMixin$WorkoutPlanReview.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanDataMixin$WorkoutPlanReviewFromJson(json);

  @JsonKey(name: 'User')
  late UserSummary user;

  @override
  List<Object?> get props => [id, $$typename, createdAt, score, comment, user];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanDataMixin$WorkoutPlanReviewToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDataMixin$WorkoutTag extends JsonSerializable
    with EquatableMixin, WorkoutTagMixin {
  WorkoutPlanDataMixin$WorkoutTag();

  factory WorkoutPlanDataMixin$WorkoutTag.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanDataMixin$WorkoutTagFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, tag];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanDataMixin$WorkoutTagToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDataMixin$WorkoutPlanEnrolment extends JsonSerializable
    with EquatableMixin, WorkoutPlanEnrolmentMixin {
  WorkoutPlanDataMixin$WorkoutPlanEnrolment();

  factory WorkoutPlanDataMixin$WorkoutPlanEnrolment.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanDataMixin$WorkoutPlanEnrolmentFromJson(json);

  @JsonKey(name: 'User')
  late UserSummary user;

  @override
  List<Object?> get props =>
      [$$typename, id, startDate, completedPlanDayWorkoutIds, user];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanDataMixin$WorkoutPlanEnrolmentToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanEnrolment$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanEnrolment$Mutation();

  factory CreateWorkoutPlanEnrolment$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanEnrolment$MutationFromJson(json);

  late WorkoutPlanEnrolmentWithPlan createWorkoutPlanEnrolment;

  @override
  List<Object?> get props => [createWorkoutPlanEnrolment];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanEnrolment$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ProgressJournalGoalTag extends JsonSerializable
    with EquatableMixin, ProgressJournalGoalTagMixin {
  ProgressJournalGoalTag();

  factory ProgressJournalGoalTag.fromJson(Map<String, dynamic> json) =>
      _$ProgressJournalGoalTagFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, createdAt, tag, hexColor];
  @override
  Map<String, dynamic> toJson() => _$ProgressJournalGoalTagToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateProgressJournalGoalTag$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateProgressJournalGoalTag$Mutation();

  factory UpdateProgressJournalGoalTag$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateProgressJournalGoalTag$MutationFromJson(json);

  late ProgressJournalGoalTag updateProgressJournalGoalTag;

  @override
  List<Object?> get props => [updateProgressJournalGoalTag];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateProgressJournalGoalTag$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateProgressJournalGoalTagInput extends JsonSerializable
    with EquatableMixin {
  UpdateProgressJournalGoalTagInput(
      {this.hexColor, required this.id, this.tag});

  factory UpdateProgressJournalGoalTagInput.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateProgressJournalGoalTagInputFromJson(json);

  String? hexColor;

  late String id;

  String? tag;

  @override
  List<Object?> get props => [hexColor, id, tag];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateProgressJournalGoalTagInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ProgressJournalEntry extends JsonSerializable
    with EquatableMixin, ProgressJournalEntryMixin {
  ProgressJournalEntry();

  factory ProgressJournalEntry.fromJson(Map<String, dynamic> json) =>
      _$ProgressJournalEntryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        note,
        voiceNoteUri,
        moodScore,
        energyScore,
        confidenceScore,
        motivationScore
      ];
  @override
  Map<String, dynamic> toJson() => _$ProgressJournalEntryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ProgressJournalGoal extends JsonSerializable
    with EquatableMixin, ProgressJournalGoalMixin {
  ProgressJournalGoal();

  factory ProgressJournalGoal.fromJson(Map<String, dynamic> json) =>
      _$ProgressJournalGoalFromJson(json);

  @JsonKey(name: 'ProgressJournalGoalTags')
  late List<ProgressJournalGoalTag> progressJournalGoalTags;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        name,
        description,
        deadline,
        completedDate,
        progressJournalGoalTags
      ];
  @override
  Map<String, dynamic> toJson() => _$ProgressJournalGoalToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ProgressJournal extends JsonSerializable
    with EquatableMixin, ProgressJournalMixin {
  ProgressJournal();

  factory ProgressJournal.fromJson(Map<String, dynamic> json) =>
      _$ProgressJournalFromJson(json);

  @JsonKey(name: 'ProgressJournalEntries')
  late List<ProgressJournalEntry> progressJournalEntries;

  @JsonKey(name: 'ProgressJournalGoals')
  late List<ProgressJournalGoal> progressJournalGoals;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        name,
        description,
        coverImageUri,
        progressJournalEntries,
        progressJournalGoals
      ];
  @override
  Map<String, dynamic> toJson() => _$ProgressJournalToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ProgressJournalById$Query extends JsonSerializable with EquatableMixin {
  ProgressJournalById$Query();

  factory ProgressJournalById$Query.fromJson(Map<String, dynamic> json) =>
      _$ProgressJournalById$QueryFromJson(json);

  late ProgressJournal progressJournalById;

  @override
  List<Object?> get props => [progressJournalById];
  @override
  Map<String, dynamic> toJson() => _$ProgressJournalById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateProgressJournalEntry$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateProgressJournalEntry$Mutation();

  factory CreateProgressJournalEntry$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateProgressJournalEntry$MutationFromJson(json);

  late ProgressJournalEntry createProgressJournalEntry;

  @override
  List<Object?> get props => [createProgressJournalEntry];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateProgressJournalEntry$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateProgressJournalEntryInput extends JsonSerializable
    with EquatableMixin {
  CreateProgressJournalEntryInput(
      {required this.progressJournal,
      this.confidenceScore,
      this.energyScore,
      this.moodScore,
      this.motivationScore,
      this.note,
      this.voiceNoteUri});

  factory CreateProgressJournalEntryInput.fromJson(Map<String, dynamic> json) =>
      _$CreateProgressJournalEntryInputFromJson(json);

  @JsonKey(name: 'ProgressJournal')
  late ConnectRelationInput progressJournal;

  double? confidenceScore;

  double? energyScore;

  double? moodScore;

  double? motivationScore;

  String? note;

  String? voiceNoteUri;

  @override
  List<Object?> get props => [
        progressJournal,
        confidenceScore,
        energyScore,
        moodScore,
        motivationScore,
        note,
        voiceNoteUri
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateProgressJournalEntryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteProgressJournalById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteProgressJournalById$Mutation();

  factory DeleteProgressJournalById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteProgressJournalById$MutationFromJson(json);

  late String deleteProgressJournalById;

  @override
  List<Object?> get props => [deleteProgressJournalById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteProgressJournalById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateProgressJournal$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateProgressJournal$Mutation();

  factory CreateProgressJournal$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateProgressJournal$MutationFromJson(json);

  late ProgressJournal createProgressJournal;

  @override
  List<Object?> get props => [createProgressJournal];
  @override
  Map<String, dynamic> toJson() => _$CreateProgressJournal$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateProgressJournalInput extends JsonSerializable with EquatableMixin {
  CreateProgressJournalInput(
      {this.coverImageUri, this.description, required this.name});

  factory CreateProgressJournalInput.fromJson(Map<String, dynamic> json) =>
      _$CreateProgressJournalInputFromJson(json);

  String? coverImageUri;

  String? description;

  late String name;

  @override
  List<Object?> get props => [coverImageUri, description, name];
  @override
  Map<String, dynamic> toJson() => _$CreateProgressJournalInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateProgressJournal$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateProgressJournal$Mutation();

  factory UpdateProgressJournal$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateProgressJournal$MutationFromJson(json);

  late ProgressJournal updateProgressJournal;

  @override
  List<Object?> get props => [updateProgressJournal];
  @override
  Map<String, dynamic> toJson() => _$UpdateProgressJournal$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateProgressJournalInput extends JsonSerializable with EquatableMixin {
  UpdateProgressJournalInput(
      {this.coverImageUri, this.description, required this.id, this.name});

  factory UpdateProgressJournalInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateProgressJournalInputFromJson(json);

  String? coverImageUri;

  String? description;

  late String id;

  String? name;

  @override
  List<Object?> get props => [coverImageUri, description, id, name];
  @override
  Map<String, dynamic> toJson() => _$UpdateProgressJournalInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteProgressJournalEntryById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteProgressJournalEntryById$Mutation();

  factory DeleteProgressJournalEntryById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteProgressJournalEntryById$MutationFromJson(json);

  late String deleteProgressJournalEntryById;

  @override
  List<Object?> get props => [deleteProgressJournalEntryById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteProgressJournalEntryById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateProgressJournalEntry$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateProgressJournalEntry$Mutation();

  factory UpdateProgressJournalEntry$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateProgressJournalEntry$MutationFromJson(json);

  late ProgressJournalEntry updateProgressJournalEntry;

  @override
  List<Object?> get props => [updateProgressJournalEntry];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateProgressJournalEntry$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateProgressJournalEntryInput extends JsonSerializable
    with EquatableMixin {
  UpdateProgressJournalEntryInput(
      {this.confidenceScore,
      this.energyScore,
      required this.id,
      this.moodScore,
      this.motivationScore,
      this.note,
      this.voiceNoteUri});

  factory UpdateProgressJournalEntryInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateProgressJournalEntryInputFromJson(json);

  double? confidenceScore;

  double? energyScore;

  late String id;

  double? moodScore;

  double? motivationScore;

  String? note;

  String? voiceNoteUri;

  @override
  List<Object?> get props => [
        confidenceScore,
        energyScore,
        id,
        moodScore,
        motivationScore,
        note,
        voiceNoteUri
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateProgressJournalEntryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateProgressJournalGoal$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateProgressJournalGoal$Mutation();

  factory CreateProgressJournalGoal$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateProgressJournalGoal$MutationFromJson(json);

  late ProgressJournalGoal createProgressJournalGoal;

  @override
  List<Object?> get props => [createProgressJournalGoal];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateProgressJournalGoal$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateProgressJournalGoalInput extends JsonSerializable
    with EquatableMixin {
  CreateProgressJournalGoalInput(
      {required this.progressJournal,
      this.progressJournalGoalTags,
      this.deadline,
      this.description,
      required this.name});

  factory CreateProgressJournalGoalInput.fromJson(Map<String, dynamic> json) =>
      _$CreateProgressJournalGoalInputFromJson(json);

  @JsonKey(name: 'ProgressJournal')
  late ConnectRelationInput progressJournal;

  @JsonKey(name: 'ProgressJournalGoalTags')
  List<ConnectRelationInput>? progressJournalGoalTags;

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? deadline;

  String? description;

  late String name;

  @override
  List<Object?> get props =>
      [progressJournal, progressJournalGoalTags, deadline, description, name];
  @override
  Map<String, dynamic> toJson() => _$CreateProgressJournalGoalInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserProgressJournals$Query extends JsonSerializable with EquatableMixin {
  UserProgressJournals$Query();

  factory UserProgressJournals$Query.fromJson(Map<String, dynamic> json) =>
      _$UserProgressJournals$QueryFromJson(json);

  late List<ProgressJournal> userProgressJournals;

  @override
  List<Object?> get props => [userProgressJournals];
  @override
  Map<String, dynamic> toJson() => _$UserProgressJournals$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateProgressJournalGoal$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateProgressJournalGoal$Mutation();

  factory UpdateProgressJournalGoal$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateProgressJournalGoal$MutationFromJson(json);

  late ProgressJournalGoal updateProgressJournalGoal;

  @override
  List<Object?> get props => [updateProgressJournalGoal];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateProgressJournalGoal$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateProgressJournalGoalInput extends JsonSerializable
    with EquatableMixin {
  UpdateProgressJournalGoalInput(
      {this.progressJournalGoalTags,
      this.completedDate,
      this.deadline,
      this.description,
      required this.id,
      this.name});

  factory UpdateProgressJournalGoalInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateProgressJournalGoalInputFromJson(json);

  @JsonKey(name: 'ProgressJournalGoalTags')
  List<ConnectRelationInput>? progressJournalGoalTags;

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? completedDate;

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? deadline;

  String? description;

  late String id;

  String? name;

  @override
  List<Object?> get props =>
      [progressJournalGoalTags, completedDate, deadline, description, id, name];
  @override
  Map<String, dynamic> toJson() => _$UpdateProgressJournalGoalInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateProgressJournalGoalTag$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateProgressJournalGoalTag$Mutation();

  factory CreateProgressJournalGoalTag$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateProgressJournalGoalTag$MutationFromJson(json);

  late ProgressJournalGoalTag createProgressJournalGoalTag;

  @override
  List<Object?> get props => [createProgressJournalGoalTag];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateProgressJournalGoalTag$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateProgressJournalGoalTagInput extends JsonSerializable
    with EquatableMixin {
  CreateProgressJournalGoalTagInput(
      {required this.hexColor, required this.tag});

  factory CreateProgressJournalGoalTagInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateProgressJournalGoalTagInputFromJson(json);

  late String hexColor;

  late String tag;

  @override
  List<Object?> get props => [hexColor, tag];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateProgressJournalGoalTagInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteProgressJournalGoalById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteProgressJournalGoalById$Mutation();

  factory DeleteProgressJournalGoalById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteProgressJournalGoalById$MutationFromJson(json);

  late String deleteProgressJournalGoalById;

  @override
  List<Object?> get props => [deleteProgressJournalGoalById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteProgressJournalGoalById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteProgressJournalGoalTagById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteProgressJournalGoalTagById$Mutation();

  factory DeleteProgressJournalGoalTagById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteProgressJournalGoalTagById$MutationFromJson(json);

  late String deleteProgressJournalGoalTagById;

  @override
  List<Object?> get props => [deleteProgressJournalGoalTagById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteProgressJournalGoalTagById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ProgressJournalGoalTags$Query extends JsonSerializable
    with EquatableMixin {
  ProgressJournalGoalTags$Query();

  factory ProgressJournalGoalTags$Query.fromJson(Map<String, dynamic> json) =>
      _$ProgressJournalGoalTags$QueryFromJson(json);

  late List<ProgressJournalGoalTag> progressJournalGoalTags;

  @override
  List<Object?> get props => [progressJournalGoalTags];
  @override
  Map<String, dynamic> toJson() => _$ProgressJournalGoalTags$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanDay extends JsonSerializable
    with EquatableMixin, WorkoutPlanDayMixin {
  WorkoutPlanDay();

  factory WorkoutPlanDay.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanDayFromJson(json);

  @JsonKey(name: 'WorkoutPlanDayWorkouts')
  late List<WorkoutPlanDayWorkout> workoutPlanDayWorkouts;

  @override
  List<Object?> get props =>
      [id, $$typename, note, dayNumber, workoutPlanDayWorkouts];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanDayToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MoveWorkoutPlanDayToAnotherDay$Mutation extends JsonSerializable
    with EquatableMixin {
  MoveWorkoutPlanDayToAnotherDay$Mutation();

  factory MoveWorkoutPlanDayToAnotherDay$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$MoveWorkoutPlanDayToAnotherDay$MutationFromJson(json);

  late WorkoutPlanDay moveWorkoutPlanDayToAnotherDay;

  @override
  List<Object?> get props => [moveWorkoutPlanDayToAnotherDay];
  @override
  Map<String, dynamic> toJson() =>
      _$MoveWorkoutPlanDayToAnotherDay$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MoveWorkoutPlanDayToAnotherDayInput extends JsonSerializable
    with EquatableMixin {
  MoveWorkoutPlanDayToAnotherDayInput(
      {required this.id, required this.moveToDay});

  factory MoveWorkoutPlanDayToAnotherDayInput.fromJson(
          Map<String, dynamic> json) =>
      _$MoveWorkoutPlanDayToAnotherDayInputFromJson(json);

  late String id;

  late int moveToDay;

  @override
  List<Object?> get props => [id, moveToDay];
  @override
  Map<String, dynamic> toJson() =>
      _$MoveWorkoutPlanDayToAnotherDayInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanDaysById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanDaysById$Mutation();

  factory DeleteWorkoutPlanDaysById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanDaysById$MutationFromJson(json);

  late List<String> deleteWorkoutPlanDaysById;

  @override
  List<Object?> get props => [deleteWorkoutPlanDaysById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanDaysById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanDay$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanDay$Mutation();

  factory UpdateWorkoutPlanDay$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanDay$MutationFromJson(json);

  late WorkoutPlanDay updateWorkoutPlanDay;

  @override
  List<Object?> get props => [updateWorkoutPlanDay];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanDay$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanDayInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutPlanDayInput({this.dayNumber, required this.id, this.note});

  factory UpdateWorkoutPlanDayInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanDayInputFromJson(json);

  int? dayNumber;

  late String id;

  String? note;

  @override
  List<Object?> get props => [dayNumber, id, note];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanDayInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanDayWithWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanDayWithWorkout$Mutation();

  factory CreateWorkoutPlanDayWithWorkout$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanDayWithWorkout$MutationFromJson(json);

  late WorkoutPlanDay createWorkoutPlanDayWithWorkout;

  @override
  List<Object?> get props => [createWorkoutPlanDayWithWorkout];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanDayWithWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanDayWithWorkoutInput extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanDayWithWorkoutInput(
      {required this.workout,
      required this.workoutPlan,
      required this.dayNumber});

  factory CreateWorkoutPlanDayWithWorkoutInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanDayWithWorkoutInputFromJson(json);

  @JsonKey(name: 'Workout')
  late ConnectRelationInput workout;

  @JsonKey(name: 'WorkoutPlan')
  late ConnectRelationInput workoutPlan;

  late int dayNumber;

  @override
  List<Object?> get props => [workout, workoutPlan, dayNumber];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanDayWithWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CopyWorkoutPlanDayToAnotherDay$Mutation extends JsonSerializable
    with EquatableMixin {
  CopyWorkoutPlanDayToAnotherDay$Mutation();

  factory CopyWorkoutPlanDayToAnotherDay$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CopyWorkoutPlanDayToAnotherDay$MutationFromJson(json);

  late WorkoutPlanDay copyWorkoutPlanDayToAnotherDay;

  @override
  List<Object?> get props => [copyWorkoutPlanDayToAnotherDay];
  @override
  Map<String, dynamic> toJson() =>
      _$CopyWorkoutPlanDayToAnotherDay$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CopyWorkoutPlanDayToAnotherDayInput extends JsonSerializable
    with EquatableMixin {
  CopyWorkoutPlanDayToAnotherDayInput(
      {required this.copyToDay, required this.id});

  factory CopyWorkoutPlanDayToAnotherDayInput.fromJson(
          Map<String, dynamic> json) =>
      _$CopyWorkoutPlanDayToAnotherDayInputFromJson(json);

  late int copyToDay;

  late String id;

  @override
  List<Object?> get props => [copyToDay, id];
  @override
  Map<String, dynamic> toJson() =>
      _$CopyWorkoutPlanDayToAnotherDayInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GymProfile extends JsonSerializable with EquatableMixin, GymProfileMixin {
  GymProfile();

  factory GymProfile.fromJson(Map<String, dynamic> json) =>
      _$GymProfileFromJson(json);

  @JsonKey(name: 'Equipments')
  late List<Equipment> equipments;

  @override
  List<Object?> get props => [$$typename, id, name, description, equipments];
  @override
  Map<String, dynamic> toJson() => _$GymProfileToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutGoal extends JsonSerializable
    with EquatableMixin, WorkoutGoalMixin {
  WorkoutGoal();

  factory WorkoutGoal.fromJson(Map<String, dynamic> json) =>
      _$WorkoutGoalFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, description, hexColor];
  @override
  Map<String, dynamic> toJson() => _$WorkoutGoalToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSectionRoundSetData extends JsonSerializable with EquatableMixin {
  WorkoutSectionRoundSetData();

  factory WorkoutSectionRoundSetData.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSectionRoundSetDataFromJson(json);

  late int rounds;

  late int timeTakenSeconds;

  late String moves;

  @override
  List<Object?> get props => [rounds, timeTakenSeconds, moves];
  @override
  Map<String, dynamic> toJson() => _$WorkoutSectionRoundSetDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSectionRoundData extends JsonSerializable with EquatableMixin {
  WorkoutSectionRoundData();

  factory WorkoutSectionRoundData.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSectionRoundDataFromJson(json);

  late int timeTakenSeconds;

  late List<WorkoutSectionRoundSetData> sets;

  @override
  List<Object?> get props => [timeTakenSeconds, sets];
  @override
  Map<String, dynamic> toJson() => _$WorkoutSectionRoundDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LoggedWorkoutSectionData extends JsonSerializable with EquatableMixin {
  LoggedWorkoutSectionData();

  factory LoggedWorkoutSectionData.fromJson(Map<String, dynamic> json) =>
      _$LoggedWorkoutSectionDataFromJson(json);

  late List<WorkoutSectionRoundData> rounds;

  @override
  List<Object?> get props => [rounds];
  @override
  Map<String, dynamic> toJson() => _$LoggedWorkoutSectionDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LoggedWorkoutSection extends JsonSerializable
    with EquatableMixin, LoggedWorkoutSectionMixin {
  LoggedWorkoutSection();

  factory LoggedWorkoutSection.fromJson(Map<String, dynamic> json) =>
      _$LoggedWorkoutSectionFromJson(json);

  @JsonKey(name: 'WorkoutSectionType')
  late WorkoutSectionType workoutSectionType;

  @JsonKey(name: 'BodyAreas')
  late List<BodyArea> bodyAreas;

  @JsonKey(name: 'MoveTypes')
  late List<MoveType> moveTypes;

  LoggedWorkoutSectionData? loggedWorkoutSectionData;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        repScore,
        timeTakenSeconds,
        sortPosition,
        workoutSectionType,
        bodyAreas,
        moveTypes,
        loggedWorkoutSectionData
      ];
  @override
  Map<String, dynamic> toJson() => _$LoggedWorkoutSectionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LoggedWorkout extends JsonSerializable
    with EquatableMixin, LoggedWorkoutMixin {
  LoggedWorkout();

  factory LoggedWorkout.fromJson(Map<String, dynamic> json) =>
      _$LoggedWorkoutFromJson(json);

  @JsonKey(name: 'GymProfile')
  GymProfile? gymProfile;

  @JsonKey(name: 'WorkoutGoals')
  late List<WorkoutGoal> workoutGoals;

  @JsonKey(name: 'LoggedWorkoutSections')
  late List<LoggedWorkoutSection> loggedWorkoutSections;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        completedOn,
        note,
        name,
        workoutId,
        gymProfile,
        workoutGoals,
        loggedWorkoutSections
      ];
  @override
  Map<String, dynamic> toJson() => _$LoggedWorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LoggedWorkoutById$Query extends JsonSerializable with EquatableMixin {
  LoggedWorkoutById$Query();

  factory LoggedWorkoutById$Query.fromJson(Map<String, dynamic> json) =>
      _$LoggedWorkoutById$QueryFromJson(json);

  late LoggedWorkout loggedWorkoutById;

  @override
  List<Object?> get props => [loggedWorkoutById];
  @override
  Map<String, dynamic> toJson() => _$LoggedWorkoutById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteLoggedWorkoutById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteLoggedWorkoutById$Mutation();

  factory DeleteLoggedWorkoutById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteLoggedWorkoutById$MutationFromJson(json);

  late String deleteLoggedWorkoutById;

  @override
  List<Object?> get props => [deleteLoggedWorkoutById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteLoggedWorkoutById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LifetimeLogStatsSummary extends JsonSerializable
    with EquatableMixin, LifetimeLogStatsSummaryMixin {
  LifetimeLogStatsSummary();

  factory LifetimeLogStatsSummary.fromJson(Map<String, dynamic> json) =>
      _$LifetimeLogStatsSummaryFromJson(json);

  @override
  List<Object?> get props => [$$typename, minutesWorked, sessionsLogged];
  @override
  Map<String, dynamic> toJson() => _$LifetimeLogStatsSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LifetimeLogStatsSummary$Query extends JsonSerializable
    with EquatableMixin {
  LifetimeLogStatsSummary$Query();

  factory LifetimeLogStatsSummary$Query.fromJson(Map<String, dynamic> json) =>
      _$LifetimeLogStatsSummary$QueryFromJson(json);

  late LifetimeLogStatsSummary lifetimeLogStatsSummary;

  @override
  List<Object?> get props => [lifetimeLogStatsSummary];
  @override
  Map<String, dynamic> toJson() => _$LifetimeLogStatsSummary$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserLoggedWorkouts$Query extends JsonSerializable with EquatableMixin {
  UserLoggedWorkouts$Query();

  factory UserLoggedWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$UserLoggedWorkouts$QueryFromJson(json);

  late List<LoggedWorkout> userLoggedWorkouts;

  @override
  List<Object?> get props => [userLoggedWorkouts];
  @override
  Map<String, dynamic> toJson() => _$UserLoggedWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkout extends JsonSerializable
    with EquatableMixin, LoggedWorkoutMixin {
  UpdateLoggedWorkout();

  factory UpdateLoggedWorkout.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutFromJson(json);

  @override
  List<Object?> get props =>
      [$$typename, id, completedOn, note, name, workoutId];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkout$Mutation();

  factory UpdateLoggedWorkout$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkout$MutationFromJson(json);

  late UpdateLoggedWorkout updateLoggedWorkout;

  @override
  List<Object?> get props => [updateLoggedWorkout];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutInput extends JsonSerializable with EquatableMixin {
  UpdateLoggedWorkoutInput(
      {this.gymProfile,
      required this.workoutGoals,
      this.completedOn,
      required this.id,
      this.note});

  factory UpdateLoggedWorkoutInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutInputFromJson(json);

  @JsonKey(name: 'GymProfile')
  ConnectRelationInput? gymProfile;

  @JsonKey(name: 'WorkoutGoals')
  late List<ConnectRelationInput> workoutGoals;

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? completedOn;

  late String id;

  String? note;

  @override
  List<Object?> get props => [gymProfile, workoutGoals, completedOn, id, note];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateLoggedWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateLoggedWorkout$Mutation();

  factory CreateLoggedWorkout$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateLoggedWorkout$MutationFromJson(json);

  late LoggedWorkout createLoggedWorkout;

  @override
  List<Object?> get props => [createLoggedWorkout];
  @override
  Map<String, dynamic> toJson() => _$CreateLoggedWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateLoggedWorkoutInput extends JsonSerializable with EquatableMixin {
  CreateLoggedWorkoutInput(
      {this.gymProfile,
      required this.loggedWorkoutSections,
      this.scheduledWorkout,
      this.workout,
      required this.workoutGoals,
      required this.completedOn,
      required this.name,
      this.note});

  factory CreateLoggedWorkoutInput.fromJson(Map<String, dynamic> json) =>
      _$CreateLoggedWorkoutInputFromJson(json);

  @JsonKey(name: 'GymProfile')
  ConnectRelationInput? gymProfile;

  @JsonKey(name: 'LoggedWorkoutSections')
  late List<CreateLoggedWorkoutSectionInLoggedWorkoutInput>
      loggedWorkoutSections;

  @JsonKey(name: 'ScheduledWorkout')
  ConnectRelationInput? scheduledWorkout;

  @JsonKey(name: 'Workout')
  ConnectRelationInput? workout;

  @JsonKey(name: 'WorkoutGoals')
  late List<ConnectRelationInput> workoutGoals;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime completedOn;

  late String name;

  String? note;

  @override
  List<Object?> get props => [
        gymProfile,
        loggedWorkoutSections,
        scheduledWorkout,
        workout,
        workoutGoals,
        completedOn,
        name,
        note
      ];
  @override
  Map<String, dynamic> toJson() => _$CreateLoggedWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateLoggedWorkoutSectionInLoggedWorkoutInput extends JsonSerializable
    with EquatableMixin {
  CreateLoggedWorkoutSectionInLoggedWorkoutInput(
      {required this.bodyAreas,
      required this.moveTypes,
      required this.workoutSectionType,
      required this.loggedWorkoutSectionData,
      this.name,
      this.repScore,
      required this.sortPosition,
      required this.timeTakenSeconds});

  factory CreateLoggedWorkoutSectionInLoggedWorkoutInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateLoggedWorkoutSectionInLoggedWorkoutInputFromJson(json);

  @JsonKey(name: 'BodyAreas')
  late List<ConnectRelationInput> bodyAreas;

  @JsonKey(name: 'MoveTypes')
  late List<ConnectRelationInput> moveTypes;

  @JsonKey(name: 'WorkoutSectionType')
  late ConnectRelationInput workoutSectionType;

  late LoggedWorkoutSectionDataInput loggedWorkoutSectionData;

  String? name;

  int? repScore;

  late int sortPosition;

  late int timeTakenSeconds;

  @override
  List<Object?> get props => [
        bodyAreas,
        moveTypes,
        workoutSectionType,
        loggedWorkoutSectionData,
        name,
        repScore,
        sortPosition,
        timeTakenSeconds
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateLoggedWorkoutSectionInLoggedWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LoggedWorkoutSectionDataInput extends JsonSerializable
    with EquatableMixin {
  LoggedWorkoutSectionDataInput({required this.rounds});

  factory LoggedWorkoutSectionDataInput.fromJson(Map<String, dynamic> json) =>
      _$LoggedWorkoutSectionDataInputFromJson(json);

  late List<WorkoutSectionRoundDataInput> rounds;

  @override
  List<Object?> get props => [rounds];
  @override
  Map<String, dynamic> toJson() => _$LoggedWorkoutSectionDataInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSectionRoundDataInput extends JsonSerializable
    with EquatableMixin {
  WorkoutSectionRoundDataInput(
      {required this.sets, required this.timeTakenSeconds});

  factory WorkoutSectionRoundDataInput.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSectionRoundDataInputFromJson(json);

  late List<WorkoutSectionRoundSetDataInput> sets;

  late int timeTakenSeconds;

  @override
  List<Object?> get props => [sets, timeTakenSeconds];
  @override
  Map<String, dynamic> toJson() => _$WorkoutSectionRoundDataInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSectionRoundSetDataInput extends JsonSerializable
    with EquatableMixin {
  WorkoutSectionRoundSetDataInput(
      {required this.moves,
      required this.rounds,
      required this.timeTakenSeconds});

  factory WorkoutSectionRoundSetDataInput.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSectionRoundSetDataInputFromJson(json);

  late String moves;

  late int rounds;

  late int timeTakenSeconds;

  @override
  List<Object?> get props => [moves, rounds, timeTakenSeconds];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutSectionRoundSetDataInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutSection extends JsonSerializable
    with EquatableMixin, LoggedWorkoutSectionMixin {
  UpdateLoggedWorkoutSection();

  factory UpdateLoggedWorkoutSection.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutSectionFromJson(json);

  @JsonKey(name: 'WorkoutSectionType')
  late WorkoutSectionType workoutSectionType;

  @JsonKey(name: 'BodyAreas')
  late List<BodyArea> bodyAreas;

  @JsonKey(name: 'MoveTypes')
  late List<MoveType> moveTypes;

  LoggedWorkoutSectionData? loggedWorkoutSectionData;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        repScore,
        timeTakenSeconds,
        sortPosition,
        workoutSectionType,
        bodyAreas,
        moveTypes,
        loggedWorkoutSectionData
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkoutSectionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutSection$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkoutSection$Mutation();

  factory UpdateLoggedWorkoutSection$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutSection$MutationFromJson(json);

  late UpdateLoggedWorkoutSection updateLoggedWorkoutSection;

  @override
  List<Object?> get props => [updateLoggedWorkoutSection];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateLoggedWorkoutSection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutSectionInput extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkoutSectionInput(
      {required this.bodyAreas,
      required this.moveTypes,
      required this.id,
      this.loggedWorkoutSectionData,
      this.repScore,
      this.timeTakenSeconds});

  factory UpdateLoggedWorkoutSectionInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutSectionInputFromJson(json);

  @JsonKey(name: 'BodyAreas')
  late List<ConnectRelationInput> bodyAreas;

  @JsonKey(name: 'MoveTypes')
  late List<ConnectRelationInput> moveTypes;

  late String id;

  LoggedWorkoutSectionDataInput? loggedWorkoutSectionData;

  int? repScore;

  int? timeTakenSeconds;

  @override
  List<Object?> get props => [
        bodyAreas,
        moveTypes,
        id,
        loggedWorkoutSectionData,
        repScore,
        timeTakenSeconds
      ];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateLoggedWorkoutSectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LogCountByWorkout$Query extends JsonSerializable with EquatableMixin {
  LogCountByWorkout$Query();

  factory LogCountByWorkout$Query.fromJson(Map<String, dynamic> json) =>
      _$LogCountByWorkout$QueryFromJson(json);

  late int logCountByWorkout;

  @override
  List<Object?> get props => [logCountByWorkout];
  @override
  Map<String, dynamic> toJson() => _$LogCountByWorkout$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanReviewById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanReviewById$Mutation();

  factory DeleteWorkoutPlanReviewById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanReviewById$MutationFromJson(json);

  late String deleteWorkoutPlanReviewById;

  @override
  List<Object?> get props => [deleteWorkoutPlanReviewById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanReviewById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanReview extends JsonSerializable
    with EquatableMixin, WorkoutPlanReviewMixin {
  WorkoutPlanReview();

  factory WorkoutPlanReview.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanReviewFromJson(json);

  @JsonKey(name: 'User')
  late UserSummary user;

  @override
  List<Object?> get props => [id, $$typename, createdAt, score, comment, user];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanReviewToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanReview$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanReview$Mutation();

  factory UpdateWorkoutPlanReview$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanReview$MutationFromJson(json);

  late WorkoutPlanReview updateWorkoutPlanReview;

  @override
  List<Object?> get props => [updateWorkoutPlanReview];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateWorkoutPlanReview$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanReviewInput extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanReviewInput({this.comment, required this.id, this.score});

  factory UpdateWorkoutPlanReviewInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanReviewInputFromJson(json);

  String? comment;

  late String id;

  double? score;

  @override
  List<Object?> get props => [comment, id, score];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanReviewInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanReview$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanReview$Mutation();

  factory CreateWorkoutPlanReview$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanReview$MutationFromJson(json);

  late WorkoutPlanReview createWorkoutPlanReview;

  @override
  List<Object?> get props => [createWorkoutPlanReview];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanReview$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanReviewInput extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanReviewInput(
      {required this.workoutPlan, this.comment, required this.score});

  factory CreateWorkoutPlanReviewInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutPlanReviewInputFromJson(json);

  @JsonKey(name: 'WorkoutPlan')
  late ConnectRelationInput workoutPlan;

  String? comment;

  late double score;

  @override
  List<Object?> get props => [workoutPlan, comment, score];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutPlanReviewInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutFromClub$Mutation extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutFromClub$Mutation();

  factory RemoveWorkoutFromClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$RemoveWorkoutFromClub$MutationFromJson(json);

  late Club removeWorkoutFromClub;

  @override
  List<Object?> get props => [removeWorkoutFromClub];
  @override
  Map<String, dynamic> toJson() => _$RemoveWorkoutFromClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutPlanFromClub$Mutation extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutPlanFromClub$Mutation();

  factory RemoveWorkoutPlanFromClub$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutPlanFromClub$MutationFromJson(json);

  late Club removeWorkoutPlanFromClub;

  @override
  List<Object?> get props => [removeWorkoutPlanFromClub];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutPlanFromClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutToClub$Mutation extends JsonSerializable with EquatableMixin {
  AddWorkoutToClub$Mutation();

  factory AddWorkoutToClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutToClub$MutationFromJson(json);

  late Club addWorkoutToClub;

  @override
  List<Object?> get props => [addWorkoutToClub];
  @override
  Map<String, dynamic> toJson() => _$AddWorkoutToClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutPlanToClub$Mutation extends JsonSerializable
    with EquatableMixin {
  AddWorkoutPlanToClub$Mutation();

  factory AddWorkoutPlanToClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutPlanToClub$MutationFromJson(json);

  late Club addWorkoutPlanToClub;

  @override
  List<Object?> get props => [addWorkoutPlanToClub];
  @override
  Map<String, dynamic> toJson() => _$AddWorkoutPlanToClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserWorkoutPlans$Query extends JsonSerializable with EquatableMixin {
  UserWorkoutPlans$Query();

  factory UserWorkoutPlans$Query.fromJson(Map<String, dynamic> json) =>
      _$UserWorkoutPlans$QueryFromJson(json);

  late List<WorkoutPlanSummary> userWorkoutPlans;

  @override
  List<Object?> get props => [userWorkoutPlans];
  @override
  Map<String, dynamic> toJson() => _$UserWorkoutPlans$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PublicWorkoutPlans$Query extends JsonSerializable with EquatableMixin {
  PublicWorkoutPlans$Query();

  factory PublicWorkoutPlans$Query.fromJson(Map<String, dynamic> json) =>
      _$PublicWorkoutPlans$QueryFromJson(json);

  late List<WorkoutPlanSummary> publicWorkoutPlans;

  @override
  List<Object?> get props => [publicWorkoutPlans];
  @override
  Map<String, dynamic> toJson() => _$PublicWorkoutPlans$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanFiltersInput extends JsonSerializable with EquatableMixin {
  WorkoutPlanFiltersInput(
      {this.bodyweightOnly,
      this.daysPerWeek,
      this.difficultyLevel,
      this.lengthWeeks,
      required this.workoutGoals});

  factory WorkoutPlanFiltersInput.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanFiltersInputFromJson(json);

  bool? bodyweightOnly;

  int? daysPerWeek;

  @JsonKey(unknownEnumValue: DifficultyLevel.artemisUnknown)
  DifficultyLevel? difficultyLevel;

  int? lengthWeeks;

  late List<String> workoutGoals;

  @override
  List<Object?> get props =>
      [bodyweightOnly, daysPerWeek, difficultyLevel, lengthWeeks, workoutGoals];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanFiltersInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanById$Query extends JsonSerializable with EquatableMixin {
  WorkoutPlanById$Query();

  factory WorkoutPlanById$Query.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanById$QueryFromJson(json);

  late WorkoutPlan workoutPlanById;

  @override
  List<Object?> get props => [workoutPlanById];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutTag extends JsonSerializable with EquatableMixin, WorkoutTagMixin {
  WorkoutTag();

  factory WorkoutTag.fromJson(Map<String, dynamic> json) =>
      _$WorkoutTagFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, tag];
  @override
  Map<String, dynamic> toJson() => _$WorkoutTagToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlan extends JsonSerializable
    with EquatableMixin, WorkoutPlanMixin {
  UpdateWorkoutPlan();

  factory UpdateWorkoutPlan.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanFromJson(json);

  @JsonKey(name: 'WorkoutTags')
  late List<WorkoutTag> workoutTags;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        archived,
        name,
        description,
        lengthWeeks,
        daysPerWeek,
        coverImageUri,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        contentAccessScope,
        workoutTags
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlan$Mutation extends JsonSerializable with EquatableMixin {
  UpdateWorkoutPlan$Mutation();

  factory UpdateWorkoutPlan$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlan$MutationFromJson(json);

  late UpdateWorkoutPlan updateWorkoutPlan;

  @override
  List<Object?> get props => [updateWorkoutPlan];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlan$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutPlanInput(
      {this.workoutTags,
      this.contentAccessScope,
      this.coverImageUri,
      this.daysPerWeek,
      this.description,
      required this.id,
      this.introAudioUri,
      this.introVideoThumbUri,
      this.introVideoUri,
      this.lengthWeeks,
      this.name});

  factory UpdateWorkoutPlanInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanInputFromJson(json);

  @JsonKey(name: 'WorkoutTags')
  List<ConnectRelationInput>? workoutTags;

  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  ContentAccessScope? contentAccessScope;

  String? coverImageUri;

  int? daysPerWeek;

  String? description;

  late String id;

  String? introAudioUri;

  String? introVideoThumbUri;

  String? introVideoUri;

  int? lengthWeeks;

  String? name;

  @override
  List<Object?> get props => [
        workoutTags,
        contentAccessScope,
        coverImageUri,
        daysPerWeek,
        description,
        id,
        introAudioUri,
        introVideoThumbUri,
        introVideoUri,
        lengthWeeks,
        name
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlan$Mutation extends JsonSerializable with EquatableMixin {
  CreateWorkoutPlan$Mutation();

  factory CreateWorkoutPlan$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutPlan$MutationFromJson(json);

  late WorkoutPlan createWorkoutPlan;

  @override
  List<Object?> get props => [createWorkoutPlan];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutPlan$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutPlanInput(
      {required this.contentAccessScope, required this.name});

  factory CreateWorkoutPlanInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutPlanInputFromJson(json);

  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;

  late String name;

  @override
  List<Object?> get props => [contentAccessScope, name];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutPlanInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class User extends JsonSerializable with EquatableMixin, UserMixin {
  User();

  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        avatarUri,
        bio,
        birthdate,
        countryCode,
        displayName,
        introVideoUri,
        introVideoThumbUri,
        gender,
        userProfileScope
      ];
  @override
  Map<String, dynamic> toJson() => _$UserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AuthedUser$Query extends JsonSerializable with EquatableMixin {
  AuthedUser$Query();

  factory AuthedUser$Query.fromJson(Map<String, dynamic> json) =>
      _$AuthedUser$QueryFromJson(json);

  late User authedUser;

  @override
  List<Object?> get props => [authedUser];
  @override
  Map<String, dynamic> toJson() => _$AuthedUser$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUser$Mutation extends JsonSerializable with EquatableMixin {
  UpdateUser$Mutation();

  factory UpdateUser$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateUser$MutationFromJson(json);

  late User updateUser;

  @override
  List<Object?> get props => [updateUser];
  @override
  Map<String, dynamic> toJson() => _$UpdateUser$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserInput extends JsonSerializable with EquatableMixin {
  UpdateUserInput(
      {this.avatarUri,
      this.bio,
      this.birthdate,
      this.countryCode,
      this.displayName,
      this.firstname,
      this.gender,
      this.hasOnboarded,
      this.instagramUrl,
      this.introVideoThumbUri,
      this.introVideoUri,
      this.lastname,
      this.linkedinUrl,
      this.snapUrl,
      this.tagline,
      this.tiktokUrl,
      this.townCity,
      this.userProfileScope,
      this.youtubeUrl});

  factory UpdateUserInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserInputFromJson(json);

  String? avatarUri;

  String? bio;

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? birthdate;

  String? countryCode;

  String? displayName;

  String? firstname;

  @JsonKey(unknownEnumValue: Gender.artemisUnknown)
  Gender? gender;

  bool? hasOnboarded;

  String? instagramUrl;

  String? introVideoThumbUri;

  String? introVideoUri;

  String? lastname;

  String? linkedinUrl;

  String? snapUrl;

  String? tagline;

  String? tiktokUrl;

  String? townCity;

  @JsonKey(unknownEnumValue: UserProfileScope.artemisUnknown)
  UserProfileScope? userProfileScope;

  String? youtubeUrl;

  @override
  List<Object?> get props => [
        avatarUri,
        bio,
        birthdate,
        countryCode,
        displayName,
        firstname,
        gender,
        hasOnboarded,
        instagramUrl,
        introVideoThumbUri,
        introVideoUri,
        lastname,
        linkedinUrl,
        snapUrl,
        tagline,
        tiktokUrl,
        townCity,
        userProfileScope,
        youtubeUrl
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserAvatarData extends JsonSerializable
    with EquatableMixin, UserAvatarDataMixin {
  UserAvatarData();

  factory UserAvatarData.fromJson(Map<String, dynamic> json) =>
      _$UserAvatarDataFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, avatarUri, displayName];
  @override
  Map<String, dynamic> toJson() => _$UserAvatarDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserAvatarById$Query extends JsonSerializable with EquatableMixin {
  UserAvatarById$Query();

  factory UserAvatarById$Query.fromJson(Map<String, dynamic> json) =>
      _$UserAvatarById$QueryFromJson(json);

  late UserAvatarData userAvatarById;

  @override
  List<Object?> get props => [userAvatarById];
  @override
  Map<String, dynamic> toJson() => _$UserAvatarById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UnarchiveWorkoutPlanById$Mutation extends JsonSerializable
    with EquatableMixin {
  UnarchiveWorkoutPlanById$Mutation();

  factory UnarchiveWorkoutPlanById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UnarchiveWorkoutPlanById$MutationFromJson(json);

  late WorkoutPlan unarchiveWorkoutPlanById;

  @override
  List<Object?> get props => [unarchiveWorkoutPlanById];
  @override
  Map<String, dynamic> toJson() =>
      _$UnarchiveWorkoutPlanById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArchivedMove extends JsonSerializable
    with EquatableMixin, ArchivedMoveMixin {
  ArchivedMove();

  factory ArchivedMove.fromJson(Map<String, dynamic> json) =>
      _$ArchivedMoveFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, archived];
  @override
  Map<String, dynamic> toJson() => _$ArchivedMoveToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserArchivedCustomMoves$Query extends JsonSerializable
    with EquatableMixin {
  UserArchivedCustomMoves$Query();

  factory UserArchivedCustomMoves$Query.fromJson(Map<String, dynamic> json) =>
      _$UserArchivedCustomMoves$QueryFromJson(json);

  late List<ArchivedMove> archivedMove;

  @override
  List<Object?> get props => [archivedMove];
  @override
  Map<String, dynamic> toJson() => _$UserArchivedCustomMoves$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UnarchiveCustomMoveById$Mutation extends JsonSerializable
    with EquatableMixin {
  UnarchiveCustomMoveById$Mutation();

  factory UnarchiveCustomMoveById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UnarchiveCustomMoveById$MutationFromJson(json);

  late Move unarchiveCustomMoveById;

  @override
  List<Object?> get props => [unarchiveCustomMoveById];
  @override
  Map<String, dynamic> toJson() =>
      _$UnarchiveCustomMoveById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArchivedWorkoutPlan extends JsonSerializable
    with EquatableMixin, ArchivedWorkoutPlanMixin {
  ArchivedWorkoutPlan();

  factory ArchivedWorkoutPlan.fromJson(Map<String, dynamic> json) =>
      _$ArchivedWorkoutPlanFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, archived];
  @override
  Map<String, dynamic> toJson() => _$ArchivedWorkoutPlanToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArchiveWorkoutPlanById$Mutation extends JsonSerializable
    with EquatableMixin {
  ArchiveWorkoutPlanById$Mutation();

  factory ArchiveWorkoutPlanById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$ArchiveWorkoutPlanById$MutationFromJson(json);

  late ArchivedWorkoutPlan archivedWorkoutPlan;

  @override
  List<Object?> get props => [archivedWorkoutPlan];
  @override
  Map<String, dynamic> toJson() =>
      _$ArchiveWorkoutPlanById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UnarchiveWorkoutById$Mutation extends JsonSerializable
    with EquatableMixin {
  UnarchiveWorkoutById$Mutation();

  factory UnarchiveWorkoutById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UnarchiveWorkoutById$MutationFromJson(json);

  late Workout unarchiveWorkoutById;

  @override
  List<Object?> get props => [unarchiveWorkoutById];
  @override
  Map<String, dynamic> toJson() => _$UnarchiveWorkoutById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserArchivedWorkoutPlans$Query extends JsonSerializable
    with EquatableMixin {
  UserArchivedWorkoutPlans$Query();

  factory UserArchivedWorkoutPlans$Query.fromJson(Map<String, dynamic> json) =>
      _$UserArchivedWorkoutPlans$QueryFromJson(json);

  late List<ArchivedWorkoutPlan> archivedWorkoutPlan;

  @override
  List<Object?> get props => [archivedWorkoutPlan];
  @override
  Map<String, dynamic> toJson() => _$UserArchivedWorkoutPlans$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArchivedWorkout extends JsonSerializable
    with EquatableMixin, ArchivedWorkoutMixin {
  ArchivedWorkout();

  factory ArchivedWorkout.fromJson(Map<String, dynamic> json) =>
      _$ArchivedWorkoutFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, archived];
  @override
  Map<String, dynamic> toJson() => _$ArchivedWorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserArchivedWorkouts$Query extends JsonSerializable with EquatableMixin {
  UserArchivedWorkouts$Query();

  factory UserArchivedWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$UserArchivedWorkouts$QueryFromJson(json);

  late List<ArchivedWorkout> archivedWorkout;

  @override
  List<Object?> get props => [archivedWorkout];
  @override
  Map<String, dynamic> toJson() => _$UserArchivedWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArchiveWorkoutById$Mutation extends JsonSerializable with EquatableMixin {
  ArchiveWorkoutById$Mutation();

  factory ArchiveWorkoutById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$ArchiveWorkoutById$MutationFromJson(json);

  late ArchivedWorkout archivedWorkout;

  @override
  List<Object?> get props => [archivedWorkout];
  @override
  Map<String, dynamic> toJson() => _$ArchiveWorkoutById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ArchiveCustomMoveById$Mutation extends JsonSerializable
    with EquatableMixin {
  ArchiveCustomMoveById$Mutation();

  factory ArchiveCustomMoveById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$ArchiveCustomMoveById$MutationFromJson(json);

  late ArchivedMove archivedMove;

  @override
  List<Object?> get props => [archivedMove];
  @override
  Map<String, dynamic> toJson() => _$ArchiveCustomMoveById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserAvatars$Query extends JsonSerializable with EquatableMixin {
  UserAvatars$Query();

  factory UserAvatars$Query.fromJson(Map<String, dynamic> json) =>
      _$UserAvatars$QueryFromJson(json);

  late List<UserAvatarData> userAvatars;

  @override
  List<Object?> get props => [userAvatars];
  @override
  Map<String, dynamic> toJson() => _$UserAvatars$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateMove$Mutation extends JsonSerializable with EquatableMixin {
  CreateMove$Mutation();

  factory CreateMove$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateMove$MutationFromJson(json);

  late Move createMove;

  @override
  List<Object?> get props => [createMove];
  @override
  Map<String, dynamic> toJson() => _$CreateMove$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateMoveInput extends JsonSerializable with EquatableMixin {
  CreateMoveInput(
      {this.bodyAreaMoveScores,
      required this.moveType,
      this.requiredEquipments,
      this.selectableEquipments,
      this.demoVideoThumbUri,
      this.demoVideoUri,
      this.description,
      required this.name,
      this.scope,
      this.searchTerms,
      required this.validRepTypes});

  factory CreateMoveInput.fromJson(Map<String, dynamic> json) =>
      _$CreateMoveInputFromJson(json);

  @JsonKey(name: 'BodyAreaMoveScores')
  List<BodyAreaMoveScoreInput>? bodyAreaMoveScores;

  @JsonKey(name: 'MoveType')
  late ConnectRelationInput moveType;

  @JsonKey(name: 'RequiredEquipments')
  List<ConnectRelationInput>? requiredEquipments;

  @JsonKey(name: 'SelectableEquipments')
  List<ConnectRelationInput>? selectableEquipments;

  String? demoVideoThumbUri;

  String? demoVideoUri;

  String? description;

  late String name;

  @JsonKey(unknownEnumValue: MoveScope.artemisUnknown)
  MoveScope? scope;

  String? searchTerms;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late List<WorkoutMoveRepType> validRepTypes;

  @override
  List<Object?> get props => [
        bodyAreaMoveScores,
        moveType,
        requiredEquipments,
        selectableEquipments,
        demoVideoThumbUri,
        demoVideoUri,
        description,
        name,
        scope,
        searchTerms,
        validRepTypes
      ];
  @override
  Map<String, dynamic> toJson() => _$CreateMoveInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BodyAreaMoveScoreInput extends JsonSerializable with EquatableMixin {
  BodyAreaMoveScoreInput({required this.bodyArea, required this.score});

  factory BodyAreaMoveScoreInput.fromJson(Map<String, dynamic> json) =>
      _$BodyAreaMoveScoreInputFromJson(json);

  @JsonKey(name: 'BodyArea')
  late ConnectRelationInput bodyArea;

  late double score;

  @override
  List<Object?> get props => [bodyArea, score];
  @override
  Map<String, dynamic> toJson() => _$BodyAreaMoveScoreInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMove$Mutation extends JsonSerializable with EquatableMixin {
  UpdateMove$Mutation();

  factory UpdateMove$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateMove$MutationFromJson(json);

  late Move updateMove;

  @override
  List<Object?> get props => [updateMove];
  @override
  Map<String, dynamic> toJson() => _$UpdateMove$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateMoveInput extends JsonSerializable with EquatableMixin {
  UpdateMoveInput(
      {this.bodyAreaMoveScores,
      this.moveType,
      this.requiredEquipments,
      this.selectableEquipments,
      this.demoVideoThumbUri,
      this.demoVideoUri,
      this.description,
      required this.id,
      this.name,
      this.scope,
      this.searchTerms,
      this.validRepTypes});

  factory UpdateMoveInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateMoveInputFromJson(json);

  @JsonKey(name: 'BodyAreaMoveScores')
  List<BodyAreaMoveScoreInput>? bodyAreaMoveScores;

  @JsonKey(name: 'MoveType')
  ConnectRelationInput? moveType;

  @JsonKey(name: 'RequiredEquipments')
  List<ConnectRelationInput>? requiredEquipments;

  @JsonKey(name: 'SelectableEquipments')
  List<ConnectRelationInput>? selectableEquipments;

  String? demoVideoThumbUri;

  String? demoVideoUri;

  String? description;

  late String id;

  String? name;

  @JsonKey(unknownEnumValue: MoveScope.artemisUnknown)
  MoveScope? scope;

  String? searchTerms;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  List<WorkoutMoveRepType>? validRepTypes;

  @override
  List<Object?> get props => [
        bodyAreaMoveScores,
        moveType,
        requiredEquipments,
        selectableEquipments,
        demoVideoThumbUri,
        demoVideoUri,
        description,
        id,
        name,
        scope,
        searchTerms,
        validRepTypes
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateMoveInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteMoveById$Mutation extends JsonSerializable with EquatableMixin {
  DeleteMoveById$Mutation();

  factory DeleteMoveById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteMoveById$MutationFromJson(json);

  late String softDeleteMoveById;

  @override
  List<Object?> get props => [softDeleteMoveById];
  @override
  Map<String, dynamic> toJson() => _$DeleteMoveById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserCustomMoves$Query extends JsonSerializable with EquatableMixin {
  UserCustomMoves$Query();

  factory UserCustomMoves$Query.fromJson(Map<String, dynamic> json) =>
      _$UserCustomMoves$QueryFromJson(json);

  late List<Move> userCustomMoves;

  @override
  List<Object?> get props => [userCustomMoves];
  @override
  Map<String, dynamic> toJson() => _$UserCustomMoves$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteGymProfileById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteGymProfileById$Mutation();

  factory DeleteGymProfileById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteGymProfileById$MutationFromJson(json);

  String? deleteGymProfileById;

  @override
  List<Object?> get props => [deleteGymProfileById];
  @override
  Map<String, dynamic> toJson() => _$DeleteGymProfileById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateGymProfile$Mutation extends JsonSerializable with EquatableMixin {
  CreateGymProfile$Mutation();

  factory CreateGymProfile$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateGymProfile$MutationFromJson(json);

  late GymProfile createGymProfile;

  @override
  List<Object?> get props => [createGymProfile];
  @override
  Map<String, dynamic> toJson() => _$CreateGymProfile$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateGymProfileInput extends JsonSerializable with EquatableMixin {
  CreateGymProfileInput(
      {this.equipments, this.description, required this.name});

  factory CreateGymProfileInput.fromJson(Map<String, dynamic> json) =>
      _$CreateGymProfileInputFromJson(json);

  @JsonKey(name: 'Equipments')
  List<ConnectRelationInput>? equipments;

  String? description;

  late String name;

  @override
  List<Object?> get props => [equipments, description, name];
  @override
  Map<String, dynamic> toJson() => _$CreateGymProfileInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GymProfiles$Query extends JsonSerializable with EquatableMixin {
  GymProfiles$Query();

  factory GymProfiles$Query.fromJson(Map<String, dynamic> json) =>
      _$GymProfiles$QueryFromJson(json);

  late List<GymProfile> gymProfiles;

  @override
  List<Object?> get props => [gymProfiles];
  @override
  Map<String, dynamic> toJson() => _$GymProfiles$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateGymProfile$Mutation extends JsonSerializable with EquatableMixin {
  UpdateGymProfile$Mutation();

  factory UpdateGymProfile$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateGymProfile$MutationFromJson(json);

  late GymProfile updateGymProfile;

  @override
  List<Object?> get props => [updateGymProfile];
  @override
  Map<String, dynamic> toJson() => _$UpdateGymProfile$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateGymProfileInput extends JsonSerializable with EquatableMixin {
  UpdateGymProfileInput(
      {this.equipments, this.description, required this.id, this.name});

  factory UpdateGymProfileInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateGymProfileInputFromJson(json);

  @JsonKey(name: 'Equipments')
  List<ConnectRelationInput>? equipments;

  String? description;

  late String id;

  String? name;

  @override
  List<Object?> get props => [equipments, description, id, name];
  @override
  Map<String, dynamic> toJson() => _$UpdateGymProfileInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserPublicProfileSummary extends JsonSerializable
    with EquatableMixin, UserPublicProfileSummaryMixin {
  UserPublicProfileSummary();

  factory UserPublicProfileSummary.fromJson(Map<String, dynamic> json) =>
      _$UserPublicProfileSummaryFromJson(json);

  @JsonKey(name: 'Clubs')
  late List<ClubSummary> clubs;

  @override
  List<Object?> get props => [
        $$typename,
        userProfileScope,
        id,
        avatarUri,
        tagline,
        townCity,
        countryCode,
        displayName,
        workoutCount,
        planCount,
        clubs
      ];
  @override
  Map<String, dynamic> toJson() => _$UserPublicProfileSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserPublicProfiles$Query extends JsonSerializable with EquatableMixin {
  UserPublicProfiles$Query();

  factory UserPublicProfiles$Query.fromJson(Map<String, dynamic> json) =>
      _$UserPublicProfiles$QueryFromJson(json);

  late List<UserPublicProfileSummary> userPublicProfiles;

  @override
  List<Object?> get props => [userPublicProfiles];
  @override
  Map<String, dynamic> toJson() => _$UserPublicProfiles$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmarkSummary extends JsonSerializable
    with EquatableMixin, UserBenchmarkSummaryMixin {
  UserBenchmarkSummary();

  factory UserBenchmarkSummary.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarkSummaryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        lastEntryAt,
        name,
        equipmentInfo,
        benchmarkType,
        loadUnit
      ];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarkSummaryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmarkEntry extends JsonSerializable
    with EquatableMixin, UserBenchmarkEntryMixin {
  UserBenchmarkEntry();

  factory UserBenchmarkEntry.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarkEntryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        completedOn,
        score,
        note,
        videoUri,
        videoThumbUri
      ];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarkEntryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmarkWithBestEntry extends JsonSerializable with EquatableMixin {
  UserBenchmarkWithBestEntry();

  factory UserBenchmarkWithBestEntry.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarkWithBestEntryFromJson(json);

  @JsonKey(name: 'UserBenchmarkSummary')
  late UserBenchmarkSummary userBenchmarkSummary;

  @JsonKey(name: 'BestEntry')
  late UserBenchmarkEntry bestEntry;

  @override
  List<Object?> get props => [userBenchmarkSummary, bestEntry];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarkWithBestEntryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserPublicProfile extends JsonSerializable
    with EquatableMixin, UserPublicProfileMixin {
  UserPublicProfile();

  factory UserPublicProfile.fromJson(Map<String, dynamic> json) =>
      _$UserPublicProfileFromJson(json);

  @JsonKey(name: 'Clubs')
  late List<ClubSummary> clubs;

  @JsonKey(name: 'LifetimeLogStatsSummary')
  LifetimeLogStatsSummary? lifetimeLogStatsSummary;

  @JsonKey(name: 'BenchmarksWithBestEntries')
  late List<UserBenchmarkWithBestEntry> benchmarksWithBestEntries;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        userProfileScope,
        avatarUri,
        introVideoUri,
        introVideoThumbUri,
        bio,
        tagline,
        townCity,
        instagramHandle,
        tiktokHandle,
        youtubeHandle,
        linkedinHandle,
        countryCode,
        displayName,
        followerCount,
        postsCount,
        workoutCount,
        planCount,
        clubs,
        lifetimeLogStatsSummary,
        benchmarksWithBestEntries
      ];
  @override
  Map<String, dynamic> toJson() => _$UserPublicProfileToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserPublicProfileById$Query extends JsonSerializable with EquatableMixin {
  UserPublicProfileById$Query();

  factory UserPublicProfileById$Query.fromJson(Map<String, dynamic> json) =>
      _$UserPublicProfileById$QueryFromJson(json);

  late UserPublicProfile userPublicProfileById;

  @override
  List<Object?> get props => [userPublicProfileById];
  @override
  Map<String, dynamic> toJson() => _$UserPublicProfileById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutTagById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutTagById$Mutation();

  factory DeleteWorkoutTagById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteWorkoutTagById$MutationFromJson(json);

  late String deleteWorkoutTagById;

  @override
  List<Object?> get props => [deleteWorkoutTagById];
  @override
  Map<String, dynamic> toJson() => _$DeleteWorkoutTagById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutTag$Mutation extends JsonSerializable with EquatableMixin {
  UpdateWorkoutTag$Mutation();

  factory UpdateWorkoutTag$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutTag$MutationFromJson(json);

  late WorkoutTag updateWorkoutTag;

  @override
  List<Object?> get props => [updateWorkoutTag];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutTag$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutTagInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutTagInput({required this.id, required this.tag});

  factory UpdateWorkoutTagInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutTagInputFromJson(json);

  late String id;

  late String tag;

  @override
  List<Object?> get props => [id, tag];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutTagInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserWorkoutTags$Query extends JsonSerializable with EquatableMixin {
  UserWorkoutTags$Query();

  factory UserWorkoutTags$Query.fromJson(Map<String, dynamic> json) =>
      _$UserWorkoutTags$QueryFromJson(json);

  late List<WorkoutTag> userWorkoutTags;

  @override
  List<Object?> get props => [userWorkoutTags];
  @override
  Map<String, dynamic> toJson() => _$UserWorkoutTags$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutTag$Mutation extends JsonSerializable with EquatableMixin {
  CreateWorkoutTag$Mutation();

  factory CreateWorkoutTag$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutTag$MutationFromJson(json);

  late WorkoutTag createWorkoutTag;

  @override
  List<Object?> get props => [createWorkoutTag];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutTag$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutTagInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutTagInput({required this.tag});

  factory CreateWorkoutTagInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutTagInputFromJson(json);

  late String tag;

  @override
  List<Object?> get props => [tag];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutTagInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSet extends JsonSerializable
    with EquatableMixin, WorkoutSetMixin {
  UpdateWorkoutSet();

  factory UpdateWorkoutSet.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSetFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, sortPosition, rounds, duration];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSetToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSet$Mutation extends JsonSerializable with EquatableMixin {
  UpdateWorkoutSet$Mutation();

  factory UpdateWorkoutSet$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSet$MutationFromJson(json);

  late UpdateWorkoutSet updateWorkoutSet;

  @override
  List<Object?> get props => [updateWorkoutSet];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSet$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSetInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutSetInput({this.duration, required this.id, this.rounds});

  factory UpdateWorkoutSetInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSetInputFromJson(json);

  int? duration;

  late String id;

  int? rounds;

  @override
  List<Object?> get props => [duration, id, rounds];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSetInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSetWithWorkoutMoves$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutSetWithWorkoutMoves$Mutation();

  factory CreateWorkoutSetWithWorkoutMoves$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutSetWithWorkoutMoves$MutationFromJson(json);

  late WorkoutSet createWorkoutSetWithWorkoutMoves;

  @override
  List<Object?> get props => [createWorkoutSetWithWorkoutMoves];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutSetWithWorkoutMoves$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSetWithWorkoutMovesInput extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutSetWithWorkoutMovesInput(
      {required this.workoutMoves, required this.workoutSet});

  factory CreateWorkoutSetWithWorkoutMovesInput.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutSetWithWorkoutMovesInputFromJson(json);

  late List<CreateWorkoutMoveInSetInput> workoutMoves;

  late CreateWorkoutSetInput workoutSet;

  @override
  List<Object?> get props => [workoutMoves, workoutSet];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutSetWithWorkoutMovesInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutMoveInSetInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutMoveInSetInput(
      {this.equipment,
      required this.move,
      this.distanceUnit,
      required this.loadAmount,
      this.loadUnit,
      required this.repType,
      required this.reps,
      required this.sortPosition,
      this.timeUnit});

  factory CreateWorkoutMoveInSetInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutMoveInSetInputFromJson(json);

  @JsonKey(name: 'Equipment')
  ConnectRelationInput? equipment;

  @JsonKey(name: 'Move')
  late ConnectRelationInput move;

  @JsonKey(unknownEnumValue: DistanceUnit.artemisUnknown)
  DistanceUnit? distanceUnit;

  late double loadAmount;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  LoadUnit? loadUnit;

  @JsonKey(unknownEnumValue: WorkoutMoveRepType.artemisUnknown)
  late WorkoutMoveRepType repType;

  late double reps;

  late int sortPosition;

  @JsonKey(unknownEnumValue: TimeUnit.artemisUnknown)
  TimeUnit? timeUnit;

  @override
  List<Object?> get props => [
        equipment,
        move,
        distanceUnit,
        loadAmount,
        loadUnit,
        repType,
        reps,
        sortPosition,
        timeUnit
      ];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutMoveInSetInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSetInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutSetInput(
      {required this.workoutSection,
      this.duration,
      this.rounds,
      required this.sortPosition});

  factory CreateWorkoutSetInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSetInputFromJson(json);

  @JsonKey(name: 'WorkoutSection')
  late ConnectRelationInput workoutSection;

  int? duration;

  int? rounds;

  late int sortPosition;

  @override
  List<Object?> get props => [workoutSection, duration, rounds, sortPosition];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSetInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DuplicateWorkoutSetById$Mutation extends JsonSerializable
    with EquatableMixin {
  DuplicateWorkoutSetById$Mutation();

  factory DuplicateWorkoutSetById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DuplicateWorkoutSetById$MutationFromJson(json);

  late WorkoutSet duplicateWorkoutSetById;

  @override
  List<Object?> get props => [duplicateWorkoutSetById];
  @override
  Map<String, dynamic> toJson() =>
      _$DuplicateWorkoutSetById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutSets$Mutation extends JsonSerializable with EquatableMixin {
  ReorderWorkoutSets$Mutation();

  factory ReorderWorkoutSets$Mutation.fromJson(Map<String, dynamic> json) =>
      _$ReorderWorkoutSets$MutationFromJson(json);

  late List<SortPositionUpdated> reorderWorkoutSets;

  @override
  List<Object?> get props => [reorderWorkoutSets];
  @override
  Map<String, dynamic> toJson() => _$ReorderWorkoutSets$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSet extends JsonSerializable
    with EquatableMixin, WorkoutSetMixin {
  CreateWorkoutSet();

  factory CreateWorkoutSet.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSetFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, sortPosition, rounds, duration];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSetToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSet$Mutation extends JsonSerializable with EquatableMixin {
  CreateWorkoutSet$Mutation();

  factory CreateWorkoutSet$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSet$MutationFromJson(json);

  late CreateWorkoutSet createWorkoutSet;

  @override
  List<Object?> get props => [createWorkoutSet];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSet$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutSetById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutSetById$Mutation();

  factory DeleteWorkoutSetById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteWorkoutSetById$MutationFromJson(json);

  late String deleteWorkoutSetById;

  @override
  List<Object?> get props => [deleteWorkoutSetById];
  @override
  Map<String, dynamic> toJson() => _$DeleteWorkoutSetById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MoveTypes$Query extends JsonSerializable with EquatableMixin {
  MoveTypes$Query();

  factory MoveTypes$Query.fromJson(Map<String, dynamic> json) =>
      _$MoveTypes$QueryFromJson(json);

  late List<MoveType> moveTypes;

  @override
  List<Object?> get props => [moveTypes];
  @override
  Map<String, dynamic> toJson() => _$MoveTypes$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class StandardMoves$Query extends JsonSerializable with EquatableMixin {
  StandardMoves$Query();

  factory StandardMoves$Query.fromJson(Map<String, dynamic> json) =>
      _$StandardMoves$QueryFromJson(json);

  late List<Move> standardMoves;

  @override
  List<Object?> get props => [standardMoves];
  @override
  Map<String, dynamic> toJson() => _$StandardMoves$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutGoals$Query extends JsonSerializable with EquatableMixin {
  WorkoutGoals$Query();

  factory WorkoutGoals$Query.fromJson(Map<String, dynamic> json) =>
      _$WorkoutGoals$QueryFromJson(json);

  late List<WorkoutGoal> workoutGoals;

  @override
  List<Object?> get props => [workoutGoals];
  @override
  Map<String, dynamic> toJson() => _$WorkoutGoals$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CheckUniqueDisplayName$Query extends JsonSerializable
    with EquatableMixin {
  CheckUniqueDisplayName$Query();

  factory CheckUniqueDisplayName$Query.fromJson(Map<String, dynamic> json) =>
      _$CheckUniqueDisplayName$QueryFromJson(json);

  late bool checkUniqueDisplayName;

  @override
  List<Object?> get props => [checkUniqueDisplayName];
  @override
  Map<String, dynamic> toJson() => _$CheckUniqueDisplayName$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSectionTypes$Query extends JsonSerializable with EquatableMixin {
  WorkoutSectionTypes$Query();

  factory WorkoutSectionTypes$Query.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSectionTypes$QueryFromJson(json);

  late List<WorkoutSectionType> workoutSectionTypes;

  @override
  List<Object?> get props => [workoutSectionTypes];
  @override
  Map<String, dynamic> toJson() => _$WorkoutSectionTypes$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BodyAreas$Query extends JsonSerializable with EquatableMixin {
  BodyAreas$Query();

  factory BodyAreas$Query.fromJson(Map<String, dynamic> json) =>
      _$BodyAreas$QueryFromJson(json);

  late List<BodyArea> bodyAreas;

  @override
  List<Object?> get props => [bodyAreas];
  @override
  Map<String, dynamic> toJson() => _$BodyAreas$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class Equipments$Query extends JsonSerializable with EquatableMixin {
  Equipments$Query();

  factory Equipments$Query.fromJson(Map<String, dynamic> json) =>
      _$Equipments$QueryFromJson(json);

  late List<Equipment> equipments;

  @override
  List<Object?> get props => [equipments];
  @override
  Map<String, dynamic> toJson() => _$Equipments$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserBenchmarkTagById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteUserBenchmarkTagById$Mutation();

  factory DeleteUserBenchmarkTagById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserBenchmarkTagById$MutationFromJson(json);

  late String deleteUserBenchmarkTagById;

  @override
  List<Object?> get props => [deleteUserBenchmarkTagById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserBenchmarkTagById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmarkEntry$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateUserBenchmarkEntry$Mutation();

  factory CreateUserBenchmarkEntry$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserBenchmarkEntry$MutationFromJson(json);

  late UserBenchmarkEntry createUserBenchmarkEntry;

  @override
  List<Object?> get props => [createUserBenchmarkEntry];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserBenchmarkEntry$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmarkEntryInput extends JsonSerializable
    with EquatableMixin {
  CreateUserBenchmarkEntryInput(
      {required this.userBenchmark,
      required this.completedOn,
      this.note,
      required this.score,
      this.videoThumbUri,
      this.videoUri});

  factory CreateUserBenchmarkEntryInput.fromJson(Map<String, dynamic> json) =>
      _$CreateUserBenchmarkEntryInputFromJson(json);

  @JsonKey(name: 'UserBenchmark')
  late ConnectRelationInput userBenchmark;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime completedOn;

  String? note;

  late double score;

  String? videoThumbUri;

  String? videoUri;

  @override
  List<Object?> get props =>
      [userBenchmark, completedOn, note, score, videoThumbUri, videoUri];
  @override
  Map<String, dynamic> toJson() => _$CreateUserBenchmarkEntryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmarkTag extends JsonSerializable
    with EquatableMixin, UserBenchmarkTagMixin {
  UserBenchmarkTag();

  factory UserBenchmarkTag.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarkTagFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, name, description];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarkTagToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmarkTag$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateUserBenchmarkTag$Mutation();

  factory CreateUserBenchmarkTag$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateUserBenchmarkTag$MutationFromJson(json);

  late UserBenchmarkTag createUserBenchmarkTag;

  @override
  List<Object?> get props => [createUserBenchmarkTag];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserBenchmarkTag$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmarkTagInput extends JsonSerializable with EquatableMixin {
  CreateUserBenchmarkTagInput({this.description, required this.name});

  factory CreateUserBenchmarkTagInput.fromJson(Map<String, dynamic> json) =>
      _$CreateUserBenchmarkTagInputFromJson(json);

  String? description;

  late String name;

  @override
  List<Object?> get props => [description, name];
  @override
  Map<String, dynamic> toJson() => _$CreateUserBenchmarkTagInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmarkTags$Query extends JsonSerializable with EquatableMixin {
  UserBenchmarkTags$Query();

  factory UserBenchmarkTags$Query.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarkTags$QueryFromJson(json);

  late List<UserBenchmarkTag> userBenchmarkTags;

  @override
  List<Object?> get props => [userBenchmarkTags];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarkTags$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmarkTag$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateUserBenchmarkTag$Mutation();

  factory UpdateUserBenchmarkTag$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserBenchmarkTag$MutationFromJson(json);

  late UserBenchmarkTag updateUserBenchmarkTag;

  @override
  List<Object?> get props => [updateUserBenchmarkTag];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateUserBenchmarkTag$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmarkTagInput extends JsonSerializable with EquatableMixin {
  UpdateUserBenchmarkTagInput({this.description, required this.id, this.name});

  factory UpdateUserBenchmarkTagInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserBenchmarkTagInputFromJson(json);

  String? description;

  late String id;

  String? name;

  @override
  List<Object?> get props => [description, id, name];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserBenchmarkTagInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmarkEntry$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateUserBenchmarkEntry$Mutation();

  factory UpdateUserBenchmarkEntry$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateUserBenchmarkEntry$MutationFromJson(json);

  late UserBenchmarkEntry updateUserBenchmarkEntry;

  @override
  List<Object?> get props => [updateUserBenchmarkEntry];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateUserBenchmarkEntry$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmarkEntryInput extends JsonSerializable
    with EquatableMixin {
  UpdateUserBenchmarkEntryInput(
      {this.completedOn,
      required this.id,
      this.note,
      this.score,
      this.videoThumbUri,
      this.videoUri});

  factory UpdateUserBenchmarkEntryInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserBenchmarkEntryInputFromJson(json);

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? completedOn;

  late String id;

  String? note;

  double? score;

  String? videoThumbUri;

  String? videoUri;

  @override
  List<Object?> get props =>
      [completedOn, id, note, score, videoThumbUri, videoUri];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserBenchmarkEntryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserBenchmarkEntryById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteUserBenchmarkEntryById$Mutation();

  factory DeleteUserBenchmarkEntryById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserBenchmarkEntryById$MutationFromJson(json);

  late String deleteUserBenchmarkEntryById;

  @override
  List<Object?> get props => [deleteUserBenchmarkEntryById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserBenchmarkEntryById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmark extends JsonSerializable
    with EquatableMixin, UserBenchmarkMixin {
  UserBenchmark();

  factory UserBenchmark.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarkFromJson(json);

  @JsonKey(name: 'UserBenchmarkEntries')
  late List<UserBenchmarkEntry> userBenchmarkEntries;

  @JsonKey(name: 'UserBenchmarkTags')
  late List<UserBenchmarkTag> userBenchmarkTags;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        lastEntryAt,
        name,
        description,
        equipmentInfo,
        benchmarkType,
        loadUnit,
        userBenchmarkEntries,
        userBenchmarkTags
      ];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarkToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmark$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateUserBenchmark$Mutation();

  factory UpdateUserBenchmark$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserBenchmark$MutationFromJson(json);

  late UserBenchmark updateUserBenchmark;

  @override
  List<Object?> get props => [updateUserBenchmark];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserBenchmark$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmarkInput extends JsonSerializable with EquatableMixin {
  UpdateUserBenchmarkInput(
      {this.userBenchmarkTags,
      required this.benchmarkType,
      this.description,
      this.equipmentInfo,
      required this.id,
      this.loadUnit,
      this.name});

  factory UpdateUserBenchmarkInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserBenchmarkInputFromJson(json);

  @JsonKey(name: 'UserBenchmarkTags')
  List<ConnectRelationInput>? userBenchmarkTags;

  @JsonKey(unknownEnumValue: BenchmarkType.artemisUnknown)
  late BenchmarkType benchmarkType;

  String? description;

  String? equipmentInfo;

  late String id;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  LoadUnit? loadUnit;

  String? name;

  @override
  List<Object?> get props => [
        userBenchmarkTags,
        benchmarkType,
        description,
        equipmentInfo,
        id,
        loadUnit,
        name
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserBenchmarkInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmark$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateUserBenchmark$Mutation();

  factory CreateUserBenchmark$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateUserBenchmark$MutationFromJson(json);

  late UserBenchmark createUserBenchmark;

  @override
  List<Object?> get props => [createUserBenchmark];
  @override
  Map<String, dynamic> toJson() => _$CreateUserBenchmark$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmarkInput extends JsonSerializable with EquatableMixin {
  CreateUserBenchmarkInput(
      {this.userBenchmarkTags,
      required this.benchmarkType,
      this.description,
      this.equipmentInfo,
      this.loadUnit,
      required this.name});

  factory CreateUserBenchmarkInput.fromJson(Map<String, dynamic> json) =>
      _$CreateUserBenchmarkInputFromJson(json);

  @JsonKey(name: 'UserBenchmarkTags')
  List<ConnectRelationInput>? userBenchmarkTags;

  @JsonKey(unknownEnumValue: BenchmarkType.artemisUnknown)
  late BenchmarkType benchmarkType;

  String? description;

  String? equipmentInfo;

  @JsonKey(unknownEnumValue: LoadUnit.artemisUnknown)
  LoadUnit? loadUnit;

  late String name;

  @override
  List<Object?> get props => [
        userBenchmarkTags,
        benchmarkType,
        description,
        equipmentInfo,
        loadUnit,
        name
      ];
  @override
  Map<String, dynamic> toJson() => _$CreateUserBenchmarkInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserBenchmarkById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteUserBenchmarkById$Mutation();

  factory DeleteUserBenchmarkById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserBenchmarkById$MutationFromJson(json);

  late String deleteUserBenchmarkById;

  @override
  List<Object?> get props => [deleteUserBenchmarkById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserBenchmarkById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmarks$Query extends JsonSerializable with EquatableMixin {
  UserBenchmarks$Query();

  factory UserBenchmarks$Query.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarks$QueryFromJson(json);

  late List<UserBenchmark> userBenchmarks;

  @override
  List<Object?> get props => [userBenchmarks];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarks$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmarkById$Query extends JsonSerializable with EquatableMixin {
  UserBenchmarkById$Query();

  factory UserBenchmarkById$Query.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarkById$QueryFromJson(json);

  late UserBenchmark userBenchmarkById;

  @override
  List<Object?> get props => [userBenchmarkById];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarkById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutPlans$Query extends JsonSerializable
    with EquatableMixin {
  TextSearchWorkoutPlans$Query();

  factory TextSearchWorkoutPlans$Query.fromJson(Map<String, dynamic> json) =>
      _$TextSearchWorkoutPlans$QueryFromJson(json);

  List<WorkoutPlanSummary>? textSearchWorkoutPlans;

  @override
  List<Object?> get props => [textSearchWorkoutPlans];
  @override
  Map<String, dynamic> toJson() => _$TextSearchWorkoutPlans$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TextSearchResult extends JsonSerializable with EquatableMixin {
  TextSearchResult();

  factory TextSearchResult.fromJson(Map<String, dynamic> json) =>
      _$TextSearchResultFromJson(json);

  late String id;

  @JsonKey(name: '__typename')
  String? $$typename;

  late String name;

  @override
  List<Object?> get props => [id, $$typename, name];
  @override
  Map<String, dynamic> toJson() => _$TextSearchResultToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutPlanNames$Query extends JsonSerializable
    with EquatableMixin {
  TextSearchWorkoutPlanNames$Query();

  factory TextSearchWorkoutPlanNames$Query.fromJson(
          Map<String, dynamic> json) =>
      _$TextSearchWorkoutPlanNames$QueryFromJson(json);

  List<TextSearchResult>? textSearchWorkoutPlanNames;

  @override
  List<Object?> get props => [textSearchWorkoutPlanNames];
  @override
  Map<String, dynamic> toJson() =>
      _$TextSearchWorkoutPlanNames$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkouts$Query extends JsonSerializable with EquatableMixin {
  TextSearchWorkouts$Query();

  factory TextSearchWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$TextSearchWorkouts$QueryFromJson(json);

  List<WorkoutSummary>? textSearchWorkouts;

  @override
  List<Object?> get props => [textSearchWorkouts];
  @override
  Map<String, dynamic> toJson() => _$TextSearchWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutNames$Query extends JsonSerializable
    with EquatableMixin {
  TextSearchWorkoutNames$Query();

  factory TextSearchWorkoutNames$Query.fromJson(Map<String, dynamic> json) =>
      _$TextSearchWorkoutNames$QueryFromJson(json);

  List<TextSearchResult>? textSearchWorkoutNames;

  @override
  List<Object?> get props => [textSearchWorkoutNames];
  @override
  Map<String, dynamic> toJson() => _$TextSearchWorkoutNames$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSection extends JsonSerializable
    with EquatableMixin, WorkoutSectionMixin {
  UpdateWorkoutSection();

  factory UpdateWorkoutSection.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSectionFromJson(json);

  @JsonKey(name: 'WorkoutSectionType')
  late WorkoutSectionType workoutSectionType;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        note,
        rounds,
        timecap,
        sortPosition,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        classVideoUri,
        classVideoThumbUri,
        classAudioUri,
        workoutSectionType
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSectionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSection$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutSection$Mutation();

  factory UpdateWorkoutSection$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSection$MutationFromJson(json);

  late UpdateWorkoutSection updateWorkoutSection;

  @override
  List<Object?> get props => [updateWorkoutSection];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSectionInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutSectionInput(
      {this.workoutSectionType,
      this.classAudioUri,
      this.classVideoThumbUri,
      this.classVideoUri,
      required this.id,
      this.introAudioUri,
      this.introVideoThumbUri,
      this.introVideoUri,
      this.name,
      this.note,
      this.rounds,
      this.timecap});

  factory UpdateWorkoutSectionInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSectionInputFromJson(json);

  @JsonKey(name: 'WorkoutSectionType')
  ConnectRelationInput? workoutSectionType;

  String? classAudioUri;

  String? classVideoThumbUri;

  String? classVideoUri;

  late String id;

  String? introAudioUri;

  String? introVideoThumbUri;

  String? introVideoUri;

  String? name;

  String? note;

  int? rounds;

  int? timecap;

  @override
  List<Object?> get props => [
        workoutSectionType,
        classAudioUri,
        classVideoThumbUri,
        classVideoUri,
        id,
        introAudioUri,
        introVideoThumbUri,
        introVideoUri,
        name,
        note,
        rounds,
        timecap
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutSection extends JsonSerializable
    with EquatableMixin, WorkoutSectionMixin {
  WorkoutSection();

  factory WorkoutSection.fromJson(Map<String, dynamic> json) =>
      _$WorkoutSectionFromJson(json);

  @JsonKey(name: 'WorkoutSectionType')
  late WorkoutSectionType workoutSectionType;

  @JsonKey(name: 'WorkoutSets')
  late List<WorkoutSet> workoutSets;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        name,
        note,
        rounds,
        timecap,
        sortPosition,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        classVideoUri,
        classVideoThumbUri,
        classAudioUri,
        workoutSectionType,
        workoutSets
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutSectionToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSection$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutSection$Mutation();

  factory CreateWorkoutSection$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSection$MutationFromJson(json);

  late WorkoutSection createWorkoutSection;

  @override
  List<Object?> get props => [createWorkoutSection];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSection$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSectionInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutSectionInput(
      {required this.workout,
      required this.workoutSectionType,
      this.classAudioUri,
      this.classVideoThumbUri,
      this.classVideoUri,
      this.introAudioUri,
      this.introVideoThumbUri,
      this.introVideoUri,
      this.name,
      this.note,
      this.rounds,
      required this.sortPosition,
      this.timecap});

  factory CreateWorkoutSectionInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSectionInputFromJson(json);

  @JsonKey(name: 'Workout')
  late ConnectRelationInput workout;

  @JsonKey(name: 'WorkoutSectionType')
  late ConnectRelationInput workoutSectionType;

  String? classAudioUri;

  String? classVideoThumbUri;

  String? classVideoUri;

  String? introAudioUri;

  String? introVideoThumbUri;

  String? introVideoUri;

  String? name;

  String? note;

  int? rounds;

  late int sortPosition;

  int? timecap;

  @override
  List<Object?> get props => [
        workout,
        workoutSectionType,
        classAudioUri,
        classVideoThumbUri,
        classVideoUri,
        introAudioUri,
        introVideoThumbUri,
        introVideoUri,
        name,
        note,
        rounds,
        sortPosition,
        timecap
      ];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSectionInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutSections$Mutation extends JsonSerializable
    with EquatableMixin {
  ReorderWorkoutSections$Mutation();

  factory ReorderWorkoutSections$Mutation.fromJson(Map<String, dynamic> json) =>
      _$ReorderWorkoutSections$MutationFromJson(json);

  late List<SortPositionUpdated> reorderWorkoutSections;

  @override
  List<Object?> get props => [reorderWorkoutSections];
  @override
  Map<String, dynamic> toJson() =>
      _$ReorderWorkoutSections$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutSectionById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutSectionById$Mutation();

  factory DeleteWorkoutSectionById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutSectionById$MutationFromJson(json);

  late String deleteWorkoutSectionById;

  @override
  List<Object?> get props => [deleteWorkoutSectionById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutSectionById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ScheduledWorkout extends JsonSerializable
    with EquatableMixin, ScheduledWorkoutMixin {
  ScheduledWorkout();

  factory ScheduledWorkout.fromJson(Map<String, dynamic> json) =>
      _$ScheduledWorkoutFromJson(json);

  @JsonKey(name: 'Workout')
  WorkoutSummary? workout;

  @JsonKey(name: 'GymProfile')
  GymProfile? gymProfile;

  String? loggedWorkoutId;

  String? workoutPlanEnrolmentId;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        scheduledAt,
        note,
        workoutPlanEnrolmentId,
        workout,
        gymProfile,
        loggedWorkoutId
      ];
  @override
  Map<String, dynamic> toJson() => _$ScheduledWorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateScheduledWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateScheduledWorkout$Mutation();

  factory UpdateScheduledWorkout$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateScheduledWorkout$MutationFromJson(json);

  late ScheduledWorkout updateScheduledWorkout;

  @override
  List<Object?> get props => [updateScheduledWorkout];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateScheduledWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateScheduledWorkoutInput extends JsonSerializable with EquatableMixin {
  UpdateScheduledWorkoutInput(
      {this.gymProfile,
      this.loggedWorkout,
      this.workout,
      this.workoutPlanEnrolment,
      required this.id,
      this.note,
      this.scheduledAt});

  factory UpdateScheduledWorkoutInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateScheduledWorkoutInputFromJson(json);

  @JsonKey(name: 'GymProfile')
  ConnectRelationInput? gymProfile;

  @JsonKey(name: 'LoggedWorkout')
  ConnectRelationInput? loggedWorkout;

  @JsonKey(name: 'Workout')
  ConnectRelationInput? workout;

  @JsonKey(name: 'WorkoutPlanEnrolment')
  ConnectRelationInput? workoutPlanEnrolment;

  late String id;

  String? note;

  @JsonKey(
      fromJson: fromGraphQLDateTimeNullableToDartDateTimeNullable,
      toJson: fromDartDateTimeNullableToGraphQLDateTimeNullable)
  DateTime? scheduledAt;

  @override
  List<Object?> get props => [
        gymProfile,
        loggedWorkout,
        workout,
        workoutPlanEnrolment,
        id,
        note,
        scheduledAt
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateScheduledWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateScheduledWorkout$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateScheduledWorkout$Mutation();

  factory CreateScheduledWorkout$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateScheduledWorkout$MutationFromJson(json);

  late ScheduledWorkout createScheduledWorkout;

  @override
  List<Object?> get props => [createScheduledWorkout];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateScheduledWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateScheduledWorkoutInput extends JsonSerializable with EquatableMixin {
  CreateScheduledWorkoutInput(
      {this.gymProfile,
      required this.workout,
      this.workoutPlanEnrolment,
      this.note,
      required this.scheduledAt});

  factory CreateScheduledWorkoutInput.fromJson(Map<String, dynamic> json) =>
      _$CreateScheduledWorkoutInputFromJson(json);

  @JsonKey(name: 'GymProfile')
  ConnectRelationInput? gymProfile;

  @JsonKey(name: 'Workout')
  late ConnectRelationInput workout;

  @JsonKey(name: 'WorkoutPlanEnrolment')
  ConnectRelationInput? workoutPlanEnrolment;

  String? note;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime scheduledAt;

  @override
  List<Object?> get props =>
      [gymProfile, workout, workoutPlanEnrolment, note, scheduledAt];
  @override
  Map<String, dynamic> toJson() => _$CreateScheduledWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserScheduledWorkouts$Query extends JsonSerializable with EquatableMixin {
  UserScheduledWorkouts$Query();

  factory UserScheduledWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$UserScheduledWorkouts$QueryFromJson(json);

  late List<ScheduledWorkout> userScheduledWorkouts;

  @override
  List<Object?> get props => [userScheduledWorkouts];
  @override
  Map<String, dynamic> toJson() => _$UserScheduledWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteScheduledWorkoutById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteScheduledWorkoutById$Mutation();

  factory DeleteScheduledWorkoutById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteScheduledWorkoutById$MutationFromJson(json);

  late String deleteScheduledWorkoutById;

  @override
  List<Object?> get props => [deleteScheduledWorkoutById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteScheduledWorkoutById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TimelinePostObjectDataUser extends JsonSerializable
    with EquatableMixin, TimelinePostObjectDataUserMixin {
  TimelinePostObjectDataUser();

  factory TimelinePostObjectDataUser.fromJson(Map<String, dynamic> json) =>
      _$TimelinePostObjectDataUserFromJson(json);

  @override
  List<Object?> get props => [$$typename, id, displayName, avatarUri];
  @override
  Map<String, dynamic> toJson() => _$TimelinePostObjectDataUserToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TimelinePostObjectDataObject extends JsonSerializable
    with EquatableMixin, TimelinePostObjectDataObjectMixin {
  TimelinePostObjectDataObject();

  factory TimelinePostObjectDataObject.fromJson(Map<String, dynamic> json) =>
      _$TimelinePostObjectDataObjectFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        type,
        name,
        introAudioUri,
        coverImageUri,
        introVideoUri,
        introVideoThumbUri
      ];
  @override
  Map<String, dynamic> toJson() => _$TimelinePostObjectDataObjectToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TimelinePostFullData extends JsonSerializable with EquatableMixin {
  TimelinePostFullData();

  factory TimelinePostFullData.fromJson(Map<String, dynamic> json) =>
      _$TimelinePostFullDataFromJson(json);

  late String activityId;

  @JsonKey(
      fromJson: fromGraphQLDateTimeToDartDateTime,
      toJson: fromDartDateTimeToGraphQLDateTime)
  late DateTime postedAt;

  String? caption;

  late List<String> tags;

  late TimelinePostObjectDataUser poster;

  late TimelinePostObjectDataUser creator;

  late TimelinePostObjectDataObject object;

  @override
  List<Object?> get props =>
      [activityId, postedAt, caption, tags, poster, creator, object];
  @override
  Map<String, dynamic> toJson() => _$TimelinePostFullDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateClubTimelinePost$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateClubTimelinePost$Mutation();

  factory CreateClubTimelinePost$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateClubTimelinePost$MutationFromJson(json);

  late TimelinePostFullData createClubTimelinePost;

  @override
  List<Object?> get props => [createClubTimelinePost];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateClubTimelinePost$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateClubTimelinePostInput extends JsonSerializable with EquatableMixin {
  CreateClubTimelinePostInput(
      {this.caption, required this.clubId, required this.object, this.tags});

  factory CreateClubTimelinePostInput.fromJson(Map<String, dynamic> json) =>
      _$CreateClubTimelinePostInputFromJson(json);

  String? caption;

  late String clubId;

  late String object;

  List<String>? tags;

  @override
  List<Object?> get props => [caption, clubId, object, tags];
  @override
  Map<String, dynamic> toJson() => _$CreateClubTimelinePostInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteClubTimelinePost$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteClubTimelinePost$Mutation();

  factory DeleteClubTimelinePost$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DeleteClubTimelinePost$MutationFromJson(json);

  late String deleteClubTimelinePost;

  @override
  List<Object?> get props => [deleteClubTimelinePost];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteClubTimelinePost$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TimelinePostObjectData extends JsonSerializable with EquatableMixin {
  TimelinePostObjectData();

  factory TimelinePostObjectData.fromJson(Map<String, dynamic> json) =>
      _$TimelinePostObjectDataFromJson(json);

  late String activityId;

  late TimelinePostObjectDataUser poster;

  late TimelinePostObjectDataUser creator;

  late TimelinePostObjectDataObject object;

  @override
  List<Object?> get props => [activityId, poster, creator, object];
  @override
  Map<String, dynamic> toJson() => _$TimelinePostObjectDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TimelinePostsData$Query extends JsonSerializable with EquatableMixin {
  TimelinePostsData$Query();

  factory TimelinePostsData$Query.fromJson(Map<String, dynamic> json) =>
      _$TimelinePostsData$QueryFromJson(json);

  late List<TimelinePostObjectData> timelinePostsData;

  @override
  List<Object?> get props => [timelinePostsData];
  @override
  Map<String, dynamic> toJson() => _$TimelinePostsData$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class TimelinePostDataRequestInput extends JsonSerializable
    with EquatableMixin {
  TimelinePostDataRequestInput(
      {required this.activityId,
      required this.objectId,
      required this.objectType,
      required this.posterId});

  factory TimelinePostDataRequestInput.fromJson(Map<String, dynamic> json) =>
      _$TimelinePostDataRequestInputFromJson(json);

  late String activityId;

  late String objectId;

  @JsonKey(unknownEnumValue: TimelinePostType.artemisUnknown)
  late TimelinePostType objectType;

  late String posterId;

  @override
  List<Object?> get props => [activityId, objectId, objectType, posterId];
  @override
  Map<String, dynamic> toJson() => _$TimelinePostDataRequestInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubMembersFeedPosts$Query extends JsonSerializable with EquatableMixin {
  ClubMembersFeedPosts$Query();

  factory ClubMembersFeedPosts$Query.fromJson(Map<String, dynamic> json) =>
      _$ClubMembersFeedPosts$QueryFromJson(json);

  late List<TimelinePostFullData> clubMembersFeedPosts;

  @override
  List<Object?> get props => [clubMembersFeedPosts];
  @override
  Map<String, dynamic> toJson() => _$ClubMembersFeedPosts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class PublicWorkouts$Query extends JsonSerializable with EquatableMixin {
  PublicWorkouts$Query();

  factory PublicWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$PublicWorkouts$QueryFromJson(json);

  late List<WorkoutSummary> publicWorkouts;

  @override
  List<Object?> get props => [publicWorkouts];
  @override
  Map<String, dynamic> toJson() => _$PublicWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutFiltersInput extends JsonSerializable with EquatableMixin {
  WorkoutFiltersInput(
      {required this.availableEquipments,
      this.bodyweightOnly,
      this.difficultyLevel,
      required this.excludedMoves,
      this.hasClassAudio,
      this.hasClassVideo,
      this.maxLength,
      this.minLength,
      required this.requiredMoves,
      required this.targetedBodyAreas,
      required this.workoutGoals,
      required this.workoutSectionTypes});

  factory WorkoutFiltersInput.fromJson(Map<String, dynamic> json) =>
      _$WorkoutFiltersInputFromJson(json);

  late List<String> availableEquipments;

  bool? bodyweightOnly;

  @JsonKey(unknownEnumValue: DifficultyLevel.artemisUnknown)
  DifficultyLevel? difficultyLevel;

  late List<String> excludedMoves;

  bool? hasClassAudio;

  bool? hasClassVideo;

  int? maxLength;

  int? minLength;

  late List<String> requiredMoves;

  late List<String> targetedBodyAreas;

  late List<String> workoutGoals;

  late List<String> workoutSectionTypes;

  @override
  List<Object?> get props => [
        availableEquipments,
        bodyweightOnly,
        difficultyLevel,
        excludedMoves,
        hasClassAudio,
        hasClassVideo,
        maxLength,
        minLength,
        requiredMoves,
        targetedBodyAreas,
        workoutGoals,
        workoutSectionTypes
      ];
  @override
  Map<String, dynamic> toJson() => _$WorkoutFiltersInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkout extends JsonSerializable with EquatableMixin, WorkoutMixin {
  UpdateWorkout();

  factory UpdateWorkout.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutFromJson(json);

  @JsonKey(name: 'WorkoutGoals')
  late List<WorkoutGoal> workoutGoals;

  @JsonKey(name: 'WorkoutTags')
  late List<WorkoutTag> workoutTags;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        archived,
        name,
        description,
        lengthMinutes,
        difficultyLevel,
        coverImageUri,
        contentAccessScope,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        workoutGoals,
        workoutTags
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkout$Mutation extends JsonSerializable with EquatableMixin {
  UpdateWorkout$Mutation();

  factory UpdateWorkout$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkout$MutationFromJson(json);

  late UpdateWorkout updateWorkout;

  @override
  List<Object?> get props => [updateWorkout];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutInput extends JsonSerializable with EquatableMixin {
  UpdateWorkoutInput(
      {this.workoutGoals,
      this.workoutTags,
      this.contentAccessScope,
      this.coverImageUri,
      this.description,
      this.difficultyLevel,
      required this.id,
      this.introAudioUri,
      this.introVideoThumbUri,
      this.introVideoUri,
      this.lengthMinutes,
      this.name});

  factory UpdateWorkoutInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutInputFromJson(json);

  @JsonKey(name: 'WorkoutGoals')
  List<ConnectRelationInput>? workoutGoals;

  @JsonKey(name: 'WorkoutTags')
  List<ConnectRelationInput>? workoutTags;

  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  ContentAccessScope? contentAccessScope;

  String? coverImageUri;

  String? description;

  @JsonKey(unknownEnumValue: DifficultyLevel.artemisUnknown)
  DifficultyLevel? difficultyLevel;

  late String id;

  String? introAudioUri;

  String? introVideoThumbUri;

  String? introVideoUri;

  int? lengthMinutes;

  String? name;

  @override
  List<Object?> get props => [
        workoutGoals,
        workoutTags,
        contentAccessScope,
        coverImageUri,
        description,
        difficultyLevel,
        id,
        introAudioUri,
        introVideoThumbUri,
        introVideoUri,
        lengthMinutes,
        name
      ];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserWorkouts$Query extends JsonSerializable with EquatableMixin {
  UserWorkouts$Query();

  factory UserWorkouts$Query.fromJson(Map<String, dynamic> json) =>
      _$UserWorkouts$QueryFromJson(json);

  late List<WorkoutSummary> userWorkouts;

  @override
  List<Object?> get props => [userWorkouts];
  @override
  Map<String, dynamic> toJson() => _$UserWorkouts$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DuplicateWorkoutById$Mutation extends JsonSerializable
    with EquatableMixin {
  DuplicateWorkoutById$Mutation();

  factory DuplicateWorkoutById$Mutation.fromJson(Map<String, dynamic> json) =>
      _$DuplicateWorkoutById$MutationFromJson(json);

  late Workout duplicateWorkoutById;

  @override
  List<Object?> get props => [duplicateWorkoutById];
  @override
  Map<String, dynamic> toJson() => _$DuplicateWorkoutById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkout$Mutation extends JsonSerializable with EquatableMixin {
  CreateWorkout$Mutation();

  factory CreateWorkout$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkout$MutationFromJson(json);

  late Workout createWorkout;

  @override
  List<Object?> get props => [createWorkout];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkout$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutInput extends JsonSerializable with EquatableMixin {
  CreateWorkoutInput(
      {required this.contentAccessScope,
      required this.difficultyLevel,
      required this.name});

  factory CreateWorkoutInput.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutInputFromJson(json);

  @JsonKey(unknownEnumValue: ContentAccessScope.artemisUnknown)
  late ContentAccessScope contentAccessScope;

  @JsonKey(unknownEnumValue: DifficultyLevel.artemisUnknown)
  late DifficultyLevel difficultyLevel;

  late String name;

  @override
  List<Object?> get props => [contentAccessScope, difficultyLevel, name];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class WorkoutById$Query extends JsonSerializable with EquatableMixin {
  WorkoutById$Query();

  factory WorkoutById$Query.fromJson(Map<String, dynamic> json) =>
      _$WorkoutById$QueryFromJson(json);

  late Workout workoutById;

  @override
  List<Object?> get props => [workoutById];
  @override
  Map<String, dynamic> toJson() => _$WorkoutById$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BodyTrackingEntry extends JsonSerializable
    with EquatableMixin, BodyTrackingEntryMixin {
  BodyTrackingEntry();

  factory BodyTrackingEntry.fromJson(Map<String, dynamic> json) =>
      _$BodyTrackingEntryFromJson(json);

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        bodyweightUnit,
        bodyweight,
        fatPercent,
        note,
        photoUris
      ];
  @override
  Map<String, dynamic> toJson() => _$BodyTrackingEntryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateBodyTrackingEntry$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateBodyTrackingEntry$Mutation();

  factory CreateBodyTrackingEntry$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$CreateBodyTrackingEntry$MutationFromJson(json);

  late BodyTrackingEntry createBodyTrackingEntry;

  @override
  List<Object?> get props => [createBodyTrackingEntry];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateBodyTrackingEntry$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateBodyTrackingEntryInput extends JsonSerializable
    with EquatableMixin {
  CreateBodyTrackingEntryInput(
      {this.bodyweight,
      this.bodyweightUnit,
      this.fatPercent,
      this.note,
      this.photoUris});

  factory CreateBodyTrackingEntryInput.fromJson(Map<String, dynamic> json) =>
      _$CreateBodyTrackingEntryInputFromJson(json);

  double? bodyweight;

  @JsonKey(unknownEnumValue: BodyweightUnit.artemisUnknown)
  BodyweightUnit? bodyweightUnit;

  double? fatPercent;

  String? note;

  List<String>? photoUris;

  @override
  List<Object?> get props =>
      [bodyweight, bodyweightUnit, fatPercent, note, photoUris];
  @override
  Map<String, dynamic> toJson() => _$CreateBodyTrackingEntryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateBodyTrackingEntry$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateBodyTrackingEntry$Mutation();

  factory UpdateBodyTrackingEntry$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateBodyTrackingEntry$MutationFromJson(json);

  late BodyTrackingEntry updateBodyTrackingEntry;

  @override
  List<Object?> get props => [updateBodyTrackingEntry];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateBodyTrackingEntry$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateBodyTrackingEntryInput extends JsonSerializable
    with EquatableMixin {
  UpdateBodyTrackingEntryInput(
      {this.bodyweight,
      this.bodyweightUnit,
      this.fatPercent,
      required this.id,
      this.note,
      this.photoUris});

  factory UpdateBodyTrackingEntryInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateBodyTrackingEntryInputFromJson(json);

  double? bodyweight;

  @JsonKey(unknownEnumValue: BodyweightUnit.artemisUnknown)
  BodyweightUnit? bodyweightUnit;

  double? fatPercent;

  late String id;

  String? note;

  List<String>? photoUris;

  @override
  List<Object?> get props =>
      [bodyweight, bodyweightUnit, fatPercent, id, note, photoUris];
  @override
  Map<String, dynamic> toJson() => _$UpdateBodyTrackingEntryInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteBodyTrackingEntryById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteBodyTrackingEntryById$Mutation();

  factory DeleteBodyTrackingEntryById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteBodyTrackingEntryById$MutationFromJson(json);

  late String deleteBodyTrackingEntryById;

  @override
  List<Object?> get props => [deleteBodyTrackingEntryById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteBodyTrackingEntryById$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class BodyTrackingEntries$Query extends JsonSerializable with EquatableMixin {
  BodyTrackingEntries$Query();

  factory BodyTrackingEntries$Query.fromJson(Map<String, dynamic> json) =>
      _$BodyTrackingEntries$QueryFromJson(json);

  late List<BodyTrackingEntry> bodyTrackingEntries;

  @override
  List<Object?> get props => [bodyTrackingEntries];
  @override
  Map<String, dynamic> toJson() => _$BodyTrackingEntries$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveMemberAdminStatus$Mutation extends JsonSerializable
    with EquatableMixin {
  RemoveMemberAdminStatus$Mutation();

  factory RemoveMemberAdminStatus$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveMemberAdminStatus$MutationFromJson(json);

  late Club removeMemberAdminStatus;

  @override
  List<Object?> get props => [removeMemberAdminStatus];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveMemberAdminStatus$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class AddUserToClubViaInviteToken$Mutation extends JsonSerializable
    with EquatableMixin {
  AddUserToClubViaInviteToken$Mutation();

  factory AddUserToClubViaInviteToken$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$AddUserToClubViaInviteToken$MutationFromJson(json);

  late Club addUserToClubViaInviteToken;

  @override
  List<Object?> get props => [addUserToClubViaInviteToken];
  @override
  Map<String, dynamic> toJson() =>
      _$AddUserToClubViaInviteToken$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UserJoinPublicClub$Mutation extends JsonSerializable with EquatableMixin {
  UserJoinPublicClub$Mutation();

  factory UserJoinPublicClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UserJoinPublicClub$MutationFromJson(json);

  late String userJoinPublicClub;

  @override
  List<Object?> get props => [userJoinPublicClub];
  @override
  Map<String, dynamic> toJson() => _$UserJoinPublicClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubInviteTokenData extends CheckClubInviteTokenResult
    with EquatableMixin, ClubInviteTokenDataMixin {
  ClubInviteTokenData();

  factory ClubInviteTokenData.fromJson(Map<String, dynamic> json) =>
      _$ClubInviteTokenDataFromJson(json);

  @JsonKey(name: 'Club')
  late Club club;

  @override
  List<Object?> get props => [$$typename, token, club];
  @override
  Map<String, dynamic> toJson() => _$ClubInviteTokenDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
class InviteTokenError extends CheckClubInviteTokenResult
    with EquatableMixin, InviteTokenErrorMixin {
  InviteTokenError();

  factory InviteTokenError.fromJson(Map<String, dynamic> json) =>
      _$InviteTokenErrorFromJson(json);

  @override
  List<Object?> get props => [$$typename, message];
  @override
  Map<String, dynamic> toJson() => _$InviteTokenErrorToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CheckClubInviteTokenResult extends JsonSerializable with EquatableMixin {
  CheckClubInviteTokenResult();

  factory CheckClubInviteTokenResult.fromJson(Map<String, dynamic> json) {
    switch (json['__typename'].toString()) {
      case r'ClubInviteTokenData':
        return ClubInviteTokenData.fromJson(json);
      case r'InviteTokenError':
        return InviteTokenError.fromJson(json);
      default:
    }
    return _$CheckClubInviteTokenResultFromJson(json);
  }

  @JsonKey(name: '__typename')
  String? $$typename;

  @override
  List<Object?> get props => [$$typename];
  @override
  Map<String, dynamic> toJson() {
    switch ($$typename) {
      case r'ClubInviteTokenData':
        return (this as ClubInviteTokenData).toJson();
      case r'InviteTokenError':
        return (this as InviteTokenError).toJson();
      default:
    }
    return _$CheckClubInviteTokenResultToJson(this);
  }
}

@JsonSerializable(explicitToJson: true)
class CheckClubInviteToken$Query extends JsonSerializable with EquatableMixin {
  CheckClubInviteToken$Query();

  factory CheckClubInviteToken$Query.fromJson(Map<String, dynamic> json) =>
      _$CheckClubInviteToken$QueryFromJson(json);

  late CheckClubInviteTokenResult checkClubInviteToken;

  @override
  List<Object?> get props => [checkClubInviteToken];
  @override
  Map<String, dynamic> toJson() => _$CheckClubInviteToken$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class RemoveUserFromClub$Mutation extends JsonSerializable with EquatableMixin {
  RemoveUserFromClub$Mutation();

  factory RemoveUserFromClub$Mutation.fromJson(Map<String, dynamic> json) =>
      _$RemoveUserFromClub$MutationFromJson(json);

  late Club removeUserFromClub;

  @override
  List<Object?> get props => [removeUserFromClub];
  @override
  Map<String, dynamic> toJson() => _$RemoveUserFromClub$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubMembers extends JsonSerializable with EquatableMixin, ClubMixin {
  ClubMembers();

  factory ClubMembers.fromJson(Map<String, dynamic> json) =>
      _$ClubMembersFromJson(json);

  @JsonKey(name: 'Owner')
  late UserSummary owner;

  @JsonKey(name: 'Admins')
  late List<UserSummary> admins;

  @JsonKey(name: 'Members')
  late List<UserSummary> members;

  @override
  List<Object?> get props => [
        $$typename,
        id,
        createdAt,
        name,
        description,
        location,
        coverImageUri,
        introVideoUri,
        introVideoThumbUri,
        introAudioUri,
        contentAccessScope,
        owner,
        admins,
        members
      ];
  @override
  Map<String, dynamic> toJson() => _$ClubMembersToJson(this);
}

@JsonSerializable(explicitToJson: true)
class ClubMembers$Query extends JsonSerializable with EquatableMixin {
  ClubMembers$Query();

  factory ClubMembers$Query.fromJson(Map<String, dynamic> json) =>
      _$ClubMembers$QueryFromJson(json);

  late ClubMembers clubMembers;

  @override
  List<Object?> get props => [clubMembers];
  @override
  Map<String, dynamic> toJson() => _$ClubMembers$QueryToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubInviteToken$Mutation extends JsonSerializable
    with EquatableMixin {
  UpdateClubInviteToken$Mutation();

  factory UpdateClubInviteToken$Mutation.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubInviteToken$MutationFromJson(json);

  late ClubInviteToken updateClubInviteToken;

  @override
  List<Object?> get props => [updateClubInviteToken];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubInviteToken$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubInviteTokenInput extends JsonSerializable with EquatableMixin {
  UpdateClubInviteTokenInput(
      {this.active, required this.id, this.inviteLimit, this.name});

  factory UpdateClubInviteTokenInput.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubInviteTokenInputFromJson(json);

  bool? active;

  late String id;

  int? inviteLimit;

  String? name;

  @override
  List<Object?> get props => [active, id, inviteLimit, name];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubInviteTokenInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class GiveMemberAdminStatus$Mutation extends JsonSerializable
    with EquatableMixin {
  GiveMemberAdminStatus$Mutation();

  factory GiveMemberAdminStatus$Mutation.fromJson(Map<String, dynamic> json) =>
      _$GiveMemberAdminStatus$MutationFromJson(json);

  late Club giveMemberAdminStatus;

  @override
  List<Object?> get props => [giveMemberAdminStatus];
  @override
  Map<String, dynamic> toJson() => _$GiveMemberAdminStatus$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateClubInviteToken$Mutation extends JsonSerializable
    with EquatableMixin {
  CreateClubInviteToken$Mutation();

  factory CreateClubInviteToken$Mutation.fromJson(Map<String, dynamic> json) =>
      _$CreateClubInviteToken$MutationFromJson(json);

  late ClubInviteToken createClubInviteToken;

  @override
  List<Object?> get props => [createClubInviteToken];
  @override
  Map<String, dynamic> toJson() => _$CreateClubInviteToken$MutationToJson(this);
}

@JsonSerializable(explicitToJson: true)
class CreateClubInviteTokenInput extends JsonSerializable with EquatableMixin {
  CreateClubInviteTokenInput(
      {required this.club, required this.inviteLimit, required this.name});

  factory CreateClubInviteTokenInput.fromJson(Map<String, dynamic> json) =>
      _$CreateClubInviteTokenInputFromJson(json);

  @JsonKey(name: 'Club')
  late ConnectRelationInput club;

  late int inviteLimit;

  late String name;

  @override
  List<Object?> get props => [club, inviteLimit, name];
  @override
  Map<String, dynamic> toJson() => _$CreateClubInviteTokenInputToJson(this);
}

@JsonSerializable(explicitToJson: true)
class DeleteClubInviteTokenById$Mutation extends JsonSerializable
    with EquatableMixin {
  DeleteClubInviteTokenById$Mutation();

  factory DeleteClubInviteTokenById$Mutation.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteClubInviteTokenById$MutationFromJson(json);

  late String deleteClubInviteTokenById;

  @override
  List<Object?> get props => [deleteClubInviteTokenById];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteClubInviteTokenById$MutationToJson(this);
}

enum UserProfileScope {
  @JsonValue('PRIVATE')
  private,
  @JsonValue('PUBLIC')
  public,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum ContentAccessScope {
  @JsonValue('PRIVATE')
  private,
  @JsonValue('PUBLIC')
  public,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum JoinClubRequestStatus {
  @JsonValue('ACCEPTED')
  accepted,
  @JsonValue('PENDING')
  pending,
  @JsonValue('REJECTED')
  rejected,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum DifficultyLevel {
  @JsonValue('ADVANCED')
  advanced,
  @JsonValue('CHALLENGING')
  challenging,
  @JsonValue('ELITE')
  elite,
  @JsonValue('INTERMEDIATE')
  intermediate,
  @JsonValue('LIGHT')
  light,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum WorkoutMoveRepType {
  @JsonValue('CALORIES')
  calories,
  @JsonValue('DISTANCE')
  distance,
  @JsonValue('REPS')
  reps,
  @JsonValue('TIME')
  time,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum DistanceUnit {
  @JsonValue('KILOMETRES')
  kilometres,
  @JsonValue('METRES')
  metres,
  @JsonValue('MILES')
  miles,
  @JsonValue('YARDS')
  yards,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum LoadUnit {
  @JsonValue('BODYWEIGHTPERCENT')
  bodyweightpercent,
  @JsonValue('KG')
  kg,
  @JsonValue('LB')
  lb,
  @JsonValue('PERCENTMAX')
  percentmax,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum TimeUnit {
  @JsonValue('HOURS')
  hours,
  @JsonValue('MINUTES')
  minutes,
  @JsonValue('SECONDS')
  seconds,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum MoveScope {
  @JsonValue('CUSTOM')
  custom,
  @JsonValue('STANDARD')
  standard,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum BodyAreaFrontBack {
  @JsonValue('BACK')
  back,
  @JsonValue('BOTH')
  both,
  @JsonValue('FRONT')
  front,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum BodyAreaUpperLower {
  @JsonValue('CORE')
  core,
  @JsonValue('LOWER')
  lower,
  @JsonValue('UPPER')
  upper,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum Gender {
  @JsonValue('FEMALE')
  female,
  @JsonValue('MALE')
  male,
  @JsonValue('NONBINARY')
  nonbinary,
  @JsonValue('PNTS')
  pnts,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum BenchmarkType {
  @JsonValue('AMRAP')
  amrap,
  @JsonValue('FASTESTTIME')
  fastesttime,
  @JsonValue('MAXLOAD')
  maxload,
  @JsonValue('UNBROKENREPS')
  unbrokenreps,
  @JsonValue('UNBROKENTIME')
  unbrokentime,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum TimelinePostType {
  @JsonValue('WORKOUT')
  workout,
  @JsonValue('WORKOUTPLAN')
  workoutplan,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}
enum BodyweightUnit {
  @JsonValue('KG')
  kg,
  @JsonValue('LB')
  lb,
  @JsonValue('ARTEMIS_UNKNOWN')
  artemisUnknown,
}

@JsonSerializable(explicitToJson: true)
class ClubSummariesByIdArguments extends JsonSerializable with EquatableMixin {
  ClubSummariesByIdArguments({required this.ids});

  @override
  factory ClubSummariesByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$ClubSummariesByIdArgumentsFromJson(json);

  late List<String> ids;

  @override
  List<Object?> get props => [ids];
  @override
  Map<String, dynamic> toJson() => _$ClubSummariesByIdArgumentsToJson(this);
}

final CLUB_SUMMARIES_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'clubSummariesById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'ids')),
            type: ListTypeNode(
                type:
                    NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clubSummariesById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'ids'),
                  value: VariableNode(name: NameNode(value: 'ids')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubSummary'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClubSummariesByIdQuery
    extends GraphQLQuery<ClubSummariesById$Query, ClubSummariesByIdArguments> {
  ClubSummariesByIdQuery({required this.variables});

  @override
  final DocumentNode document = CLUB_SUMMARIES_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'clubSummariesById';

  @override
  final ClubSummariesByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClubSummariesById$Query parse(Map<String, dynamic> json) =>
      ClubSummariesById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateClubArguments extends JsonSerializable with EquatableMixin {
  CreateClubArguments({required this.data});

  @override
  factory CreateClubArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateClubArgumentsFromJson(json);

  late CreateClubInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateClubArgumentsToJson(this);
}

final CREATE_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateClubInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Club'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ClubInviteTokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubInvites'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubInvite'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Invited'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubRequests'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubRequest'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Applicant'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubInvite'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubInvite'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubRequest'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubRequest'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Club'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Club'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateClubMutation
    extends GraphQLQuery<CreateClub$Mutation, CreateClubArguments> {
  CreateClubMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createClub';

  @override
  final CreateClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateClub$Mutation parse(Map<String, dynamic> json) =>
      CreateClub$Mutation.fromJson(json);
}

final PUBLIC_CLUBS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'publicClubs'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'publicClubs'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubSummary'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class PublicClubsQuery
    extends GraphQLQuery<PublicClubs$Query, JsonSerializable> {
  PublicClubsQuery();

  @override
  final DocumentNode document = PUBLIC_CLUBS_QUERY_DOCUMENT;

  @override
  final String operationName = 'publicClubs';

  @override
  List<Object?> get props => [document, operationName];
  @override
  PublicClubs$Query parse(Map<String, dynamic> json) =>
      PublicClubs$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteClubByIdArguments extends JsonSerializable with EquatableMixin {
  DeleteClubByIdArguments({required this.id});

  @override
  factory DeleteClubByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteClubByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteClubByIdArgumentsToJson(this);
}

final DELETE_CLUB_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteClubById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteClubById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteClubByIdMutation
    extends GraphQLQuery<DeleteClubById$Mutation, DeleteClubByIdArguments> {
  DeleteClubByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_CLUB_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteClubById';

  @override
  final DeleteClubByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteClubById$Mutation parse(Map<String, dynamic> json) =>
      DeleteClubById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubArguments extends JsonSerializable with EquatableMixin {
  UpdateClubArguments({required this.data});

  @override
  factory UpdateClubArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubArgumentsFromJson(json);

  late UpdateClubInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubArgumentsToJson(this);
}

final UPDATE_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateClubInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Club'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ClubInviteTokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubInvites'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubInvite'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Invited'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubRequests'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubRequest'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Applicant'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubInvite'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubInvite'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubRequest'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubRequest'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Club'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Club'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateClubMutation
    extends GraphQLQuery<UpdateClub$Mutation, UpdateClubArguments> {
  UpdateClubMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateClub';

  @override
  final UpdateClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateClub$Mutation parse(Map<String, dynamic> json) =>
      UpdateClub$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ClubByIdArguments extends JsonSerializable with EquatableMixin {
  ClubByIdArguments({required this.id});

  @override
  factory ClubByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$ClubByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ClubByIdArgumentsToJson(this);
}

final CLUB_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'clubById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clubById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Club'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ClubInviteTokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubInvites'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubInvite'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Invited'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubRequests'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubRequest'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Applicant'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubInvite'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubInvite'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubRequest'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubRequest'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Club'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Club'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClubByIdQuery extends GraphQLQuery<ClubById$Query, ClubByIdArguments> {
  ClubByIdQuery({required this.variables});

  @override
  final DocumentNode document = CLUB_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'clubById';

  @override
  final ClubByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClubById$Query parse(Map<String, dynamic> json) =>
      ClubById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CheckUniqueClubNameArguments extends JsonSerializable
    with EquatableMixin {
  CheckUniqueClubNameArguments({required this.name});

  @override
  factory CheckUniqueClubNameArguments.fromJson(Map<String, dynamic> json) =>
      _$CheckUniqueClubNameArgumentsFromJson(json);

  late String name;

  @override
  List<Object?> get props => [name];
  @override
  Map<String, dynamic> toJson() => _$CheckUniqueClubNameArgumentsToJson(this);
}

final CHECK_UNIQUE_CLUB_NAME_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'checkUniqueClubName'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'name')),
            type:
                NamedTypeNode(name: NameNode(value: 'String'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'checkUniqueClubName'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'name'),
                  value: VariableNode(name: NameNode(value: 'name')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class CheckUniqueClubNameQuery extends GraphQLQuery<CheckUniqueClubName$Query,
    CheckUniqueClubNameArguments> {
  CheckUniqueClubNameQuery({required this.variables});

  @override
  final DocumentNode document = CHECK_UNIQUE_CLUB_NAME_QUERY_DOCUMENT;

  @override
  final String operationName = 'checkUniqueClubName';

  @override
  final CheckUniqueClubNameArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CheckUniqueClubName$Query parse(Map<String, dynamic> json) =>
      CheckUniqueClubName$Query.fromJson(json);
}

final USER_CLUBS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userClubs'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userClubs'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubSummary'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserClubsQuery extends GraphQLQuery<UserClubs$Query, JsonSerializable> {
  UserClubsQuery();

  @override
  final DocumentNode document = USER_CLUBS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userClubs';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserClubs$Query parse(Map<String, dynamic> json) =>
      UserClubs$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutMoveArguments extends JsonSerializable with EquatableMixin {
  CreateWorkoutMoveArguments({required this.data});

  @override
  factory CreateWorkoutMoveArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutMoveArgumentsFromJson(json);

  late CreateWorkoutMoveInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutMoveArgumentsToJson(this);
}

final CREATE_WORKOUT_MOVE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutMove'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutMoveInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutMove'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutMove'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipment'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Move'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Move'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'MoveType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'MoveType'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BodyAreaMoveScores'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'score'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'BodyArea'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'BodyArea'),
                                    directives: [])
                              ]))
                        ])),
                    FieldNode(
                        name: NameNode(value: 'RequiredEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'SelectableEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutMoveMutation extends GraphQLQuery<CreateWorkoutMove$Mutation,
    CreateWorkoutMoveArguments> {
  CreateWorkoutMoveMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_MOVE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutMove';

  @override
  final CreateWorkoutMoveArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutMove$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutMove$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutMovesArguments extends JsonSerializable with EquatableMixin {
  UpdateWorkoutMovesArguments({required this.data});

  @override
  factory UpdateWorkoutMovesArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutMovesArgumentsFromJson(json);

  late List<UpdateWorkoutMoveInput> data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutMovesArgumentsToJson(this);
}

final UPDATE_WORKOUT_MOVES_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutMoves'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: ListTypeNode(
                type: NamedTypeNode(
                    name: NameNode(value: 'UpdateWorkoutMoveInput'),
                    isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutMoves'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutMove'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipment'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Move'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Move'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'MoveType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'MoveType'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BodyAreaMoveScores'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'score'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'BodyArea'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'BodyArea'),
                                    directives: [])
                              ]))
                        ])),
                    FieldNode(
                        name: NameNode(value: 'RequiredEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'SelectableEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutMovesMutation extends GraphQLQuery<
    UpdateWorkoutMoves$Mutation, UpdateWorkoutMovesArguments> {
  UpdateWorkoutMovesMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_MOVES_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutMoves';

  @override
  final UpdateWorkoutMovesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutMoves$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutMoves$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DuplicateWorkoutMoveByIdArguments extends JsonSerializable
    with EquatableMixin {
  DuplicateWorkoutMoveByIdArguments({required this.id});

  @override
  factory DuplicateWorkoutMoveByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DuplicateWorkoutMoveByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DuplicateWorkoutMoveByIdArgumentsToJson(this);
}

final DUPLICATE_WORKOUT_MOVE_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'duplicateWorkoutMoveById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'duplicateWorkoutMoveById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutMove'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipment'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Move'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Move'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'MoveType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'MoveType'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BodyAreaMoveScores'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'score'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'BodyArea'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'BodyArea'),
                                    directives: [])
                              ]))
                        ])),
                    FieldNode(
                        name: NameNode(value: 'RequiredEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'SelectableEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class DuplicateWorkoutMoveByIdMutation extends GraphQLQuery<
    DuplicateWorkoutMoveById$Mutation, DuplicateWorkoutMoveByIdArguments> {
  DuplicateWorkoutMoveByIdMutation({required this.variables});

  @override
  final DocumentNode document = DUPLICATE_WORKOUT_MOVE_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'duplicateWorkoutMoveById';

  @override
  final DuplicateWorkoutMoveByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DuplicateWorkoutMoveById$Mutation parse(Map<String, dynamic> json) =>
      DuplicateWorkoutMoveById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutMoveByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutMoveByIdArguments({required this.id});

  @override
  factory DeleteWorkoutMoveByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteWorkoutMoveByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteWorkoutMoveByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_MOVE_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutMoveById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutMoveById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutMoveByIdMutation extends GraphQLQuery<
    DeleteWorkoutMoveById$Mutation, DeleteWorkoutMoveByIdArguments> {
  DeleteWorkoutMoveByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_WORKOUT_MOVE_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutMoveById';

  @override
  final DeleteWorkoutMoveByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutMoveById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutMoveById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutMovesArguments extends JsonSerializable
    with EquatableMixin {
  ReorderWorkoutMovesArguments({required this.data});

  @override
  factory ReorderWorkoutMovesArguments.fromJson(Map<String, dynamic> json) =>
      _$ReorderWorkoutMovesArgumentsFromJson(json);

  late List<UpdateSortPositionInput> data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$ReorderWorkoutMovesArgumentsToJson(this);
}

final REORDER_WORKOUT_MOVES_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'reorderWorkoutMoves'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: ListTypeNode(
                type: NamedTypeNode(
                    name: NameNode(value: 'UpdateSortPositionInput'),
                    isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'reorderWorkoutMoves'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'sortPosition'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ]))
]);

class ReorderWorkoutMovesMutation extends GraphQLQuery<
    ReorderWorkoutMoves$Mutation, ReorderWorkoutMovesArguments> {
  ReorderWorkoutMovesMutation({required this.variables});

  @override
  final DocumentNode document = REORDER_WORKOUT_MOVES_MUTATION_DOCUMENT;

  @override
  final String operationName = 'reorderWorkoutMoves';

  @override
  final ReorderWorkoutMovesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ReorderWorkoutMoves$Mutation parse(Map<String, dynamic> json) =>
      ReorderWorkoutMoves$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutMoveArguments extends JsonSerializable with EquatableMixin {
  UpdateWorkoutMoveArguments({required this.data});

  @override
  factory UpdateWorkoutMoveArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutMoveArgumentsFromJson(json);

  late UpdateWorkoutMoveInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutMoveArgumentsToJson(this);
}

final UPDATE_WORKOUT_MOVE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutMove'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutMoveInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutMove'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutMove'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipment'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Move'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Move'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'MoveType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'MoveType'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BodyAreaMoveScores'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'score'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'BodyArea'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'BodyArea'),
                                    directives: [])
                              ]))
                        ])),
                    FieldNode(
                        name: NameNode(value: 'RequiredEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'SelectableEquipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutMoveMutation extends GraphQLQuery<UpdateWorkoutMove$Mutation,
    UpdateWorkoutMoveArguments> {
  UpdateWorkoutMoveMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_MOVE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutMove';

  @override
  final UpdateWorkoutMoveArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutMove$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutMove$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteCollectionByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteCollectionByIdArguments({required this.id});

  @override
  factory DeleteCollectionByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteCollectionByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteCollectionByIdArgumentsToJson(this);
}

final DELETE_COLLECTION_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteCollectionById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteCollectionById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteCollectionByIdMutation extends GraphQLQuery<
    DeleteCollectionById$Mutation, DeleteCollectionByIdArguments> {
  DeleteCollectionByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_COLLECTION_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteCollectionById';

  @override
  final DeleteCollectionByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteCollectionById$Mutation parse(Map<String, dynamic> json) =>
      DeleteCollectionById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutPlanToCollectionArguments extends JsonSerializable
    with EquatableMixin {
  AddWorkoutPlanToCollectionArguments({required this.data});

  @override
  factory AddWorkoutPlanToCollectionArguments.fromJson(
          Map<String, dynamic> json) =>
      _$AddWorkoutPlanToCollectionArgumentsFromJson(json);

  late AddWorkoutPlanToCollectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$AddWorkoutPlanToCollectionArgumentsToJson(this);
}

final ADD_WORKOUT_PLAN_TO_COLLECTION_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'addWorkoutPlanToCollection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'AddWorkoutPlanToCollectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'addWorkoutPlanToCollection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class AddWorkoutPlanToCollectionMutation extends GraphQLQuery<
    AddWorkoutPlanToCollection$Mutation, AddWorkoutPlanToCollectionArguments> {
  AddWorkoutPlanToCollectionMutation({required this.variables});

  @override
  final DocumentNode document =
      ADD_WORKOUT_PLAN_TO_COLLECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'addWorkoutPlanToCollection';

  @override
  final AddWorkoutPlanToCollectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  AddWorkoutPlanToCollection$Mutation parse(Map<String, dynamic> json) =>
      AddWorkoutPlanToCollection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateCollectionArguments extends JsonSerializable with EquatableMixin {
  CreateCollectionArguments({required this.data});

  @override
  factory CreateCollectionArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateCollectionArgumentsFromJson(json);

  late CreateCollectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateCollectionArgumentsToJson(this);
}

final CREATE_COLLECTION_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createCollection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateCollectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createCollection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateCollectionMutation
    extends GraphQLQuery<CreateCollection$Mutation, CreateCollectionArguments> {
  CreateCollectionMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_COLLECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createCollection';

  @override
  final CreateCollectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateCollection$Mutation parse(Map<String, dynamic> json) =>
      CreateCollection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserCollectionByIdArguments extends JsonSerializable with EquatableMixin {
  UserCollectionByIdArguments({required this.id});

  @override
  factory UserCollectionByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$UserCollectionByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$UserCollectionByIdArgumentsToJson(this);
}

final USER_COLLECTION_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userCollectionById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userCollectionById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserCollectionByIdQuery extends GraphQLQuery<UserCollectionById$Query,
    UserCollectionByIdArguments> {
  UserCollectionByIdQuery({required this.variables});

  @override
  final DocumentNode document = USER_COLLECTION_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'userCollectionById';

  @override
  final UserCollectionByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserCollectionById$Query parse(Map<String, dynamic> json) =>
      UserCollectionById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutToCollectionArguments extends JsonSerializable
    with EquatableMixin {
  AddWorkoutToCollectionArguments({required this.data});

  @override
  factory AddWorkoutToCollectionArguments.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutToCollectionArgumentsFromJson(json);

  late AddWorkoutToCollectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$AddWorkoutToCollectionArgumentsToJson(this);
}

final ADD_WORKOUT_TO_COLLECTION_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'addWorkoutToCollection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'AddWorkoutToCollectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'addWorkoutToCollection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class AddWorkoutToCollectionMutation extends GraphQLQuery<
    AddWorkoutToCollection$Mutation, AddWorkoutToCollectionArguments> {
  AddWorkoutToCollectionMutation({required this.variables});

  @override
  final DocumentNode document = ADD_WORKOUT_TO_COLLECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'addWorkoutToCollection';

  @override
  final AddWorkoutToCollectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  AddWorkoutToCollection$Mutation parse(Map<String, dynamic> json) =>
      AddWorkoutToCollection$Mutation.fromJson(json);
}

final USER_COLLECTIONS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userCollections'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userCollections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserCollectionsQuery
    extends GraphQLQuery<UserCollections$Query, JsonSerializable> {
  UserCollectionsQuery();

  @override
  final DocumentNode document = USER_COLLECTIONS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userCollections';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserCollections$Query parse(Map<String, dynamic> json) =>
      UserCollections$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateCollectionArguments extends JsonSerializable with EquatableMixin {
  UpdateCollectionArguments({required this.data});

  @override
  factory UpdateCollectionArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateCollectionArgumentsFromJson(json);

  late UpdateCollectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateCollectionArgumentsToJson(this);
}

final UPDATE_COLLECTION_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateCollection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateCollectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateCollection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateCollectionMutation
    extends GraphQLQuery<UpdateCollection$Mutation, UpdateCollectionArguments> {
  UpdateCollectionMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_COLLECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateCollection';

  @override
  final UpdateCollectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateCollection$Mutation parse(Map<String, dynamic> json) =>
      UpdateCollection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutPlanFromCollectionArguments extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutPlanFromCollectionArguments({required this.data});

  @override
  factory RemoveWorkoutPlanFromCollectionArguments.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutPlanFromCollectionArgumentsFromJson(json);

  late RemoveWorkoutPlanFromCollectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutPlanFromCollectionArgumentsToJson(this);
}

final REMOVE_WORKOUT_PLAN_FROM_COLLECTION_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'removeWorkoutPlanFromCollection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'RemoveWorkoutPlanFromCollectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'removeWorkoutPlanFromCollection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class RemoveWorkoutPlanFromCollectionMutation extends GraphQLQuery<
    RemoveWorkoutPlanFromCollection$Mutation,
    RemoveWorkoutPlanFromCollectionArguments> {
  RemoveWorkoutPlanFromCollectionMutation({required this.variables});

  @override
  final DocumentNode document =
      REMOVE_WORKOUT_PLAN_FROM_COLLECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'removeWorkoutPlanFromCollection';

  @override
  final RemoveWorkoutPlanFromCollectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  RemoveWorkoutPlanFromCollection$Mutation parse(Map<String, dynamic> json) =>
      RemoveWorkoutPlanFromCollection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutFromCollectionArguments extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutFromCollectionArguments({required this.data});

  @override
  factory RemoveWorkoutFromCollectionArguments.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutFromCollectionArgumentsFromJson(json);

  late RemoveWorkoutFromCollectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutFromCollectionArgumentsToJson(this);
}

final REMOVE_WORKOUT_FROM_COLLECTION_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'removeWorkoutFromCollection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'RemoveWorkoutFromCollectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'removeWorkoutFromCollection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Collection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Collection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Collection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class RemoveWorkoutFromCollectionMutation extends GraphQLQuery<
    RemoveWorkoutFromCollection$Mutation,
    RemoveWorkoutFromCollectionArguments> {
  RemoveWorkoutFromCollectionMutation({required this.variables});

  @override
  final DocumentNode document =
      REMOVE_WORKOUT_FROM_COLLECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'removeWorkoutFromCollection';

  @override
  final RemoveWorkoutFromCollectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  RemoveWorkoutFromCollection$Mutation parse(Map<String, dynamic> json) =>
      RemoveWorkoutFromCollection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutPlanDayWorkoutsArguments extends JsonSerializable
    with EquatableMixin {
  ReorderWorkoutPlanDayWorkoutsArguments({required this.data});

  @override
  factory ReorderWorkoutPlanDayWorkoutsArguments.fromJson(
          Map<String, dynamic> json) =>
      _$ReorderWorkoutPlanDayWorkoutsArgumentsFromJson(json);

  late List<UpdateSortPositionInput> data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$ReorderWorkoutPlanDayWorkoutsArgumentsToJson(this);
}

final REORDER_WORKOUT_PLAN_DAY_WORKOUTS_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'reorderWorkoutPlanDayWorkouts'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: ListTypeNode(
                type: NamedTypeNode(
                    name: NameNode(value: 'UpdateSortPositionInput'),
                    isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'reorderWorkoutPlanDayWorkouts'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'sortPosition'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ]))
]);

class ReorderWorkoutPlanDayWorkoutsMutation extends GraphQLQuery<
    ReorderWorkoutPlanDayWorkouts$Mutation,
    ReorderWorkoutPlanDayWorkoutsArguments> {
  ReorderWorkoutPlanDayWorkoutsMutation({required this.variables});

  @override
  final DocumentNode document =
      REORDER_WORKOUT_PLAN_DAY_WORKOUTS_MUTATION_DOCUMENT;

  @override
  final String operationName = 'reorderWorkoutPlanDayWorkouts';

  @override
  final ReorderWorkoutPlanDayWorkoutsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ReorderWorkoutPlanDayWorkouts$Mutation parse(Map<String, dynamic> json) =>
      ReorderWorkoutPlanDayWorkouts$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanDayWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanDayWorkoutArguments({required this.data});

  @override
  factory CreateWorkoutPlanDayWorkoutArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanDayWorkoutArgumentsFromJson(json);

  late CreateWorkoutPlanDayWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanDayWorkoutArgumentsToJson(this);
}

final CREATE_WORKOUT_PLAN_DAY_WORKOUT_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutPlanDayWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutPlanDayWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutPlanDayWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkout'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'Workout'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutPlanDayWorkoutMutation extends GraphQLQuery<
    CreateWorkoutPlanDayWorkout$Mutation,
    CreateWorkoutPlanDayWorkoutArguments> {
  CreateWorkoutPlanDayWorkoutMutation({required this.variables});

  @override
  final DocumentNode document =
      CREATE_WORKOUT_PLAN_DAY_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutPlanDayWorkout';

  @override
  final CreateWorkoutPlanDayWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutPlanDayWorkout$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutPlanDayWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanDayWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanDayWorkoutArguments({required this.data});

  @override
  factory UpdateWorkoutPlanDayWorkoutArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanDayWorkoutArgumentsFromJson(json);

  late UpdateWorkoutPlanDayWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateWorkoutPlanDayWorkoutArgumentsToJson(this);
}

final UPDATE_WORKOUT_PLAN_DAY_WORKOUT_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutPlanDayWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutPlanDayWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutPlanDayWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkout'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'Workout'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutData'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutPlanDayWorkoutMutation extends GraphQLQuery<
    UpdateWorkoutPlanDayWorkout$Mutation,
    UpdateWorkoutPlanDayWorkoutArguments> {
  UpdateWorkoutPlanDayWorkoutMutation({required this.variables});

  @override
  final DocumentNode document =
      UPDATE_WORKOUT_PLAN_DAY_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutPlanDayWorkout';

  @override
  final UpdateWorkoutPlanDayWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutPlanDayWorkout$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutPlanDayWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanDayWorkoutByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanDayWorkoutByIdArguments({required this.id});

  @override
  factory DeleteWorkoutPlanDayWorkoutByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanDayWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanDayWorkoutByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_PLAN_DAY_WORKOUT_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutPlanDayWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutPlanDayWorkoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutPlanDayWorkoutByIdMutation extends GraphQLQuery<
    DeleteWorkoutPlanDayWorkoutById$Mutation,
    DeleteWorkoutPlanDayWorkoutByIdArguments> {
  DeleteWorkoutPlanDayWorkoutByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_WORKOUT_PLAN_DAY_WORKOUT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutPlanDayWorkoutById';

  @override
  final DeleteWorkoutPlanDayWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutPlanDayWorkoutById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutPlanDayWorkoutById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanEnrolmentArguments extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanEnrolmentArguments({required this.data});

  @override
  factory UpdateWorkoutPlanEnrolmentArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanEnrolmentArgumentsFromJson(json);

  late UpdateWorkoutPlanEnrolmentInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateWorkoutPlanEnrolmentArgumentsToJson(this);
}

final UPDATE_WORKOUT_PLAN_ENROLMENT_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutPlanEnrolment'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutPlanEnrolmentInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutPlanEnrolment'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedPlanDayWorkoutIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutPlanEnrolmentMutation extends GraphQLQuery<
    UpdateWorkoutPlanEnrolment$Mutation, UpdateWorkoutPlanEnrolmentArguments> {
  UpdateWorkoutPlanEnrolmentMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_PLAN_ENROLMENT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutPlanEnrolment';

  @override
  final UpdateWorkoutPlanEnrolmentArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutPlanEnrolment$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutPlanEnrolment$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanEnrolmentByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanEnrolmentByIdArguments({required this.id});

  @override
  factory DeleteWorkoutPlanEnrolmentByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanEnrolmentByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanEnrolmentByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_PLAN_ENROLMENT_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutPlanEnrolmentById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutPlanEnrolmentById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutPlanEnrolmentByIdMutation extends GraphQLQuery<
    DeleteWorkoutPlanEnrolmentById$Mutation,
    DeleteWorkoutPlanEnrolmentByIdArguments> {
  DeleteWorkoutPlanEnrolmentByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_WORKOUT_PLAN_ENROLMENT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutPlanEnrolmentById';

  @override
  final DeleteWorkoutPlanEnrolmentByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutPlanEnrolmentById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutPlanEnrolmentById$Mutation.fromJson(json);
}

final WORKOUT_PLAN_ENROLMENTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'workoutPlanEnrolments'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'workoutPlanEnrolments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolmentSummary'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolmentSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolmentSummary'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedPlanDayWorkoutIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'WorkoutPlan'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class WorkoutPlanEnrolmentsQuery
    extends GraphQLQuery<WorkoutPlanEnrolments$Query, JsonSerializable> {
  WorkoutPlanEnrolmentsQuery();

  @override
  final DocumentNode document = WORKOUT_PLAN_ENROLMENTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'workoutPlanEnrolments';

  @override
  List<Object?> get props => [document, operationName];
  @override
  WorkoutPlanEnrolments$Query parse(Map<String, dynamic> json) =>
      WorkoutPlanEnrolments$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanEnrolmentByIdArguments extends JsonSerializable
    with EquatableMixin {
  WorkoutPlanEnrolmentByIdArguments({required this.id});

  @override
  factory WorkoutPlanEnrolmentByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$WorkoutPlanEnrolmentByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$WorkoutPlanEnrolmentByIdArgumentsToJson(this);
}

final WORKOUT_PLAN_ENROLMENT_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'workoutPlanEnrolmentById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'workoutPlanEnrolmentById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanEnrolment'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'User'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlan'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanData'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedPlanDayWorkoutIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanDays'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanReviews'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanEnrolments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class WorkoutPlanEnrolmentByIdQuery extends GraphQLQuery<
    WorkoutPlanEnrolmentById$Query, WorkoutPlanEnrolmentByIdArguments> {
  WorkoutPlanEnrolmentByIdQuery({required this.variables});

  @override
  final DocumentNode document = WORKOUT_PLAN_ENROLMENT_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'workoutPlanEnrolmentById';

  @override
  final WorkoutPlanEnrolmentByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  WorkoutPlanEnrolmentById$Query parse(Map<String, dynamic> json) =>
      WorkoutPlanEnrolmentById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanEnrolmentArguments extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanEnrolmentArguments({required this.workoutPlanId});

  @override
  factory CreateWorkoutPlanEnrolmentArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanEnrolmentArgumentsFromJson(json);

  late String workoutPlanId;

  @override
  List<Object?> get props => [workoutPlanId];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanEnrolmentArgumentsToJson(this);
}

final CREATE_WORKOUT_PLAN_ENROLMENT_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutPlanEnrolment'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'workoutPlanId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutPlanEnrolment'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'workoutPlanId'),
                  value: VariableNode(name: NameNode(value: 'workoutPlanId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanEnrolment'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'User'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlan'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanData'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedPlanDayWorkoutIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanDays'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanReviews'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanEnrolments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutPlanEnrolmentMutation extends GraphQLQuery<
    CreateWorkoutPlanEnrolment$Mutation, CreateWorkoutPlanEnrolmentArguments> {
  CreateWorkoutPlanEnrolmentMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_PLAN_ENROLMENT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutPlanEnrolment';

  @override
  final CreateWorkoutPlanEnrolmentArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutPlanEnrolment$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutPlanEnrolment$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateProgressJournalGoalTagArguments extends JsonSerializable
    with EquatableMixin {
  UpdateProgressJournalGoalTagArguments({required this.data});

  @override
  factory UpdateProgressJournalGoalTagArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateProgressJournalGoalTagArgumentsFromJson(json);

  late UpdateProgressJournalGoalTagInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateProgressJournalGoalTagArgumentsToJson(this);
}

final UPDATE_PROGRESS_JOURNAL_GOAL_TAG_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateProgressJournalGoalTag'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateProgressJournalGoalTagInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateProgressJournalGoalTag'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ProgressJournalGoalTag'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoalTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoalTag'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateProgressJournalGoalTagMutation extends GraphQLQuery<
    UpdateProgressJournalGoalTag$Mutation,
    UpdateProgressJournalGoalTagArguments> {
  UpdateProgressJournalGoalTagMutation({required this.variables});

  @override
  final DocumentNode document =
      UPDATE_PROGRESS_JOURNAL_GOAL_TAG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateProgressJournalGoalTag';

  @override
  final UpdateProgressJournalGoalTagArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateProgressJournalGoalTag$Mutation parse(Map<String, dynamic> json) =>
      UpdateProgressJournalGoalTag$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ProgressJournalByIdArguments extends JsonSerializable
    with EquatableMixin {
  ProgressJournalByIdArguments({required this.id});

  @override
  factory ProgressJournalByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$ProgressJournalByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ProgressJournalByIdArgumentsToJson(this);
}

final PROGRESS_JOURNAL_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'progressJournalById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'progressJournalById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ProgressJournal'), directives: []),
              FieldNode(
                  name: NameNode(value: 'ProgressJournalEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ProgressJournalEntry'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ProgressJournalGoals'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ProgressJournalGoal'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'ProgressJournalGoalTags'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'ProgressJournalGoalTag'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'voiceNoteUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'moodScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'energyScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'confidenceScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'motivationScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoalTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoalTag'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'deadline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ProgressJournalByIdQuery extends GraphQLQuery<ProgressJournalById$Query,
    ProgressJournalByIdArguments> {
  ProgressJournalByIdQuery({required this.variables});

  @override
  final DocumentNode document = PROGRESS_JOURNAL_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'progressJournalById';

  @override
  final ProgressJournalByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ProgressJournalById$Query parse(Map<String, dynamic> json) =>
      ProgressJournalById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateProgressJournalEntryArguments extends JsonSerializable
    with EquatableMixin {
  CreateProgressJournalEntryArguments({required this.data});

  @override
  factory CreateProgressJournalEntryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateProgressJournalEntryArgumentsFromJson(json);

  late CreateProgressJournalEntryInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateProgressJournalEntryArgumentsToJson(this);
}

final CREATE_PROGRESS_JOURNAL_ENTRY_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createProgressJournalEntry'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateProgressJournalEntryInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createProgressJournalEntry'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ProgressJournalEntry'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'voiceNoteUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'moodScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'energyScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'confidenceScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'motivationScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateProgressJournalEntryMutation extends GraphQLQuery<
    CreateProgressJournalEntry$Mutation, CreateProgressJournalEntryArguments> {
  CreateProgressJournalEntryMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_PROGRESS_JOURNAL_ENTRY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createProgressJournalEntry';

  @override
  final CreateProgressJournalEntryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateProgressJournalEntry$Mutation parse(Map<String, dynamic> json) =>
      CreateProgressJournalEntry$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteProgressJournalByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteProgressJournalByIdArguments({required this.id});

  @override
  factory DeleteProgressJournalByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteProgressJournalByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteProgressJournalByIdArgumentsToJson(this);
}

final DELETE_PROGRESS_JOURNAL_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteProgressJournalById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteProgressJournalById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteProgressJournalByIdMutation extends GraphQLQuery<
    DeleteProgressJournalById$Mutation, DeleteProgressJournalByIdArguments> {
  DeleteProgressJournalByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_PROGRESS_JOURNAL_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteProgressJournalById';

  @override
  final DeleteProgressJournalByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteProgressJournalById$Mutation parse(Map<String, dynamic> json) =>
      DeleteProgressJournalById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateProgressJournalArguments extends JsonSerializable
    with EquatableMixin {
  CreateProgressJournalArguments({required this.data});

  @override
  factory CreateProgressJournalArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateProgressJournalArgumentsFromJson(json);

  late CreateProgressJournalInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateProgressJournalArgumentsToJson(this);
}

final CREATE_PROGRESS_JOURNAL_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createProgressJournal'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateProgressJournalInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createProgressJournal'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ProgressJournal'), directives: []),
              FieldNode(
                  name: NameNode(value: 'ProgressJournalEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ProgressJournalEntry'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ProgressJournalGoals'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ProgressJournalGoal'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'ProgressJournalGoalTags'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'ProgressJournalGoalTag'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'voiceNoteUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'moodScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'energyScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'confidenceScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'motivationScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoalTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoalTag'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'deadline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateProgressJournalMutation extends GraphQLQuery<
    CreateProgressJournal$Mutation, CreateProgressJournalArguments> {
  CreateProgressJournalMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_PROGRESS_JOURNAL_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createProgressJournal';

  @override
  final CreateProgressJournalArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateProgressJournal$Mutation parse(Map<String, dynamic> json) =>
      CreateProgressJournal$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateProgressJournalArguments extends JsonSerializable
    with EquatableMixin {
  UpdateProgressJournalArguments({required this.data});

  @override
  factory UpdateProgressJournalArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateProgressJournalArgumentsFromJson(json);

  late UpdateProgressJournalInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateProgressJournalArgumentsToJson(this);
}

final UPDATE_PROGRESS_JOURNAL_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateProgressJournal'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateProgressJournalInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateProgressJournal'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ProgressJournal'), directives: []),
              FieldNode(
                  name: NameNode(value: 'ProgressJournalEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ProgressJournalEntry'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ProgressJournalGoals'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ProgressJournalGoal'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'ProgressJournalGoalTags'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'ProgressJournalGoalTag'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'voiceNoteUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'moodScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'energyScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'confidenceScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'motivationScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoalTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoalTag'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'deadline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateProgressJournalMutation extends GraphQLQuery<
    UpdateProgressJournal$Mutation, UpdateProgressJournalArguments> {
  UpdateProgressJournalMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_PROGRESS_JOURNAL_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateProgressJournal';

  @override
  final UpdateProgressJournalArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateProgressJournal$Mutation parse(Map<String, dynamic> json) =>
      UpdateProgressJournal$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteProgressJournalEntryByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteProgressJournalEntryByIdArguments({required this.id});

  @override
  factory DeleteProgressJournalEntryByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteProgressJournalEntryByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteProgressJournalEntryByIdArgumentsToJson(this);
}

final DELETE_PROGRESS_JOURNAL_ENTRY_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteProgressJournalEntryById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteProgressJournalEntryById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteProgressJournalEntryByIdMutation extends GraphQLQuery<
    DeleteProgressJournalEntryById$Mutation,
    DeleteProgressJournalEntryByIdArguments> {
  DeleteProgressJournalEntryByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_PROGRESS_JOURNAL_ENTRY_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteProgressJournalEntryById';

  @override
  final DeleteProgressJournalEntryByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteProgressJournalEntryById$Mutation parse(Map<String, dynamic> json) =>
      DeleteProgressJournalEntryById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateProgressJournalEntryArguments extends JsonSerializable
    with EquatableMixin {
  UpdateProgressJournalEntryArguments({required this.data});

  @override
  factory UpdateProgressJournalEntryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateProgressJournalEntryArgumentsFromJson(json);

  late UpdateProgressJournalEntryInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateProgressJournalEntryArgumentsToJson(this);
}

final UPDATE_PROGRESS_JOURNAL_ENTRY_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateProgressJournalEntry'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateProgressJournalEntryInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateProgressJournalEntry'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ProgressJournalEntry'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'voiceNoteUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'moodScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'energyScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'confidenceScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'motivationScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateProgressJournalEntryMutation extends GraphQLQuery<
    UpdateProgressJournalEntry$Mutation, UpdateProgressJournalEntryArguments> {
  UpdateProgressJournalEntryMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_PROGRESS_JOURNAL_ENTRY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateProgressJournalEntry';

  @override
  final UpdateProgressJournalEntryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateProgressJournalEntry$Mutation parse(Map<String, dynamic> json) =>
      UpdateProgressJournalEntry$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateProgressJournalGoalArguments extends JsonSerializable
    with EquatableMixin {
  CreateProgressJournalGoalArguments({required this.data});

  @override
  factory CreateProgressJournalGoalArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateProgressJournalGoalArgumentsFromJson(json);

  late CreateProgressJournalGoalInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateProgressJournalGoalArgumentsToJson(this);
}

final CREATE_PROGRESS_JOURNAL_GOAL_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createProgressJournalGoal'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateProgressJournalGoalInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createProgressJournalGoal'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ProgressJournalGoal'), directives: []),
              FieldNode(
                  name: NameNode(value: 'ProgressJournalGoalTags'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ProgressJournalGoalTag'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoalTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoalTag'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'deadline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateProgressJournalGoalMutation extends GraphQLQuery<
    CreateProgressJournalGoal$Mutation, CreateProgressJournalGoalArguments> {
  CreateProgressJournalGoalMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_PROGRESS_JOURNAL_GOAL_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createProgressJournalGoal';

  @override
  final CreateProgressJournalGoalArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateProgressJournalGoal$Mutation parse(Map<String, dynamic> json) =>
      CreateProgressJournalGoal$Mutation.fromJson(json);
}

final USER_PROGRESS_JOURNALS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userProgressJournals'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userProgressJournals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ProgressJournal'), directives: []),
              FieldNode(
                  name: NameNode(value: 'ProgressJournalEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ProgressJournalEntry'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ProgressJournalGoals'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ProgressJournalGoal'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'ProgressJournalGoalTags'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'ProgressJournalGoalTag'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'voiceNoteUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'moodScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'energyScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'confidenceScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'motivationScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoalTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoalTag'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'deadline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserProgressJournalsQuery
    extends GraphQLQuery<UserProgressJournals$Query, JsonSerializable> {
  UserProgressJournalsQuery();

  @override
  final DocumentNode document = USER_PROGRESS_JOURNALS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userProgressJournals';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserProgressJournals$Query parse(Map<String, dynamic> json) =>
      UserProgressJournals$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateProgressJournalGoalArguments extends JsonSerializable
    with EquatableMixin {
  UpdateProgressJournalGoalArguments({required this.data});

  @override
  factory UpdateProgressJournalGoalArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateProgressJournalGoalArgumentsFromJson(json);

  late UpdateProgressJournalGoalInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateProgressJournalGoalArgumentsToJson(this);
}

final UPDATE_PROGRESS_JOURNAL_GOAL_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateProgressJournalGoal'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateProgressJournalGoalInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateProgressJournalGoal'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ProgressJournalGoal'), directives: []),
              FieldNode(
                  name: NameNode(value: 'ProgressJournalGoalTags'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ProgressJournalGoalTag'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoalTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoalTag'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'deadline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateProgressJournalGoalMutation extends GraphQLQuery<
    UpdateProgressJournalGoal$Mutation, UpdateProgressJournalGoalArguments> {
  UpdateProgressJournalGoalMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_PROGRESS_JOURNAL_GOAL_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateProgressJournalGoal';

  @override
  final UpdateProgressJournalGoalArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateProgressJournalGoal$Mutation parse(Map<String, dynamic> json) =>
      UpdateProgressJournalGoal$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateProgressJournalGoalTagArguments extends JsonSerializable
    with EquatableMixin {
  CreateProgressJournalGoalTagArguments({required this.data});

  @override
  factory CreateProgressJournalGoalTagArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateProgressJournalGoalTagArgumentsFromJson(json);

  late CreateProgressJournalGoalTagInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateProgressJournalGoalTagArgumentsToJson(this);
}

final CREATE_PROGRESS_JOURNAL_GOAL_TAG_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createProgressJournalGoalTag'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateProgressJournalGoalTagInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createProgressJournalGoalTag'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ProgressJournalGoalTag'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoalTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoalTag'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateProgressJournalGoalTagMutation extends GraphQLQuery<
    CreateProgressJournalGoalTag$Mutation,
    CreateProgressJournalGoalTagArguments> {
  CreateProgressJournalGoalTagMutation({required this.variables});

  @override
  final DocumentNode document =
      CREATE_PROGRESS_JOURNAL_GOAL_TAG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createProgressJournalGoalTag';

  @override
  final CreateProgressJournalGoalTagArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateProgressJournalGoalTag$Mutation parse(Map<String, dynamic> json) =>
      CreateProgressJournalGoalTag$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteProgressJournalGoalByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteProgressJournalGoalByIdArguments({required this.id});

  @override
  factory DeleteProgressJournalGoalByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteProgressJournalGoalByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteProgressJournalGoalByIdArgumentsToJson(this);
}

final DELETE_PROGRESS_JOURNAL_GOAL_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteProgressJournalGoalById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteProgressJournalGoalById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteProgressJournalGoalByIdMutation extends GraphQLQuery<
    DeleteProgressJournalGoalById$Mutation,
    DeleteProgressJournalGoalByIdArguments> {
  DeleteProgressJournalGoalByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_PROGRESS_JOURNAL_GOAL_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteProgressJournalGoalById';

  @override
  final DeleteProgressJournalGoalByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteProgressJournalGoalById$Mutation parse(Map<String, dynamic> json) =>
      DeleteProgressJournalGoalById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteProgressJournalGoalTagByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteProgressJournalGoalTagByIdArguments({required this.id});

  @override
  factory DeleteProgressJournalGoalTagByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteProgressJournalGoalTagByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteProgressJournalGoalTagByIdArgumentsToJson(this);
}

final DELETE_PROGRESS_JOURNAL_GOAL_TAG_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteProgressJournalGoalTagById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteProgressJournalGoalTagById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteProgressJournalGoalTagByIdMutation extends GraphQLQuery<
    DeleteProgressJournalGoalTagById$Mutation,
    DeleteProgressJournalGoalTagByIdArguments> {
  DeleteProgressJournalGoalTagByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_PROGRESS_JOURNAL_GOAL_TAG_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteProgressJournalGoalTagById';

  @override
  final DeleteProgressJournalGoalTagByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteProgressJournalGoalTagById$Mutation parse(Map<String, dynamic> json) =>
      DeleteProgressJournalGoalTagById$Mutation.fromJson(json);
}

final PROGRESS_JOURNAL_GOAL_TAGS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'progressJournalGoalTags'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'progressJournalGoalTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ProgressJournalGoalTag'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ProgressJournalGoalTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ProgressJournalGoalTag'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ProgressJournalGoalTagsQuery
    extends GraphQLQuery<ProgressJournalGoalTags$Query, JsonSerializable> {
  ProgressJournalGoalTagsQuery();

  @override
  final DocumentNode document = PROGRESS_JOURNAL_GOAL_TAGS_QUERY_DOCUMENT;

  @override
  final String operationName = 'progressJournalGoalTags';

  @override
  List<Object?> get props => [document, operationName];
  @override
  ProgressJournalGoalTags$Query parse(Map<String, dynamic> json) =>
      ProgressJournalGoalTags$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class MoveWorkoutPlanDayToAnotherDayArguments extends JsonSerializable
    with EquatableMixin {
  MoveWorkoutPlanDayToAnotherDayArguments({required this.data});

  @override
  factory MoveWorkoutPlanDayToAnotherDayArguments.fromJson(
          Map<String, dynamic> json) =>
      _$MoveWorkoutPlanDayToAnotherDayArgumentsFromJson(json);

  late MoveWorkoutPlanDayToAnotherDayInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$MoveWorkoutPlanDayToAnotherDayArgumentsToJson(this);
}

final MOVE_WORKOUT_PLAN_DAY_TO_ANOTHER_DAY_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'moveWorkoutPlanDayToAnotherDay'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'MoveWorkoutPlanDayToAnotherDayInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'moveWorkoutPlanDayToAnotherDay'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class MoveWorkoutPlanDayToAnotherDayMutation extends GraphQLQuery<
    MoveWorkoutPlanDayToAnotherDay$Mutation,
    MoveWorkoutPlanDayToAnotherDayArguments> {
  MoveWorkoutPlanDayToAnotherDayMutation({required this.variables});

  @override
  final DocumentNode document =
      MOVE_WORKOUT_PLAN_DAY_TO_ANOTHER_DAY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'moveWorkoutPlanDayToAnotherDay';

  @override
  final MoveWorkoutPlanDayToAnotherDayArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  MoveWorkoutPlanDayToAnotherDay$Mutation parse(Map<String, dynamic> json) =>
      MoveWorkoutPlanDayToAnotherDay$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanDaysByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanDaysByIdArguments({required this.ids});

  @override
  factory DeleteWorkoutPlanDaysByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanDaysByIdArgumentsFromJson(json);

  late List<String> ids;

  @override
  List<Object?> get props => [ids];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanDaysByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_PLAN_DAYS_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutPlanDaysById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'ids')),
            type: ListTypeNode(
                type:
                    NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutPlanDaysById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'ids'),
                  value: VariableNode(name: NameNode(value: 'ids')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutPlanDaysByIdMutation extends GraphQLQuery<
    DeleteWorkoutPlanDaysById$Mutation, DeleteWorkoutPlanDaysByIdArguments> {
  DeleteWorkoutPlanDaysByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_WORKOUT_PLAN_DAYS_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutPlanDaysById';

  @override
  final DeleteWorkoutPlanDaysByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutPlanDaysById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutPlanDaysById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanDayArguments extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanDayArguments({required this.data});

  @override
  factory UpdateWorkoutPlanDayArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanDayArgumentsFromJson(json);

  late UpdateWorkoutPlanDayInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanDayArgumentsToJson(this);
}

final UPDATE_WORKOUT_PLAN_DAY_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutPlanDay'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutPlanDayInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutPlanDay'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutPlanDayMutation extends GraphQLQuery<
    UpdateWorkoutPlanDay$Mutation, UpdateWorkoutPlanDayArguments> {
  UpdateWorkoutPlanDayMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_PLAN_DAY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutPlanDay';

  @override
  final UpdateWorkoutPlanDayArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutPlanDay$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutPlanDay$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanDayWithWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanDayWithWorkoutArguments({required this.data});

  @override
  factory CreateWorkoutPlanDayWithWorkoutArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanDayWithWorkoutArgumentsFromJson(json);

  late CreateWorkoutPlanDayWithWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanDayWithWorkoutArgumentsToJson(this);
}

final CREATE_WORKOUT_PLAN_DAY_WITH_WORKOUT_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutPlanDayWithWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutPlanDayWithWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutPlanDayWithWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutPlanDayWithWorkoutMutation extends GraphQLQuery<
    CreateWorkoutPlanDayWithWorkout$Mutation,
    CreateWorkoutPlanDayWithWorkoutArguments> {
  CreateWorkoutPlanDayWithWorkoutMutation({required this.variables});

  @override
  final DocumentNode document =
      CREATE_WORKOUT_PLAN_DAY_WITH_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutPlanDayWithWorkout';

  @override
  final CreateWorkoutPlanDayWithWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutPlanDayWithWorkout$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutPlanDayWithWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CopyWorkoutPlanDayToAnotherDayArguments extends JsonSerializable
    with EquatableMixin {
  CopyWorkoutPlanDayToAnotherDayArguments({required this.data});

  @override
  factory CopyWorkoutPlanDayToAnotherDayArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CopyWorkoutPlanDayToAnotherDayArgumentsFromJson(json);

  late CopyWorkoutPlanDayToAnotherDayInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CopyWorkoutPlanDayToAnotherDayArgumentsToJson(this);
}

final COPY_WORKOUT_PLAN_DAY_TO_ANOTHER_DAY_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'copyWorkoutPlanDayToAnotherDay'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CopyWorkoutPlanDayToAnotherDayInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'copyWorkoutPlanDayToAnotherDay'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CopyWorkoutPlanDayToAnotherDayMutation extends GraphQLQuery<
    CopyWorkoutPlanDayToAnotherDay$Mutation,
    CopyWorkoutPlanDayToAnotherDayArguments> {
  CopyWorkoutPlanDayToAnotherDayMutation({required this.variables});

  @override
  final DocumentNode document =
      COPY_WORKOUT_PLAN_DAY_TO_ANOTHER_DAY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'copyWorkoutPlanDayToAnotherDay';

  @override
  final CopyWorkoutPlanDayToAnotherDayArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CopyWorkoutPlanDayToAnotherDay$Mutation parse(Map<String, dynamic> json) =>
      CopyWorkoutPlanDayToAnotherDay$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class LoggedWorkoutByIdArguments extends JsonSerializable with EquatableMixin {
  LoggedWorkoutByIdArguments({required this.id});

  @override
  factory LoggedWorkoutByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$LoggedWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$LoggedWorkoutByIdArgumentsToJson(this);
}

final LOGGED_WORKOUT_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'loggedWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'loggedWorkoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LoggedWorkout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'GymProfile'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'GymProfile'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutGoals'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutGoal'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'LoggedWorkoutSections'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'LoggedWorkoutSection'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutSectionType'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BodyAreas'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'BodyArea'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'MoveTypes'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'MoveType'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'loggedWorkoutSectionData'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'rounds'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FieldNode(
                                    name: NameNode(value: 'timeTakenSeconds'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null),
                                FieldNode(
                                    name: NameNode(value: 'sets'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'rounds'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(
                                              value: 'timeTakenSeconds'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'moves'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null)
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeTakenSeconds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class LoggedWorkoutByIdQuery
    extends GraphQLQuery<LoggedWorkoutById$Query, LoggedWorkoutByIdArguments> {
  LoggedWorkoutByIdQuery({required this.variables});

  @override
  final DocumentNode document = LOGGED_WORKOUT_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'loggedWorkoutById';

  @override
  final LoggedWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  LoggedWorkoutById$Query parse(Map<String, dynamic> json) =>
      LoggedWorkoutById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteLoggedWorkoutByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteLoggedWorkoutByIdArguments({required this.id});

  @override
  factory DeleteLoggedWorkoutByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteLoggedWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteLoggedWorkoutByIdArgumentsToJson(this);
}

final DELETE_LOGGED_WORKOUT_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteLoggedWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteLoggedWorkoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteLoggedWorkoutByIdMutation extends GraphQLQuery<
    DeleteLoggedWorkoutById$Mutation, DeleteLoggedWorkoutByIdArguments> {
  DeleteLoggedWorkoutByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_LOGGED_WORKOUT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteLoggedWorkoutById';

  @override
  final DeleteLoggedWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteLoggedWorkoutById$Mutation parse(Map<String, dynamic> json) =>
      DeleteLoggedWorkoutById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class LifetimeLogStatsSummaryArguments extends JsonSerializable
    with EquatableMixin {
  LifetimeLogStatsSummaryArguments({required this.userId});

  @override
  factory LifetimeLogStatsSummaryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$LifetimeLogStatsSummaryArgumentsFromJson(json);

  late String userId;

  @override
  List<Object?> get props => [userId];
  @override
  Map<String, dynamic> toJson() =>
      _$LifetimeLogStatsSummaryArgumentsToJson(this);
}

final LIFETIME_LOG_STATS_SUMMARY_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'lifetimeLogStatsSummary'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'lifetimeLogStatsSummary'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userId'),
                  value: VariableNode(name: NameNode(value: 'userId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LifetimeLogStatsSummary'),
                  directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LifetimeLogStatsSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LifetimeLogStatsSummary'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'minutesWorked'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sessionsLogged'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class LifetimeLogStatsSummaryQuery extends GraphQLQuery<
    LifetimeLogStatsSummary$Query, LifetimeLogStatsSummaryArguments> {
  LifetimeLogStatsSummaryQuery({required this.variables});

  @override
  final DocumentNode document = LIFETIME_LOG_STATS_SUMMARY_QUERY_DOCUMENT;

  @override
  final String operationName = 'lifetimeLogStatsSummary';

  @override
  final LifetimeLogStatsSummaryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  LifetimeLogStatsSummary$Query parse(Map<String, dynamic> json) =>
      LifetimeLogStatsSummary$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserLoggedWorkoutsArguments extends JsonSerializable with EquatableMixin {
  UserLoggedWorkoutsArguments({this.take});

  @override
  factory UserLoggedWorkoutsArguments.fromJson(Map<String, dynamic> json) =>
      _$UserLoggedWorkoutsArgumentsFromJson(json);

  final int? take;

  @override
  List<Object?> get props => [take];
  @override
  Map<String, dynamic> toJson() => _$UserLoggedWorkoutsArgumentsToJson(this);
}

final USER_LOGGED_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userLoggedWorkouts'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'take')),
            type: NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userLoggedWorkouts'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'take'),
                  value: VariableNode(name: NameNode(value: 'take')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LoggedWorkout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'GymProfile'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'GymProfile'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutGoals'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutGoal'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'LoggedWorkoutSections'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'LoggedWorkoutSection'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutSectionType'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BodyAreas'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'BodyArea'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'MoveTypes'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'MoveType'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'loggedWorkoutSectionData'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'rounds'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FieldNode(
                                    name: NameNode(value: 'timeTakenSeconds'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null),
                                FieldNode(
                                    name: NameNode(value: 'sets'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'rounds'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(
                                              value: 'timeTakenSeconds'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'moves'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null)
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeTakenSeconds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserLoggedWorkoutsQuery extends GraphQLQuery<UserLoggedWorkouts$Query,
    UserLoggedWorkoutsArguments> {
  UserLoggedWorkoutsQuery({required this.variables});

  @override
  final DocumentNode document = USER_LOGGED_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userLoggedWorkouts';

  @override
  final UserLoggedWorkoutsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserLoggedWorkouts$Query parse(Map<String, dynamic> json) =>
      UserLoggedWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkoutArguments({required this.data});

  @override
  factory UpdateLoggedWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutArgumentsFromJson(json);

  late UpdateLoggedWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateLoggedWorkoutArgumentsToJson(this);
}

final UPDATE_LOGGED_WORKOUT_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateLoggedWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateLoggedWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateLoggedWorkout'),
            alias: NameNode(value: 'updateLoggedWorkout'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LoggedWorkout'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateLoggedWorkoutMutation extends GraphQLQuery<
    UpdateLoggedWorkout$Mutation, UpdateLoggedWorkoutArguments> {
  UpdateLoggedWorkoutMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_LOGGED_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateLoggedWorkout';

  @override
  final UpdateLoggedWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateLoggedWorkout$Mutation parse(Map<String, dynamic> json) =>
      UpdateLoggedWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateLoggedWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  CreateLoggedWorkoutArguments({required this.data});

  @override
  factory CreateLoggedWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateLoggedWorkoutArgumentsFromJson(json);

  late CreateLoggedWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateLoggedWorkoutArgumentsToJson(this);
}

final CREATE_LOGGED_WORKOUT_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createLoggedWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateLoggedWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createLoggedWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LoggedWorkout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'GymProfile'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'GymProfile'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutGoals'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutGoal'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'LoggedWorkoutSections'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'LoggedWorkoutSection'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutSectionType'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BodyAreas'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'BodyArea'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'MoveTypes'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'MoveType'), directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'loggedWorkoutSectionData'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'rounds'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FieldNode(
                                    name: NameNode(value: 'timeTakenSeconds'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null),
                                FieldNode(
                                    name: NameNode(value: 'sets'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'rounds'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(
                                              value: 'timeTakenSeconds'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'moves'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null)
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeTakenSeconds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateLoggedWorkoutMutation extends GraphQLQuery<
    CreateLoggedWorkout$Mutation, CreateLoggedWorkoutArguments> {
  CreateLoggedWorkoutMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_LOGGED_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createLoggedWorkout';

  @override
  final CreateLoggedWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateLoggedWorkout$Mutation parse(Map<String, dynamic> json) =>
      CreateLoggedWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateLoggedWorkoutSectionArguments extends JsonSerializable
    with EquatableMixin {
  UpdateLoggedWorkoutSectionArguments({required this.data});

  @override
  factory UpdateLoggedWorkoutSectionArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateLoggedWorkoutSectionArgumentsFromJson(json);

  late UpdateLoggedWorkoutSectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateLoggedWorkoutSectionArgumentsToJson(this);
}

final UPDATE_LOGGED_WORKOUT_SECTION_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateLoggedWorkoutSection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateLoggedWorkoutSectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateLoggedWorkoutSection'),
            alias: NameNode(value: 'updateLoggedWorkoutSection'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'LoggedWorkoutSection'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'BodyAreas'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'BodyArea'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'MoveTypes'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'MoveType'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'loggedWorkoutSectionData'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'rounds'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FieldNode(
                              name: NameNode(value: 'timeTakenSeconds'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: null),
                          FieldNode(
                              name: NameNode(value: 'sets'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FieldNode(
                                    name: NameNode(value: 'rounds'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null),
                                FieldNode(
                                    name: NameNode(value: 'timeTakenSeconds'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null),
                                FieldNode(
                                    name: NameNode(value: 'moves'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null)
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LoggedWorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LoggedWorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeTakenSeconds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateLoggedWorkoutSectionMutation extends GraphQLQuery<
    UpdateLoggedWorkoutSection$Mutation, UpdateLoggedWorkoutSectionArguments> {
  UpdateLoggedWorkoutSectionMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_LOGGED_WORKOUT_SECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateLoggedWorkoutSection';

  @override
  final UpdateLoggedWorkoutSectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateLoggedWorkoutSection$Mutation parse(Map<String, dynamic> json) =>
      UpdateLoggedWorkoutSection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class LogCountByWorkoutArguments extends JsonSerializable with EquatableMixin {
  LogCountByWorkoutArguments({required this.id});

  @override
  factory LogCountByWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$LogCountByWorkoutArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$LogCountByWorkoutArgumentsToJson(this);
}

final LOG_COUNT_BY_WORKOUT_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'logCountByWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'logCountByWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class LogCountByWorkoutQuery
    extends GraphQLQuery<LogCountByWorkout$Query, LogCountByWorkoutArguments> {
  LogCountByWorkoutQuery({required this.variables});

  @override
  final DocumentNode document = LOG_COUNT_BY_WORKOUT_QUERY_DOCUMENT;

  @override
  final String operationName = 'logCountByWorkout';

  @override
  final LogCountByWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  LogCountByWorkout$Query parse(Map<String, dynamic> json) =>
      LogCountByWorkout$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutPlanReviewByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutPlanReviewByIdArguments({required this.id});

  @override
  factory DeleteWorkoutPlanReviewByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutPlanReviewByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutPlanReviewByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_PLAN_REVIEW_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutPlanReviewById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutPlanReviewById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutPlanReviewByIdMutation extends GraphQLQuery<
    DeleteWorkoutPlanReviewById$Mutation,
    DeleteWorkoutPlanReviewByIdArguments> {
  DeleteWorkoutPlanReviewByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_WORKOUT_PLAN_REVIEW_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutPlanReviewById';

  @override
  final DeleteWorkoutPlanReviewByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutPlanReviewById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutPlanReviewById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanReviewArguments extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutPlanReviewArguments({required this.data});

  @override
  factory UpdateWorkoutPlanReviewArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanReviewArgumentsFromJson(json);

  late UpdateWorkoutPlanReviewInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateWorkoutPlanReviewArgumentsToJson(this);
}

final UPDATE_WORKOUT_PLAN_REVIEW_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutPlanReview'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutPlanReviewInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutPlanReview'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutPlanReviewMutation extends GraphQLQuery<
    UpdateWorkoutPlanReview$Mutation, UpdateWorkoutPlanReviewArguments> {
  UpdateWorkoutPlanReviewMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_PLAN_REVIEW_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutPlanReview';

  @override
  final UpdateWorkoutPlanReviewArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutPlanReview$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutPlanReview$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanReviewArguments extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutPlanReviewArguments({required this.data});

  @override
  factory CreateWorkoutPlanReviewArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutPlanReviewArgumentsFromJson(json);

  late CreateWorkoutPlanReviewInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutPlanReviewArgumentsToJson(this);
}

final CREATE_WORKOUT_PLAN_REVIEW_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutPlanReview'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutPlanReviewInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutPlanReview'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutPlanReviewMutation extends GraphQLQuery<
    CreateWorkoutPlanReview$Mutation, CreateWorkoutPlanReviewArguments> {
  CreateWorkoutPlanReviewMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_PLAN_REVIEW_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutPlanReview';

  @override
  final CreateWorkoutPlanReviewArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutPlanReview$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutPlanReview$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutFromClubArguments extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutFromClubArguments(
      {required this.workoutId, required this.clubId});

  @override
  factory RemoveWorkoutFromClubArguments.fromJson(Map<String, dynamic> json) =>
      _$RemoveWorkoutFromClubArgumentsFromJson(json);

  late String workoutId;

  late String clubId;

  @override
  List<Object?> get props => [workoutId, clubId];
  @override
  Map<String, dynamic> toJson() => _$RemoveWorkoutFromClubArgumentsToJson(this);
}

final REMOVE_WORKOUT_FROM_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'removeWorkoutFromClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'workoutId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'removeWorkoutFromClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'workoutId'),
                  value: VariableNode(name: NameNode(value: 'workoutId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Club'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ClubInviteTokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubInvites'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubInvite'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Invited'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubRequests'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubRequest'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Applicant'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubInvite'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubInvite'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubRequest'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubRequest'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Club'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Club'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class RemoveWorkoutFromClubMutation extends GraphQLQuery<
    RemoveWorkoutFromClub$Mutation, RemoveWorkoutFromClubArguments> {
  RemoveWorkoutFromClubMutation({required this.variables});

  @override
  final DocumentNode document = REMOVE_WORKOUT_FROM_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'removeWorkoutFromClub';

  @override
  final RemoveWorkoutFromClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  RemoveWorkoutFromClub$Mutation parse(Map<String, dynamic> json) =>
      RemoveWorkoutFromClub$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveWorkoutPlanFromClubArguments extends JsonSerializable
    with EquatableMixin {
  RemoveWorkoutPlanFromClubArguments(
      {required this.workoutPlanId, required this.clubId});

  @override
  factory RemoveWorkoutPlanFromClubArguments.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveWorkoutPlanFromClubArgumentsFromJson(json);

  late String workoutPlanId;

  late String clubId;

  @override
  List<Object?> get props => [workoutPlanId, clubId];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveWorkoutPlanFromClubArgumentsToJson(this);
}

final REMOVE_WORKOUT_PLAN_FROM_CLUB_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'removeWorkoutPlanFromClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'workoutPlanId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'removeWorkoutPlanFromClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'workoutPlanId'),
                  value: VariableNode(name: NameNode(value: 'workoutPlanId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Club'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ClubInviteTokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubInvites'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubInvite'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Invited'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubRequests'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubRequest'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Applicant'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubInvite'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubInvite'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubRequest'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubRequest'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Club'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Club'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class RemoveWorkoutPlanFromClubMutation extends GraphQLQuery<
    RemoveWorkoutPlanFromClub$Mutation, RemoveWorkoutPlanFromClubArguments> {
  RemoveWorkoutPlanFromClubMutation({required this.variables});

  @override
  final DocumentNode document = REMOVE_WORKOUT_PLAN_FROM_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'removeWorkoutPlanFromClub';

  @override
  final RemoveWorkoutPlanFromClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  RemoveWorkoutPlanFromClub$Mutation parse(Map<String, dynamic> json) =>
      RemoveWorkoutPlanFromClub$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutToClubArguments extends JsonSerializable with EquatableMixin {
  AddWorkoutToClubArguments({required this.workoutId, required this.clubId});

  @override
  factory AddWorkoutToClubArguments.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutToClubArgumentsFromJson(json);

  late String workoutId;

  late String clubId;

  @override
  List<Object?> get props => [workoutId, clubId];
  @override
  Map<String, dynamic> toJson() => _$AddWorkoutToClubArgumentsToJson(this);
}

final ADD_WORKOUT_TO_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'addWorkoutToClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'workoutId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'addWorkoutToClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'workoutId'),
                  value: VariableNode(name: NameNode(value: 'workoutId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Club'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ClubInviteTokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubInvites'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubInvite'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Invited'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubRequests'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubRequest'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Applicant'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubInvite'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubInvite'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubRequest'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubRequest'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Club'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Club'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class AddWorkoutToClubMutation
    extends GraphQLQuery<AddWorkoutToClub$Mutation, AddWorkoutToClubArguments> {
  AddWorkoutToClubMutation({required this.variables});

  @override
  final DocumentNode document = ADD_WORKOUT_TO_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'addWorkoutToClub';

  @override
  final AddWorkoutToClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  AddWorkoutToClub$Mutation parse(Map<String, dynamic> json) =>
      AddWorkoutToClub$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AddWorkoutPlanToClubArguments extends JsonSerializable
    with EquatableMixin {
  AddWorkoutPlanToClubArguments(
      {required this.workoutPlanId, required this.clubId});

  @override
  factory AddWorkoutPlanToClubArguments.fromJson(Map<String, dynamic> json) =>
      _$AddWorkoutPlanToClubArgumentsFromJson(json);

  late String workoutPlanId;

  late String clubId;

  @override
  List<Object?> get props => [workoutPlanId, clubId];
  @override
  Map<String, dynamic> toJson() => _$AddWorkoutPlanToClubArgumentsToJson(this);
}

final ADD_WORKOUT_PLAN_TO_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'addWorkoutPlanToClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'workoutPlanId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'addWorkoutPlanToClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'workoutPlanId'),
                  value: VariableNode(name: NameNode(value: 'workoutPlanId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Club'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ClubInviteTokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubInvites'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubInvite'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Invited'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubRequests'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubRequest'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Applicant'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubInvite'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubInvite'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubRequest'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubRequest'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Club'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Club'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class AddWorkoutPlanToClubMutation extends GraphQLQuery<
    AddWorkoutPlanToClub$Mutation, AddWorkoutPlanToClubArguments> {
  AddWorkoutPlanToClubMutation({required this.variables});

  @override
  final DocumentNode document = ADD_WORKOUT_PLAN_TO_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'addWorkoutPlanToClub';

  @override
  final AddWorkoutPlanToClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  AddWorkoutPlanToClub$Mutation parse(Map<String, dynamic> json) =>
      AddWorkoutPlanToClub$Mutation.fromJson(json);
}

final USER_WORKOUT_PLANS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userWorkoutPlans'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userWorkoutPlans'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserWorkoutPlansQuery
    extends GraphQLQuery<UserWorkoutPlans$Query, JsonSerializable> {
  UserWorkoutPlansQuery();

  @override
  final DocumentNode document = USER_WORKOUT_PLANS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userWorkoutPlans';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserWorkoutPlans$Query parse(Map<String, dynamic> json) =>
      UserWorkoutPlans$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class PublicWorkoutPlansArguments extends JsonSerializable with EquatableMixin {
  PublicWorkoutPlansArguments({this.cursor, this.filters, this.take});

  @override
  factory PublicWorkoutPlansArguments.fromJson(Map<String, dynamic> json) =>
      _$PublicWorkoutPlansArgumentsFromJson(json);

  final String? cursor;

  final WorkoutPlanFiltersInput? filters;

  final int? take;

  @override
  List<Object?> get props => [cursor, filters, take];
  @override
  Map<String, dynamic> toJson() => _$PublicWorkoutPlansArgumentsToJson(this);
}

final PUBLIC_WORKOUT_PLANS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'publicWorkoutPlans'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'cursor')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'filters')),
            type: NamedTypeNode(
                name: NameNode(value: 'WorkoutPlanFiltersInput'),
                isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'take')),
            type: NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'publicWorkoutPlans'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'cursor'),
                  value: VariableNode(name: NameNode(value: 'cursor'))),
              ArgumentNode(
                  name: NameNode(value: 'filters'),
                  value: VariableNode(name: NameNode(value: 'filters'))),
              ArgumentNode(
                  name: NameNode(value: 'take'),
                  value: VariableNode(name: NameNode(value: 'take')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class PublicWorkoutPlansQuery extends GraphQLQuery<PublicWorkoutPlans$Query,
    PublicWorkoutPlansArguments> {
  PublicWorkoutPlansQuery({required this.variables});

  @override
  final DocumentNode document = PUBLIC_WORKOUT_PLANS_QUERY_DOCUMENT;

  @override
  final String operationName = 'publicWorkoutPlans';

  @override
  final PublicWorkoutPlansArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  PublicWorkoutPlans$Query parse(Map<String, dynamic> json) =>
      PublicWorkoutPlans$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class WorkoutPlanByIdArguments extends JsonSerializable with EquatableMixin {
  WorkoutPlanByIdArguments({required this.id});

  @override
  factory WorkoutPlanByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$WorkoutPlanByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$WorkoutPlanByIdArgumentsToJson(this);
}

final WORKOUT_PLAN_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'workoutPlanById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'workoutPlanById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanDays'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanReviews'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanEnrolments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedPlanDayWorkoutIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class WorkoutPlanByIdQuery
    extends GraphQLQuery<WorkoutPlanById$Query, WorkoutPlanByIdArguments> {
  WorkoutPlanByIdQuery({required this.variables});

  @override
  final DocumentNode document = WORKOUT_PLAN_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'workoutPlanById';

  @override
  final WorkoutPlanByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  WorkoutPlanById$Query parse(Map<String, dynamic> json) =>
      WorkoutPlanById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutPlanArguments extends JsonSerializable with EquatableMixin {
  UpdateWorkoutPlanArguments({required this.data});

  @override
  factory UpdateWorkoutPlanArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutPlanArgumentsFromJson(json);

  late UpdateWorkoutPlanInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutPlanArgumentsToJson(this);
}

final UPDATE_WORKOUT_PLAN_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutPlan'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutPlanInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutPlan'),
            alias: NameNode(value: 'updateWorkoutPlan'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlan'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutTags'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutTag'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlan'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutPlanMutation extends GraphQLQuery<UpdateWorkoutPlan$Mutation,
    UpdateWorkoutPlanArguments> {
  UpdateWorkoutPlanMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_PLAN_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutPlan';

  @override
  final UpdateWorkoutPlanArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutPlan$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutPlan$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutPlanArguments extends JsonSerializable with EquatableMixin {
  CreateWorkoutPlanArguments({required this.data});

  @override
  factory CreateWorkoutPlanArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutPlanArgumentsFromJson(json);

  late CreateWorkoutPlanInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutPlanArgumentsToJson(this);
}

final CREATE_WORKOUT_PLAN_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutPlan'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutPlanInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutPlan'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanDays'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanReviews'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanEnrolments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedPlanDayWorkoutIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutPlanMutation extends GraphQLQuery<CreateWorkoutPlan$Mutation,
    CreateWorkoutPlanArguments> {
  CreateWorkoutPlanMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_PLAN_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutPlan';

  @override
  final CreateWorkoutPlanArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutPlan$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutPlan$Mutation.fromJson(json);
}

final AUTHED_USER_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'authedUser'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'authedUser'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'User'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'User'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'User'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'birthdate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'countryCode'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'gender'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class AuthedUserQuery extends GraphQLQuery<AuthedUser$Query, JsonSerializable> {
  AuthedUserQuery();

  @override
  final DocumentNode document = AUTHED_USER_QUERY_DOCUMENT;

  @override
  final String operationName = 'authedUser';

  @override
  List<Object?> get props => [document, operationName];
  @override
  AuthedUser$Query parse(Map<String, dynamic> json) =>
      AuthedUser$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserArguments extends JsonSerializable with EquatableMixin {
  UpdateUserArguments({required this.data});

  @override
  factory UpdateUserArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserArgumentsFromJson(json);

  late UpdateUserInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserArgumentsToJson(this);
}

final UPDATE_USER_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateUser'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateUserInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateUser'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'User'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'User'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'User'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'birthdate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'countryCode'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'gender'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateUserMutation
    extends GraphQLQuery<UpdateUser$Mutation, UpdateUserArguments> {
  UpdateUserMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_USER_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateUser';

  @override
  final UpdateUserArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateUser$Mutation parse(Map<String, dynamic> json) =>
      UpdateUser$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserAvatarByIdArguments extends JsonSerializable with EquatableMixin {
  UserAvatarByIdArguments({required this.id});

  @override
  factory UserAvatarByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$UserAvatarByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$UserAvatarByIdArgumentsToJson(this);
}

final USER_AVATAR_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userAvatarById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userAvatarById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserAvatarByIdQuery
    extends GraphQLQuery<UserAvatarById$Query, UserAvatarByIdArguments> {
  UserAvatarByIdQuery({required this.variables});

  @override
  final DocumentNode document = USER_AVATAR_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'userAvatarById';

  @override
  final UserAvatarByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserAvatarById$Query parse(Map<String, dynamic> json) =>
      UserAvatarById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UnarchiveWorkoutPlanByIdArguments extends JsonSerializable
    with EquatableMixin {
  UnarchiveWorkoutPlanByIdArguments({required this.id});

  @override
  factory UnarchiveWorkoutPlanByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UnarchiveWorkoutPlanByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$UnarchiveWorkoutPlanByIdArgumentsToJson(this);
}

final UNARCHIVE_WORKOUT_PLAN_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'unarchiveWorkoutPlanById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'unarchiveWorkoutPlanById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanDays'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanDay'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlanDayWorkouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanDayWorkout'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Workout'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutData'),
                              directives: [])
                        ]))
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanReviews'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanReview'), directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutPlanEnrolments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanEnrolment'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'User'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDayWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDayWorkout'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanDay'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanDay'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'dayNumber'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanReview'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanReview'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'comment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanEnrolment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanEnrolment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'startDate'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedPlanDayWorkoutIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UnarchiveWorkoutPlanByIdMutation extends GraphQLQuery<
    UnarchiveWorkoutPlanById$Mutation, UnarchiveWorkoutPlanByIdArguments> {
  UnarchiveWorkoutPlanByIdMutation({required this.variables});

  @override
  final DocumentNode document = UNARCHIVE_WORKOUT_PLAN_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'unarchiveWorkoutPlanById';

  @override
  final UnarchiveWorkoutPlanByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UnarchiveWorkoutPlanById$Mutation parse(Map<String, dynamic> json) =>
      UnarchiveWorkoutPlanById$Mutation.fromJson(json);
}

final USER_ARCHIVED_CUSTOM_MOVES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userArchivedCustomMoves'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userArchivedCustomMoves'),
            alias: NameNode(value: 'archivedMove'),
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ArchivedMove'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ArchivedMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserArchivedCustomMovesQuery
    extends GraphQLQuery<UserArchivedCustomMoves$Query, JsonSerializable> {
  UserArchivedCustomMovesQuery();

  @override
  final DocumentNode document = USER_ARCHIVED_CUSTOM_MOVES_QUERY_DOCUMENT;

  @override
  final String operationName = 'userArchivedCustomMoves';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserArchivedCustomMoves$Query parse(Map<String, dynamic> json) =>
      UserArchivedCustomMoves$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UnarchiveCustomMoveByIdArguments extends JsonSerializable
    with EquatableMixin {
  UnarchiveCustomMoveByIdArguments({required this.id});

  @override
  factory UnarchiveCustomMoveByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UnarchiveCustomMoveByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$UnarchiveCustomMoveByIdArgumentsToJson(this);
}

final UNARCHIVE_CUSTOM_MOVE_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'unarchiveCustomMoveById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'unarchiveCustomMoveById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: []),
              FieldNode(
                  name: NameNode(value: 'MoveType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'MoveType'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'BodyAreaMoveScores'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'score'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null),
                    FieldNode(
                        name: NameNode(value: 'BodyArea'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'BodyArea'), directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'RequiredEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'SelectableEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UnarchiveCustomMoveByIdMutation extends GraphQLQuery<
    UnarchiveCustomMoveById$Mutation, UnarchiveCustomMoveByIdArguments> {
  UnarchiveCustomMoveByIdMutation({required this.variables});

  @override
  final DocumentNode document = UNARCHIVE_CUSTOM_MOVE_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'unarchiveCustomMoveById';

  @override
  final UnarchiveCustomMoveByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UnarchiveCustomMoveById$Mutation parse(Map<String, dynamic> json) =>
      UnarchiveCustomMoveById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ArchiveWorkoutPlanByIdArguments extends JsonSerializable
    with EquatableMixin {
  ArchiveWorkoutPlanByIdArguments({required this.id});

  @override
  factory ArchiveWorkoutPlanByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$ArchiveWorkoutPlanByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$ArchiveWorkoutPlanByIdArgumentsToJson(this);
}

final ARCHIVE_WORKOUT_PLAN_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'archiveWorkoutPlanById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'archiveWorkoutPlanById'),
            alias: NameNode(value: 'archivedWorkoutPlan'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ArchivedWorkoutPlan'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ArchivedWorkoutPlan'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ArchiveWorkoutPlanByIdMutation extends GraphQLQuery<
    ArchiveWorkoutPlanById$Mutation, ArchiveWorkoutPlanByIdArguments> {
  ArchiveWorkoutPlanByIdMutation({required this.variables});

  @override
  final DocumentNode document = ARCHIVE_WORKOUT_PLAN_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'archiveWorkoutPlanById';

  @override
  final ArchiveWorkoutPlanByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ArchiveWorkoutPlanById$Mutation parse(Map<String, dynamic> json) =>
      ArchiveWorkoutPlanById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UnarchiveWorkoutByIdArguments extends JsonSerializable
    with EquatableMixin {
  UnarchiveWorkoutByIdArguments({required this.id});

  @override
  factory UnarchiveWorkoutByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$UnarchiveWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$UnarchiveWorkoutByIdArgumentsToJson(this);
}

final UNARCHIVE_WORKOUT_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'unarchiveWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'unarchiveWorkoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UnarchiveWorkoutByIdMutation extends GraphQLQuery<
    UnarchiveWorkoutById$Mutation, UnarchiveWorkoutByIdArguments> {
  UnarchiveWorkoutByIdMutation({required this.variables});

  @override
  final DocumentNode document = UNARCHIVE_WORKOUT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'unarchiveWorkoutById';

  @override
  final UnarchiveWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UnarchiveWorkoutById$Mutation parse(Map<String, dynamic> json) =>
      UnarchiveWorkoutById$Mutation.fromJson(json);
}

final USER_ARCHIVED_WORKOUT_PLANS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userArchivedWorkoutPlans'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userArchivedWorkoutPlans'),
            alias: NameNode(value: 'archivedWorkoutPlan'),
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ArchivedWorkoutPlan'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ArchivedWorkoutPlan'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlan'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserArchivedWorkoutPlansQuery
    extends GraphQLQuery<UserArchivedWorkoutPlans$Query, JsonSerializable> {
  UserArchivedWorkoutPlansQuery();

  @override
  final DocumentNode document = USER_ARCHIVED_WORKOUT_PLANS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userArchivedWorkoutPlans';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserArchivedWorkoutPlans$Query parse(Map<String, dynamic> json) =>
      UserArchivedWorkoutPlans$Query.fromJson(json);
}

final USER_ARCHIVED_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userArchivedWorkouts'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userArchivedWorkouts'),
            alias: NameNode(value: 'archivedWorkout'),
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ArchivedWorkout'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ArchivedWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserArchivedWorkoutsQuery
    extends GraphQLQuery<UserArchivedWorkouts$Query, JsonSerializable> {
  UserArchivedWorkoutsQuery();

  @override
  final DocumentNode document = USER_ARCHIVED_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userArchivedWorkouts';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserArchivedWorkouts$Query parse(Map<String, dynamic> json) =>
      UserArchivedWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ArchiveWorkoutByIdArguments extends JsonSerializable with EquatableMixin {
  ArchiveWorkoutByIdArguments({required this.id});

  @override
  factory ArchiveWorkoutByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$ArchiveWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ArchiveWorkoutByIdArgumentsToJson(this);
}

final ARCHIVE_WORKOUT_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'archiveWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'archiveWorkoutById'),
            alias: NameNode(value: 'archivedWorkout'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ArchivedWorkout'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ArchivedWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ArchiveWorkoutByIdMutation extends GraphQLQuery<
    ArchiveWorkoutById$Mutation, ArchiveWorkoutByIdArguments> {
  ArchiveWorkoutByIdMutation({required this.variables});

  @override
  final DocumentNode document = ARCHIVE_WORKOUT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'archiveWorkoutById';

  @override
  final ArchiveWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ArchiveWorkoutById$Mutation parse(Map<String, dynamic> json) =>
      ArchiveWorkoutById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ArchiveCustomMoveByIdArguments extends JsonSerializable
    with EquatableMixin {
  ArchiveCustomMoveByIdArguments({required this.id});

  @override
  factory ArchiveCustomMoveByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$ArchiveCustomMoveByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ArchiveCustomMoveByIdArgumentsToJson(this);
}

final ARCHIVE_CUSTOM_MOVE_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'archiveCustomMoveById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'archiveCustomMoveById'),
            alias: NameNode(value: 'archivedMove'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ArchivedMove'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ArchivedMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ArchiveCustomMoveByIdMutation extends GraphQLQuery<
    ArchiveCustomMoveById$Mutation, ArchiveCustomMoveByIdArguments> {
  ArchiveCustomMoveByIdMutation({required this.variables});

  @override
  final DocumentNode document = ARCHIVE_CUSTOM_MOVE_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'archiveCustomMoveById';

  @override
  final ArchiveCustomMoveByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ArchiveCustomMoveById$Mutation parse(Map<String, dynamic> json) =>
      ArchiveCustomMoveById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserAvatarsArguments extends JsonSerializable with EquatableMixin {
  UserAvatarsArguments({required this.ids});

  @override
  factory UserAvatarsArguments.fromJson(Map<String, dynamic> json) =>
      _$UserAvatarsArgumentsFromJson(json);

  late List<String> ids;

  @override
  List<Object?> get props => [ids];
  @override
  Map<String, dynamic> toJson() => _$UserAvatarsArgumentsToJson(this);
}

final USER_AVATARS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userAvatars'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'ids')),
            type: ListTypeNode(
                type:
                    NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userAvatars'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'ids'),
                  value: VariableNode(name: NameNode(value: 'ids')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserAvatarData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserAvatarData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserAvatarData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserAvatarsQuery
    extends GraphQLQuery<UserAvatars$Query, UserAvatarsArguments> {
  UserAvatarsQuery({required this.variables});

  @override
  final DocumentNode document = USER_AVATARS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userAvatars';

  @override
  final UserAvatarsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserAvatars$Query parse(Map<String, dynamic> json) =>
      UserAvatars$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateMoveArguments extends JsonSerializable with EquatableMixin {
  CreateMoveArguments({required this.data});

  @override
  factory CreateMoveArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateMoveArgumentsFromJson(json);

  late CreateMoveInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateMoveArgumentsToJson(this);
}

final CREATE_MOVE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createMove'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateMoveInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createMove'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: []),
              FieldNode(
                  name: NameNode(value: 'MoveType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'MoveType'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'BodyAreaMoveScores'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'score'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null),
                    FieldNode(
                        name: NameNode(value: 'BodyArea'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'BodyArea'), directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'RequiredEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'SelectableEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateMoveMutation
    extends GraphQLQuery<CreateMove$Mutation, CreateMoveArguments> {
  CreateMoveMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_MOVE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createMove';

  @override
  final CreateMoveArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateMove$Mutation parse(Map<String, dynamic> json) =>
      CreateMove$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateMoveArguments extends JsonSerializable with EquatableMixin {
  UpdateMoveArguments({required this.data});

  @override
  factory UpdateMoveArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateMoveArgumentsFromJson(json);

  late UpdateMoveInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateMoveArgumentsToJson(this);
}

final UPDATE_MOVE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateMove'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateMoveInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateMove'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: []),
              FieldNode(
                  name: NameNode(value: 'MoveType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'MoveType'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'BodyAreaMoveScores'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'score'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null),
                    FieldNode(
                        name: NameNode(value: 'BodyArea'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'BodyArea'), directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'RequiredEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'SelectableEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateMoveMutation
    extends GraphQLQuery<UpdateMove$Mutation, UpdateMoveArguments> {
  UpdateMoveMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_MOVE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateMove';

  @override
  final UpdateMoveArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateMove$Mutation parse(Map<String, dynamic> json) =>
      UpdateMove$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteMoveByIdArguments extends JsonSerializable with EquatableMixin {
  DeleteMoveByIdArguments({required this.id});

  @override
  factory DeleteMoveByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteMoveByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteMoveByIdArgumentsToJson(this);
}

final DELETE_MOVE_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteMoveById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'softDeleteMoveById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteMoveByIdMutation
    extends GraphQLQuery<DeleteMoveById$Mutation, DeleteMoveByIdArguments> {
  DeleteMoveByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_MOVE_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteMoveById';

  @override
  final DeleteMoveByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteMoveById$Mutation parse(Map<String, dynamic> json) =>
      DeleteMoveById$Mutation.fromJson(json);
}

final USER_CUSTOM_MOVES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userCustomMoves'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userCustomMoves'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: []),
              FieldNode(
                  name: NameNode(value: 'MoveType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'MoveType'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'BodyAreaMoveScores'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'score'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null),
                    FieldNode(
                        name: NameNode(value: 'BodyArea'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'BodyArea'), directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'RequiredEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'SelectableEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserCustomMovesQuery
    extends GraphQLQuery<UserCustomMoves$Query, JsonSerializable> {
  UserCustomMovesQuery();

  @override
  final DocumentNode document = USER_CUSTOM_MOVES_QUERY_DOCUMENT;

  @override
  final String operationName = 'userCustomMoves';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserCustomMoves$Query parse(Map<String, dynamic> json) =>
      UserCustomMoves$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteGymProfileByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteGymProfileByIdArguments({required this.id});

  @override
  factory DeleteGymProfileByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteGymProfileByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteGymProfileByIdArgumentsToJson(this);
}

final DELETE_GYM_PROFILE_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteGymProfileById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteGymProfileById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteGymProfileByIdMutation extends GraphQLQuery<
    DeleteGymProfileById$Mutation, DeleteGymProfileByIdArguments> {
  DeleteGymProfileByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_GYM_PROFILE_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteGymProfileById';

  @override
  final DeleteGymProfileByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteGymProfileById$Mutation parse(Map<String, dynamic> json) =>
      DeleteGymProfileById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateGymProfileArguments extends JsonSerializable with EquatableMixin {
  CreateGymProfileArguments({required this.data});

  @override
  factory CreateGymProfileArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateGymProfileArgumentsFromJson(json);

  late CreateGymProfileInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateGymProfileArgumentsToJson(this);
}

final CREATE_GYM_PROFILE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createGymProfile'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateGymProfileInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createGymProfile'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'GymProfile'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateGymProfileMutation
    extends GraphQLQuery<CreateGymProfile$Mutation, CreateGymProfileArguments> {
  CreateGymProfileMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_GYM_PROFILE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createGymProfile';

  @override
  final CreateGymProfileArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateGymProfile$Mutation parse(Map<String, dynamic> json) =>
      CreateGymProfile$Mutation.fromJson(json);
}

final GYM_PROFILES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'gymProfiles'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'gymProfiles'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'GymProfile'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class GymProfilesQuery
    extends GraphQLQuery<GymProfiles$Query, JsonSerializable> {
  GymProfilesQuery();

  @override
  final DocumentNode document = GYM_PROFILES_QUERY_DOCUMENT;

  @override
  final String operationName = 'gymProfiles';

  @override
  List<Object?> get props => [document, operationName];
  @override
  GymProfiles$Query parse(Map<String, dynamic> json) =>
      GymProfiles$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateGymProfileArguments extends JsonSerializable with EquatableMixin {
  UpdateGymProfileArguments({required this.data});

  @override
  factory UpdateGymProfileArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateGymProfileArgumentsFromJson(json);

  late UpdateGymProfileInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateGymProfileArgumentsToJson(this);
}

final UPDATE_GYM_PROFILE_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateGymProfile'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateGymProfileInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateGymProfile'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'GymProfile'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Equipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateGymProfileMutation
    extends GraphQLQuery<UpdateGymProfile$Mutation, UpdateGymProfileArguments> {
  UpdateGymProfileMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_GYM_PROFILE_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateGymProfile';

  @override
  final UpdateGymProfileArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateGymProfile$Mutation parse(Map<String, dynamic> json) =>
      UpdateGymProfile$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserPublicProfilesArguments extends JsonSerializable with EquatableMixin {
  UserPublicProfilesArguments({this.cursor, this.take});

  @override
  factory UserPublicProfilesArguments.fromJson(Map<String, dynamic> json) =>
      _$UserPublicProfilesArgumentsFromJson(json);

  final String? cursor;

  final int? take;

  @override
  List<Object?> get props => [cursor, take];
  @override
  Map<String, dynamic> toJson() => _$UserPublicProfilesArgumentsToJson(this);
}

final USER_PUBLIC_PROFILES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userPublicProfiles'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'cursor')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'take')),
            type: NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userPublicProfiles'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'cursor'),
                  value: VariableNode(name: NameNode(value: 'cursor'))),
              ArgumentNode(
                  name: NameNode(value: 'take'),
                  value: VariableNode(name: NameNode(value: 'take')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserPublicProfileSummary'),
                  directives: []),
              FieldNode(
                  name: NameNode(value: 'Clubs'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubSummary'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Owner'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserPublicProfileSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserPublicProfileSummary'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tagline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'townCity'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'countryCode'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserPublicProfilesQuery extends GraphQLQuery<UserPublicProfiles$Query,
    UserPublicProfilesArguments> {
  UserPublicProfilesQuery({required this.variables});

  @override
  final DocumentNode document = USER_PUBLIC_PROFILES_QUERY_DOCUMENT;

  @override
  final String operationName = 'userPublicProfiles';

  @override
  final UserPublicProfilesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserPublicProfiles$Query parse(Map<String, dynamic> json) =>
      UserPublicProfiles$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserPublicProfileByIdArguments extends JsonSerializable
    with EquatableMixin {
  UserPublicProfileByIdArguments({required this.userId});

  @override
  factory UserPublicProfileByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$UserPublicProfileByIdArgumentsFromJson(json);

  late String userId;

  @override
  List<Object?> get props => [userId];
  @override
  Map<String, dynamic> toJson() => _$UserPublicProfileByIdArgumentsToJson(this);
}

final USER_PUBLIC_PROFILE_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userPublicProfileById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userPublicProfileById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userId'),
                  value: VariableNode(name: NameNode(value: 'userId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserPublicProfile'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Clubs'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubSummary'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Owner'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'LifetimeLogStatsSummary'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'LifetimeLogStatsSummary'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'BenchmarksWithBestEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'UserBenchmarkSummary'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserBenchmarkSummary'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'BestEntry'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserBenchmarkEntry'),
                              directives: [])
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'memberCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'LifetimeLogStatsSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'LifetimeLogStatsSummary'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'minutesWorked'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sessionsLogged'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lastEntryAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipmentInfo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'benchmarkType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserPublicProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserPublicProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tagline'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'townCity'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'instagramHandle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tiktokHandle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'youtubeHandle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'linkedinHandle'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'countryCode'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'followerCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'postsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'planCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserPublicProfileByIdQuery extends GraphQLQuery<
    UserPublicProfileById$Query, UserPublicProfileByIdArguments> {
  UserPublicProfileByIdQuery({required this.variables});

  @override
  final DocumentNode document = USER_PUBLIC_PROFILE_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'userPublicProfileById';

  @override
  final UserPublicProfileByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserPublicProfileById$Query parse(Map<String, dynamic> json) =>
      UserPublicProfileById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutTagByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutTagByIdArguments({required this.id});

  @override
  factory DeleteWorkoutTagByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteWorkoutTagByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteWorkoutTagByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_TAG_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutTagById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutTagById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutTagByIdMutation extends GraphQLQuery<
    DeleteWorkoutTagById$Mutation, DeleteWorkoutTagByIdArguments> {
  DeleteWorkoutTagByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_WORKOUT_TAG_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutTagById';

  @override
  final DeleteWorkoutTagByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutTagById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutTagById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutTagArguments extends JsonSerializable with EquatableMixin {
  UpdateWorkoutTagArguments({required this.data});

  @override
  factory UpdateWorkoutTagArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutTagArgumentsFromJson(json);

  late UpdateWorkoutTagInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutTagArgumentsToJson(this);
}

final UPDATE_WORKOUT_TAG_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutTag'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutTagInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutTag'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutTagMutation
    extends GraphQLQuery<UpdateWorkoutTag$Mutation, UpdateWorkoutTagArguments> {
  UpdateWorkoutTagMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_TAG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutTag';

  @override
  final UpdateWorkoutTagArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutTag$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutTag$Mutation.fromJson(json);
}

final USER_WORKOUT_TAGS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userWorkoutTags'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userWorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserWorkoutTagsQuery
    extends GraphQLQuery<UserWorkoutTags$Query, JsonSerializable> {
  UserWorkoutTagsQuery();

  @override
  final DocumentNode document = USER_WORKOUT_TAGS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userWorkoutTags';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserWorkoutTags$Query parse(Map<String, dynamic> json) =>
      UserWorkoutTags$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutTagArguments extends JsonSerializable with EquatableMixin {
  CreateWorkoutTagArguments({required this.data});

  @override
  factory CreateWorkoutTagArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutTagArgumentsFromJson(json);

  late CreateWorkoutTagInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutTagArgumentsToJson(this);
}

final CREATE_WORKOUT_TAG_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutTag'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutTagInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutTag'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutTagMutation
    extends GraphQLQuery<CreateWorkoutTag$Mutation, CreateWorkoutTagArguments> {
  CreateWorkoutTagMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_TAG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutTag';

  @override
  final CreateWorkoutTagArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutTag$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutTag$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSetArguments extends JsonSerializable with EquatableMixin {
  UpdateWorkoutSetArguments({required this.data});

  @override
  factory UpdateWorkoutSetArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSetArgumentsFromJson(json);

  late UpdateWorkoutSetInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSetArgumentsToJson(this);
}

final UPDATE_WORKOUT_SET_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutSet'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutSetInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutSet'),
            alias: NameNode(value: 'updateWorkoutSet'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSet'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutSetMutation
    extends GraphQLQuery<UpdateWorkoutSet$Mutation, UpdateWorkoutSetArguments> {
  UpdateWorkoutSetMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_SET_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutSet';

  @override
  final UpdateWorkoutSetArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutSet$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutSet$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSetWithWorkoutMovesArguments extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutSetWithWorkoutMovesArguments({required this.data});

  @override
  factory CreateWorkoutSetWithWorkoutMovesArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateWorkoutSetWithWorkoutMovesArgumentsFromJson(json);

  late CreateWorkoutSetWithWorkoutMovesInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateWorkoutSetWithWorkoutMovesArgumentsToJson(this);
}

final CREATE_WORKOUT_SET_WITH_WORKOUT_MOVES_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutSetWithWorkoutMoves'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutSetWithWorkoutMovesInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutSetWithWorkoutMoves'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSet'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutMoves'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutMove'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipment'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'Move'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Move'), directives: []),
                          FieldNode(
                              name: NameNode(value: 'MoveType'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'MoveType'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'BodyAreaMoveScores'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FieldNode(
                                    name: NameNode(value: 'score'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null),
                                FieldNode(
                                    name: NameNode(value: 'BodyArea'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'BodyArea'),
                                          directives: [])
                                    ]))
                              ])),
                          FieldNode(
                              name: NameNode(value: 'RequiredEquipments'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'SelectableEquipments'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutSetWithWorkoutMovesMutation extends GraphQLQuery<
    CreateWorkoutSetWithWorkoutMoves$Mutation,
    CreateWorkoutSetWithWorkoutMovesArguments> {
  CreateWorkoutSetWithWorkoutMovesMutation({required this.variables});

  @override
  final DocumentNode document =
      CREATE_WORKOUT_SET_WITH_WORKOUT_MOVES_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutSetWithWorkoutMoves';

  @override
  final CreateWorkoutSetWithWorkoutMovesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutSetWithWorkoutMoves$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutSetWithWorkoutMoves$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DuplicateWorkoutSetByIdArguments extends JsonSerializable
    with EquatableMixin {
  DuplicateWorkoutSetByIdArguments({required this.id});

  @override
  factory DuplicateWorkoutSetByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DuplicateWorkoutSetByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DuplicateWorkoutSetByIdArgumentsToJson(this);
}

final DUPLICATE_WORKOUT_SET_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'duplicateWorkoutSetById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'duplicateWorkoutSetById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSet'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutMoves'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutMove'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipment'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ])),
                    FieldNode(
                        name: NameNode(value: 'Move'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Move'), directives: []),
                          FieldNode(
                              name: NameNode(value: 'MoveType'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'MoveType'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'BodyAreaMoveScores'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FieldNode(
                                    name: NameNode(value: 'score'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null),
                                FieldNode(
                                    name: NameNode(value: 'BodyArea'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'BodyArea'),
                                          directives: [])
                                    ]))
                              ])),
                          FieldNode(
                              name: NameNode(value: 'RequiredEquipments'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'SelectableEquipments'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class DuplicateWorkoutSetByIdMutation extends GraphQLQuery<
    DuplicateWorkoutSetById$Mutation, DuplicateWorkoutSetByIdArguments> {
  DuplicateWorkoutSetByIdMutation({required this.variables});

  @override
  final DocumentNode document = DUPLICATE_WORKOUT_SET_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'duplicateWorkoutSetById';

  @override
  final DuplicateWorkoutSetByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DuplicateWorkoutSetById$Mutation parse(Map<String, dynamic> json) =>
      DuplicateWorkoutSetById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutSetsArguments extends JsonSerializable with EquatableMixin {
  ReorderWorkoutSetsArguments({required this.data});

  @override
  factory ReorderWorkoutSetsArguments.fromJson(Map<String, dynamic> json) =>
      _$ReorderWorkoutSetsArgumentsFromJson(json);

  late List<UpdateSortPositionInput> data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$ReorderWorkoutSetsArgumentsToJson(this);
}

final REORDER_WORKOUT_SETS_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'reorderWorkoutSets'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: ListTypeNode(
                type: NamedTypeNode(
                    name: NameNode(value: 'UpdateSortPositionInput'),
                    isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'reorderWorkoutSets'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'sortPosition'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ]))
]);

class ReorderWorkoutSetsMutation extends GraphQLQuery<
    ReorderWorkoutSets$Mutation, ReorderWorkoutSetsArguments> {
  ReorderWorkoutSetsMutation({required this.variables});

  @override
  final DocumentNode document = REORDER_WORKOUT_SETS_MUTATION_DOCUMENT;

  @override
  final String operationName = 'reorderWorkoutSets';

  @override
  final ReorderWorkoutSetsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ReorderWorkoutSets$Mutation parse(Map<String, dynamic> json) =>
      ReorderWorkoutSets$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSetArguments extends JsonSerializable with EquatableMixin {
  CreateWorkoutSetArguments({required this.data});

  @override
  factory CreateWorkoutSetArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSetArgumentsFromJson(json);

  late CreateWorkoutSetInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSetArgumentsToJson(this);
}

final CREATE_WORKOUT_SET_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutSet'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutSetInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutSet'),
            alias: NameNode(value: 'createWorkoutSet'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSet'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutSetMutation
    extends GraphQLQuery<CreateWorkoutSet$Mutation, CreateWorkoutSetArguments> {
  CreateWorkoutSetMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_SET_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutSet';

  @override
  final CreateWorkoutSetArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutSet$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutSet$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutSetByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutSetByIdArguments({required this.id});

  @override
  factory DeleteWorkoutSetByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteWorkoutSetByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DeleteWorkoutSetByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_SET_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutSetById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutSetById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutSetByIdMutation extends GraphQLQuery<
    DeleteWorkoutSetById$Mutation, DeleteWorkoutSetByIdArguments> {
  DeleteWorkoutSetByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_WORKOUT_SET_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutSetById';

  @override
  final DeleteWorkoutSetByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutSetById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutSetById$Mutation.fromJson(json);
}

final MOVE_TYPES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'moveTypes'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'moveTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'MoveType'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class MoveTypesQuery extends GraphQLQuery<MoveTypes$Query, JsonSerializable> {
  MoveTypesQuery();

  @override
  final DocumentNode document = MOVE_TYPES_QUERY_DOCUMENT;

  @override
  final String operationName = 'moveTypes';

  @override
  List<Object?> get props => [document, operationName];
  @override
  MoveTypes$Query parse(Map<String, dynamic> json) =>
      MoveTypes$Query.fromJson(json);
}

final STANDARD_MOVES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'standardMoves'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'standardMoves'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Move'), directives: []),
              FieldNode(
                  name: NameNode(value: 'MoveType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'MoveType'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'BodyAreaMoveScores'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                        name: NameNode(value: 'score'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null),
                    FieldNode(
                        name: NameNode(value: 'BodyArea'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'BodyArea'), directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'RequiredEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'SelectableEquipments'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'Equipment'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class StandardMovesQuery
    extends GraphQLQuery<StandardMoves$Query, JsonSerializable> {
  StandardMovesQuery();

  @override
  final DocumentNode document = STANDARD_MOVES_QUERY_DOCUMENT;

  @override
  final String operationName = 'standardMoves';

  @override
  List<Object?> get props => [document, operationName];
  @override
  StandardMoves$Query parse(Map<String, dynamic> json) =>
      StandardMoves$Query.fromJson(json);
}

final WORKOUT_GOALS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'workoutGoals'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'workoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class WorkoutGoalsQuery
    extends GraphQLQuery<WorkoutGoals$Query, JsonSerializable> {
  WorkoutGoalsQuery();

  @override
  final DocumentNode document = WORKOUT_GOALS_QUERY_DOCUMENT;

  @override
  final String operationName = 'workoutGoals';

  @override
  List<Object?> get props => [document, operationName];
  @override
  WorkoutGoals$Query parse(Map<String, dynamic> json) =>
      WorkoutGoals$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CheckUniqueDisplayNameArguments extends JsonSerializable
    with EquatableMixin {
  CheckUniqueDisplayNameArguments({required this.displayName});

  @override
  factory CheckUniqueDisplayNameArguments.fromJson(Map<String, dynamic> json) =>
      _$CheckUniqueDisplayNameArgumentsFromJson(json);

  late String displayName;

  @override
  List<Object?> get props => [displayName];
  @override
  Map<String, dynamic> toJson() =>
      _$CheckUniqueDisplayNameArgumentsToJson(this);
}

final CHECK_UNIQUE_DISPLAY_NAME_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'checkUniqueDisplayName'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'displayName')),
            type:
                NamedTypeNode(name: NameNode(value: 'String'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'checkUniqueDisplayName'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'displayName'),
                  value: VariableNode(name: NameNode(value: 'displayName')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class CheckUniqueDisplayNameQuery extends GraphQLQuery<
    CheckUniqueDisplayName$Query, CheckUniqueDisplayNameArguments> {
  CheckUniqueDisplayNameQuery({required this.variables});

  @override
  final DocumentNode document = CHECK_UNIQUE_DISPLAY_NAME_QUERY_DOCUMENT;

  @override
  final String operationName = 'checkUniqueDisplayName';

  @override
  final CheckUniqueDisplayNameArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CheckUniqueDisplayName$Query parse(Map<String, dynamic> json) =>
      CheckUniqueDisplayName$Query.fromJson(json);
}

final WORKOUT_SECTION_TYPES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'workoutSectionTypes'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'workoutSectionTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSectionType'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class WorkoutSectionTypesQuery
    extends GraphQLQuery<WorkoutSectionTypes$Query, JsonSerializable> {
  WorkoutSectionTypesQuery();

  @override
  final DocumentNode document = WORKOUT_SECTION_TYPES_QUERY_DOCUMENT;

  @override
  final String operationName = 'workoutSectionTypes';

  @override
  List<Object?> get props => [document, operationName];
  @override
  WorkoutSectionTypes$Query parse(Map<String, dynamic> json) =>
      WorkoutSectionTypes$Query.fromJson(json);
}

final BODY_AREAS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'bodyAreas'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'bodyAreas'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'BodyArea'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class BodyAreasQuery extends GraphQLQuery<BodyAreas$Query, JsonSerializable> {
  BodyAreasQuery();

  @override
  final DocumentNode document = BODY_AREAS_QUERY_DOCUMENT;

  @override
  final String operationName = 'bodyAreas';

  @override
  List<Object?> get props => [document, operationName];
  @override
  BodyAreas$Query parse(Map<String, dynamic> json) =>
      BodyAreas$Query.fromJson(json);
}

final EQUIPMENTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'equipments'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Equipment'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class EquipmentsQuery extends GraphQLQuery<Equipments$Query, JsonSerializable> {
  EquipmentsQuery();

  @override
  final DocumentNode document = EQUIPMENTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'equipments';

  @override
  List<Object?> get props => [document, operationName];
  @override
  Equipments$Query parse(Map<String, dynamic> json) =>
      Equipments$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserBenchmarkTagByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteUserBenchmarkTagByIdArguments({required this.id});

  @override
  factory DeleteUserBenchmarkTagByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserBenchmarkTagByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserBenchmarkTagByIdArgumentsToJson(this);
}

final DELETE_USER_BENCHMARK_TAG_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteUserBenchmarkTagById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteUserBenchmarkTagById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteUserBenchmarkTagByIdMutation extends GraphQLQuery<
    DeleteUserBenchmarkTagById$Mutation, DeleteUserBenchmarkTagByIdArguments> {
  DeleteUserBenchmarkTagByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_USER_BENCHMARK_TAG_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteUserBenchmarkTagById';

  @override
  final DeleteUserBenchmarkTagByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteUserBenchmarkTagById$Mutation parse(Map<String, dynamic> json) =>
      DeleteUserBenchmarkTagById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmarkEntryArguments extends JsonSerializable
    with EquatableMixin {
  CreateUserBenchmarkEntryArguments({required this.data});

  @override
  factory CreateUserBenchmarkEntryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateUserBenchmarkEntryArgumentsFromJson(json);

  late CreateUserBenchmarkEntryInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserBenchmarkEntryArgumentsToJson(this);
}

final CREATE_USER_BENCHMARK_ENTRY_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createUserBenchmarkEntry'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateUserBenchmarkEntryInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createUserBenchmarkEntry'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmarkEntry'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateUserBenchmarkEntryMutation extends GraphQLQuery<
    CreateUserBenchmarkEntry$Mutation, CreateUserBenchmarkEntryArguments> {
  CreateUserBenchmarkEntryMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_USER_BENCHMARK_ENTRY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createUserBenchmarkEntry';

  @override
  final CreateUserBenchmarkEntryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateUserBenchmarkEntry$Mutation parse(Map<String, dynamic> json) =>
      CreateUserBenchmarkEntry$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmarkTagArguments extends JsonSerializable
    with EquatableMixin {
  CreateUserBenchmarkTagArguments({required this.data});

  @override
  factory CreateUserBenchmarkTagArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateUserBenchmarkTagArgumentsFromJson(json);

  late CreateUserBenchmarkTagInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateUserBenchmarkTagArgumentsToJson(this);
}

final CREATE_USER_BENCHMARK_TAG_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createUserBenchmarkTag'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateUserBenchmarkTagInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createUserBenchmarkTag'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmarkTag'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateUserBenchmarkTagMutation extends GraphQLQuery<
    CreateUserBenchmarkTag$Mutation, CreateUserBenchmarkTagArguments> {
  CreateUserBenchmarkTagMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_USER_BENCHMARK_TAG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createUserBenchmarkTag';

  @override
  final CreateUserBenchmarkTagArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateUserBenchmarkTag$Mutation parse(Map<String, dynamic> json) =>
      CreateUserBenchmarkTag$Mutation.fromJson(json);
}

final USER_BENCHMARK_TAGS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userBenchmarkTags'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userBenchmarkTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmarkTag'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserBenchmarkTagsQuery
    extends GraphQLQuery<UserBenchmarkTags$Query, JsonSerializable> {
  UserBenchmarkTagsQuery();

  @override
  final DocumentNode document = USER_BENCHMARK_TAGS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userBenchmarkTags';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserBenchmarkTags$Query parse(Map<String, dynamic> json) =>
      UserBenchmarkTags$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmarkTagArguments extends JsonSerializable
    with EquatableMixin {
  UpdateUserBenchmarkTagArguments({required this.data});

  @override
  factory UpdateUserBenchmarkTagArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserBenchmarkTagArgumentsFromJson(json);

  late UpdateUserBenchmarkTagInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateUserBenchmarkTagArgumentsToJson(this);
}

final UPDATE_USER_BENCHMARK_TAG_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateUserBenchmarkTag'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateUserBenchmarkTagInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateUserBenchmarkTag'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmarkTag'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateUserBenchmarkTagMutation extends GraphQLQuery<
    UpdateUserBenchmarkTag$Mutation, UpdateUserBenchmarkTagArguments> {
  UpdateUserBenchmarkTagMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_USER_BENCHMARK_TAG_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateUserBenchmarkTag';

  @override
  final UpdateUserBenchmarkTagArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateUserBenchmarkTag$Mutation parse(Map<String, dynamic> json) =>
      UpdateUserBenchmarkTag$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmarkEntryArguments extends JsonSerializable
    with EquatableMixin {
  UpdateUserBenchmarkEntryArguments({required this.data});

  @override
  factory UpdateUserBenchmarkEntryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateUserBenchmarkEntryArgumentsFromJson(json);

  late UpdateUserBenchmarkEntryInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateUserBenchmarkEntryArgumentsToJson(this);
}

final UPDATE_USER_BENCHMARK_ENTRY_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateUserBenchmarkEntry'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateUserBenchmarkEntryInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateUserBenchmarkEntry'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmarkEntry'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateUserBenchmarkEntryMutation extends GraphQLQuery<
    UpdateUserBenchmarkEntry$Mutation, UpdateUserBenchmarkEntryArguments> {
  UpdateUserBenchmarkEntryMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_USER_BENCHMARK_ENTRY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateUserBenchmarkEntry';

  @override
  final UpdateUserBenchmarkEntryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateUserBenchmarkEntry$Mutation parse(Map<String, dynamic> json) =>
      UpdateUserBenchmarkEntry$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserBenchmarkEntryByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteUserBenchmarkEntryByIdArguments({required this.id});

  @override
  factory DeleteUserBenchmarkEntryByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserBenchmarkEntryByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserBenchmarkEntryByIdArgumentsToJson(this);
}

final DELETE_USER_BENCHMARK_ENTRY_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteUserBenchmarkEntryById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteUserBenchmarkEntryById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteUserBenchmarkEntryByIdMutation extends GraphQLQuery<
    DeleteUserBenchmarkEntryById$Mutation,
    DeleteUserBenchmarkEntryByIdArguments> {
  DeleteUserBenchmarkEntryByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_USER_BENCHMARK_ENTRY_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteUserBenchmarkEntryById';

  @override
  final DeleteUserBenchmarkEntryByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteUserBenchmarkEntryById$Mutation parse(Map<String, dynamic> json) =>
      DeleteUserBenchmarkEntryById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateUserBenchmarkArguments extends JsonSerializable
    with EquatableMixin {
  UpdateUserBenchmarkArguments({required this.data});

  @override
  factory UpdateUserBenchmarkArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateUserBenchmarkArgumentsFromJson(json);

  late UpdateUserBenchmarkInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateUserBenchmarkArgumentsToJson(this);
}

final UPDATE_USER_BENCHMARK_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateUserBenchmark'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateUserBenchmarkInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateUserBenchmark'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmark'), directives: []),
              FieldNode(
                  name: NameNode(value: 'UserBenchmarkEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserBenchmarkEntry'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'UserBenchmarkTags'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserBenchmarkTag'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmark'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmark'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lastEntryAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipmentInfo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'benchmarkType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateUserBenchmarkMutation extends GraphQLQuery<
    UpdateUserBenchmark$Mutation, UpdateUserBenchmarkArguments> {
  UpdateUserBenchmarkMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_USER_BENCHMARK_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateUserBenchmark';

  @override
  final UpdateUserBenchmarkArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateUserBenchmark$Mutation parse(Map<String, dynamic> json) =>
      UpdateUserBenchmark$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateUserBenchmarkArguments extends JsonSerializable
    with EquatableMixin {
  CreateUserBenchmarkArguments({required this.data});

  @override
  factory CreateUserBenchmarkArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateUserBenchmarkArgumentsFromJson(json);

  late CreateUserBenchmarkInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateUserBenchmarkArgumentsToJson(this);
}

final CREATE_USER_BENCHMARK_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createUserBenchmark'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateUserBenchmarkInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createUserBenchmark'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmark'), directives: []),
              FieldNode(
                  name: NameNode(value: 'UserBenchmarkEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserBenchmarkEntry'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'UserBenchmarkTags'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserBenchmarkTag'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmark'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmark'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lastEntryAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipmentInfo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'benchmarkType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateUserBenchmarkMutation extends GraphQLQuery<
    CreateUserBenchmark$Mutation, CreateUserBenchmarkArguments> {
  CreateUserBenchmarkMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_USER_BENCHMARK_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createUserBenchmark';

  @override
  final CreateUserBenchmarkArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateUserBenchmark$Mutation parse(Map<String, dynamic> json) =>
      CreateUserBenchmark$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteUserBenchmarkByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteUserBenchmarkByIdArguments({required this.id});

  @override
  factory DeleteUserBenchmarkByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteUserBenchmarkByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteUserBenchmarkByIdArgumentsToJson(this);
}

final DELETE_USER_BENCHMARK_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteUserBenchmarkById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteUserBenchmarkById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteUserBenchmarkByIdMutation extends GraphQLQuery<
    DeleteUserBenchmarkById$Mutation, DeleteUserBenchmarkByIdArguments> {
  DeleteUserBenchmarkByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_USER_BENCHMARK_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteUserBenchmarkById';

  @override
  final DeleteUserBenchmarkByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteUserBenchmarkById$Mutation parse(Map<String, dynamic> json) =>
      DeleteUserBenchmarkById$Mutation.fromJson(json);
}

final USER_BENCHMARKS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userBenchmarks'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userBenchmarks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmark'), directives: []),
              FieldNode(
                  name: NameNode(value: 'UserBenchmarkEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserBenchmarkEntry'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'UserBenchmarkTags'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserBenchmarkTag'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmark'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmark'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lastEntryAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipmentInfo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'benchmarkType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserBenchmarksQuery
    extends GraphQLQuery<UserBenchmarks$Query, JsonSerializable> {
  UserBenchmarksQuery();

  @override
  final DocumentNode document = USER_BENCHMARKS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userBenchmarks';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserBenchmarks$Query parse(Map<String, dynamic> json) =>
      UserBenchmarks$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserBenchmarkByIdArguments extends JsonSerializable with EquatableMixin {
  UserBenchmarkByIdArguments({required this.id});

  @override
  factory UserBenchmarkByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$UserBenchmarkByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$UserBenchmarkByIdArgumentsToJson(this);
}

final USER_BENCHMARK_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userBenchmarkById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userBenchmarkById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserBenchmark'), directives: []),
              FieldNode(
                  name: NameNode(value: 'UserBenchmarkEntries'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserBenchmarkEntry'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'UserBenchmarkTags'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserBenchmarkTag'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'completedOn'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'score'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'videoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmarkTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmarkTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserBenchmark'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserBenchmark'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lastEntryAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipmentInfo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'benchmarkType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserBenchmarkByIdQuery
    extends GraphQLQuery<UserBenchmarkById$Query, UserBenchmarkByIdArguments> {
  UserBenchmarkByIdQuery({required this.variables});

  @override
  final DocumentNode document = USER_BENCHMARK_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'userBenchmarkById';

  @override
  final UserBenchmarkByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserBenchmarkById$Query parse(Map<String, dynamic> json) =>
      UserBenchmarkById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutPlansArguments extends JsonSerializable
    with EquatableMixin {
  TextSearchWorkoutPlansArguments({required this.text});

  @override
  factory TextSearchWorkoutPlansArguments.fromJson(Map<String, dynamic> json) =>
      _$TextSearchWorkoutPlansArgumentsFromJson(json);

  late String text;

  @override
  List<Object?> get props => [text];
  @override
  Map<String, dynamic> toJson() =>
      _$TextSearchWorkoutPlansArgumentsToJson(this);
}

final TEXT_SEARCH_WORKOUT_PLANS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'textSearchWorkoutPlans'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'text')),
            type:
                NamedTypeNode(name: NameNode(value: 'String'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'textSearchWorkoutPlans'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'text'),
                  value: VariableNode(name: NameNode(value: 'text')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutPlanSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class TextSearchWorkoutPlansQuery extends GraphQLQuery<
    TextSearchWorkoutPlans$Query, TextSearchWorkoutPlansArguments> {
  TextSearchWorkoutPlansQuery({required this.variables});

  @override
  final DocumentNode document = TEXT_SEARCH_WORKOUT_PLANS_QUERY_DOCUMENT;

  @override
  final String operationName = 'textSearchWorkoutPlans';

  @override
  final TextSearchWorkoutPlansArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  TextSearchWorkoutPlans$Query parse(Map<String, dynamic> json) =>
      TextSearchWorkoutPlans$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutPlanNamesArguments extends JsonSerializable
    with EquatableMixin {
  TextSearchWorkoutPlanNamesArguments({required this.text});

  @override
  factory TextSearchWorkoutPlanNamesArguments.fromJson(
          Map<String, dynamic> json) =>
      _$TextSearchWorkoutPlanNamesArgumentsFromJson(json);

  late String text;

  @override
  List<Object?> get props => [text];
  @override
  Map<String, dynamic> toJson() =>
      _$TextSearchWorkoutPlanNamesArgumentsToJson(this);
}

final TEXT_SEARCH_WORKOUT_PLAN_NAMES_QUERY_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'textSearchWorkoutPlanNames'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'text')),
            type:
                NamedTypeNode(name: NameNode(value: 'String'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'textSearchWorkoutPlanNames'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'text'),
                  value: VariableNode(name: NameNode(value: 'text')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'name'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ]))
]);

class TextSearchWorkoutPlanNamesQuery extends GraphQLQuery<
    TextSearchWorkoutPlanNames$Query, TextSearchWorkoutPlanNamesArguments> {
  TextSearchWorkoutPlanNamesQuery({required this.variables});

  @override
  final DocumentNode document = TEXT_SEARCH_WORKOUT_PLAN_NAMES_QUERY_DOCUMENT;

  @override
  final String operationName = 'textSearchWorkoutPlanNames';

  @override
  final TextSearchWorkoutPlanNamesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  TextSearchWorkoutPlanNames$Query parse(Map<String, dynamic> json) =>
      TextSearchWorkoutPlanNames$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutsArguments extends JsonSerializable with EquatableMixin {
  TextSearchWorkoutsArguments({required this.text});

  @override
  factory TextSearchWorkoutsArguments.fromJson(Map<String, dynamic> json) =>
      _$TextSearchWorkoutsArgumentsFromJson(json);

  late String text;

  @override
  List<Object?> get props => [text];
  @override
  Map<String, dynamic> toJson() => _$TextSearchWorkoutsArgumentsToJson(this);
}

final TEXT_SEARCH_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'textSearchWorkouts'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'text')),
            type:
                NamedTypeNode(name: NameNode(value: 'String'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'textSearchWorkouts'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'text'),
                  value: VariableNode(name: NameNode(value: 'text')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class TextSearchWorkoutsQuery extends GraphQLQuery<TextSearchWorkouts$Query,
    TextSearchWorkoutsArguments> {
  TextSearchWorkoutsQuery({required this.variables});

  @override
  final DocumentNode document = TEXT_SEARCH_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'textSearchWorkouts';

  @override
  final TextSearchWorkoutsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  TextSearchWorkouts$Query parse(Map<String, dynamic> json) =>
      TextSearchWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class TextSearchWorkoutNamesArguments extends JsonSerializable
    with EquatableMixin {
  TextSearchWorkoutNamesArguments({required this.text});

  @override
  factory TextSearchWorkoutNamesArguments.fromJson(Map<String, dynamic> json) =>
      _$TextSearchWorkoutNamesArgumentsFromJson(json);

  late String text;

  @override
  List<Object?> get props => [text];
  @override
  Map<String, dynamic> toJson() =>
      _$TextSearchWorkoutNamesArgumentsToJson(this);
}

final TEXT_SEARCH_WORKOUT_NAMES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'textSearchWorkoutNames'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'text')),
            type:
                NamedTypeNode(name: NameNode(value: 'String'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'textSearchWorkoutNames'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'text'),
                  value: VariableNode(name: NameNode(value: 'text')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'name'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ]))
]);

class TextSearchWorkoutNamesQuery extends GraphQLQuery<
    TextSearchWorkoutNames$Query, TextSearchWorkoutNamesArguments> {
  TextSearchWorkoutNamesQuery({required this.variables});

  @override
  final DocumentNode document = TEXT_SEARCH_WORKOUT_NAMES_QUERY_DOCUMENT;

  @override
  final String operationName = 'textSearchWorkoutNames';

  @override
  final TextSearchWorkoutNamesArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  TextSearchWorkoutNames$Query parse(Map<String, dynamic> json) =>
      TextSearchWorkoutNames$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutSectionArguments extends JsonSerializable
    with EquatableMixin {
  UpdateWorkoutSectionArguments({required this.data});

  @override
  factory UpdateWorkoutSectionArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutSectionArgumentsFromJson(json);

  late UpdateWorkoutSectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutSectionArgumentsToJson(this);
}

final UPDATE_WORKOUT_SECTION_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkoutSection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutSectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkoutSection'),
            alias: NameNode(value: 'updateWorkoutSection'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutSectionMutation extends GraphQLQuery<
    UpdateWorkoutSection$Mutation, UpdateWorkoutSectionArguments> {
  UpdateWorkoutSectionMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_SECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkoutSection';

  @override
  final UpdateWorkoutSectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkoutSection$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkoutSection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutSectionArguments extends JsonSerializable
    with EquatableMixin {
  CreateWorkoutSectionArguments({required this.data});

  @override
  factory CreateWorkoutSectionArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutSectionArgumentsFromJson(json);

  late CreateWorkoutSectionInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutSectionArgumentsToJson(this);
}

final CREATE_WORKOUT_SECTION_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkoutSection'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutSectionInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkoutSection'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutSectionMutation extends GraphQLQuery<
    CreateWorkoutSection$Mutation, CreateWorkoutSectionArguments> {
  CreateWorkoutSectionMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_SECTION_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkoutSection';

  @override
  final CreateWorkoutSectionArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkoutSection$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkoutSection$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ReorderWorkoutSectionsArguments extends JsonSerializable
    with EquatableMixin {
  ReorderWorkoutSectionsArguments({required this.data});

  @override
  factory ReorderWorkoutSectionsArguments.fromJson(Map<String, dynamic> json) =>
      _$ReorderWorkoutSectionsArgumentsFromJson(json);

  late List<UpdateSortPositionInput> data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$ReorderWorkoutSectionsArgumentsToJson(this);
}

final REORDER_WORKOUT_SECTIONS_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'reorderWorkoutSections'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: ListTypeNode(
                type: NamedTypeNode(
                    name: NameNode(value: 'UpdateSortPositionInput'),
                    isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'reorderWorkoutSections'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'sortPosition'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ]))
]);

class ReorderWorkoutSectionsMutation extends GraphQLQuery<
    ReorderWorkoutSections$Mutation, ReorderWorkoutSectionsArguments> {
  ReorderWorkoutSectionsMutation({required this.variables});

  @override
  final DocumentNode document = REORDER_WORKOUT_SECTIONS_MUTATION_DOCUMENT;

  @override
  final String operationName = 'reorderWorkoutSections';

  @override
  final ReorderWorkoutSectionsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ReorderWorkoutSections$Mutation parse(Map<String, dynamic> json) =>
      ReorderWorkoutSections$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteWorkoutSectionByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteWorkoutSectionByIdArguments({required this.id});

  @override
  factory DeleteWorkoutSectionByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteWorkoutSectionByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteWorkoutSectionByIdArgumentsToJson(this);
}

final DELETE_WORKOUT_SECTION_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteWorkoutSectionById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteWorkoutSectionById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteWorkoutSectionByIdMutation extends GraphQLQuery<
    DeleteWorkoutSectionById$Mutation, DeleteWorkoutSectionByIdArguments> {
  DeleteWorkoutSectionByIdMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_WORKOUT_SECTION_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteWorkoutSectionById';

  @override
  final DeleteWorkoutSectionByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteWorkoutSectionById$Mutation parse(Map<String, dynamic> json) =>
      DeleteWorkoutSectionById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateScheduledWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  UpdateScheduledWorkoutArguments({required this.data});

  @override
  factory UpdateScheduledWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateScheduledWorkoutArgumentsFromJson(json);

  late UpdateScheduledWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateScheduledWorkoutArgumentsToJson(this);
}

final UPDATE_SCHEDULED_WORKOUT_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateScheduledWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateScheduledWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateScheduledWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ScheduledWorkout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workout'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'GymProfile'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'GymProfile'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'loggedWorkoutId'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'workoutPlanEnrolmentId'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ScheduledWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ScheduledWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scheduledAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanEnrolmentId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateScheduledWorkoutMutation extends GraphQLQuery<
    UpdateScheduledWorkout$Mutation, UpdateScheduledWorkoutArguments> {
  UpdateScheduledWorkoutMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_SCHEDULED_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateScheduledWorkout';

  @override
  final UpdateScheduledWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateScheduledWorkout$Mutation parse(Map<String, dynamic> json) =>
      UpdateScheduledWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateScheduledWorkoutArguments extends JsonSerializable
    with EquatableMixin {
  CreateScheduledWorkoutArguments({required this.data});

  @override
  factory CreateScheduledWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateScheduledWorkoutArgumentsFromJson(json);

  late CreateScheduledWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateScheduledWorkoutArgumentsToJson(this);
}

final CREATE_SCHEDULED_WORKOUT_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createScheduledWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateScheduledWorkoutInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createScheduledWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ScheduledWorkout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workout'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'GymProfile'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'GymProfile'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'loggedWorkoutId'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'workoutPlanEnrolmentId'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ScheduledWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ScheduledWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scheduledAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanEnrolmentId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateScheduledWorkoutMutation extends GraphQLQuery<
    CreateScheduledWorkout$Mutation, CreateScheduledWorkoutArguments> {
  CreateScheduledWorkoutMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_SCHEDULED_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createScheduledWorkout';

  @override
  final CreateScheduledWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateScheduledWorkout$Mutation parse(Map<String, dynamic> json) =>
      CreateScheduledWorkout$Mutation.fromJson(json);
}

final USER_SCHEDULED_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userScheduledWorkouts'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userScheduledWorkouts'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ScheduledWorkout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Workout'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'GymProfile'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'GymProfile'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'Equipments'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Equipment'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'loggedWorkoutId'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'workoutPlanEnrolmentId'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null)
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'GymProfile'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'GymProfile'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ScheduledWorkout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ScheduledWorkout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scheduledAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutPlanEnrolmentId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserScheduledWorkoutsQuery
    extends GraphQLQuery<UserScheduledWorkouts$Query, JsonSerializable> {
  UserScheduledWorkoutsQuery();

  @override
  final DocumentNode document = USER_SCHEDULED_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userScheduledWorkouts';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserScheduledWorkouts$Query parse(Map<String, dynamic> json) =>
      UserScheduledWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteScheduledWorkoutByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteScheduledWorkoutByIdArguments({required this.id});

  @override
  factory DeleteScheduledWorkoutByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteScheduledWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteScheduledWorkoutByIdArgumentsToJson(this);
}

final DELETE_SCHEDULED_WORKOUT_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteScheduledWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteScheduledWorkoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteScheduledWorkoutByIdMutation extends GraphQLQuery<
    DeleteScheduledWorkoutById$Mutation, DeleteScheduledWorkoutByIdArguments> {
  DeleteScheduledWorkoutByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_SCHEDULED_WORKOUT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteScheduledWorkoutById';

  @override
  final DeleteScheduledWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteScheduledWorkoutById$Mutation parse(Map<String, dynamic> json) =>
      DeleteScheduledWorkoutById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateClubTimelinePostArguments extends JsonSerializable
    with EquatableMixin {
  CreateClubTimelinePostArguments({required this.data});

  @override
  factory CreateClubTimelinePostArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateClubTimelinePostArgumentsFromJson(json);

  late CreateClubTimelinePostInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateClubTimelinePostArgumentsToJson(this);
}

final CREATE_CLUB_TIMELINE_POST_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createClubTimelinePost'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateClubTimelinePostInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createClubTimelinePost'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'activityId'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'postedAt'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'caption'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'tags'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'poster'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'TimelinePostObjectDataUser'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'creator'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'TimelinePostObjectDataUser'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'object'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'TimelinePostObjectDataObject'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'TimelinePostObjectDataUser'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'TimelinePostObjectDataUser'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'TimelinePostObjectDataObject'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'TimelinePostObjectDataObject'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'type'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateClubTimelinePostMutation extends GraphQLQuery<
    CreateClubTimelinePost$Mutation, CreateClubTimelinePostArguments> {
  CreateClubTimelinePostMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_CLUB_TIMELINE_POST_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createClubTimelinePost';

  @override
  final CreateClubTimelinePostArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateClubTimelinePost$Mutation parse(Map<String, dynamic> json) =>
      CreateClubTimelinePost$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteClubTimelinePostArguments extends JsonSerializable
    with EquatableMixin {
  DeleteClubTimelinePostArguments({required this.activityId});

  @override
  factory DeleteClubTimelinePostArguments.fromJson(Map<String, dynamic> json) =>
      _$DeleteClubTimelinePostArgumentsFromJson(json);

  late String activityId;

  @override
  List<Object?> get props => [activityId];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteClubTimelinePostArgumentsToJson(this);
}

final DELETE_CLUB_TIMELINE_POST_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteClubTimelinePost'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'activityId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteClubTimelinePost'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'activityId'),
                  value: VariableNode(name: NameNode(value: 'activityId')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteClubTimelinePostMutation extends GraphQLQuery<
    DeleteClubTimelinePost$Mutation, DeleteClubTimelinePostArguments> {
  DeleteClubTimelinePostMutation({required this.variables});

  @override
  final DocumentNode document = DELETE_CLUB_TIMELINE_POST_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteClubTimelinePost';

  @override
  final DeleteClubTimelinePostArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteClubTimelinePost$Mutation parse(Map<String, dynamic> json) =>
      DeleteClubTimelinePost$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class TimelinePostsDataArguments extends JsonSerializable with EquatableMixin {
  TimelinePostsDataArguments({required this.postDataRequests});

  @override
  factory TimelinePostsDataArguments.fromJson(Map<String, dynamic> json) =>
      _$TimelinePostsDataArgumentsFromJson(json);

  late List<TimelinePostDataRequestInput> postDataRequests;

  @override
  List<Object?> get props => [postDataRequests];
  @override
  Map<String, dynamic> toJson() => _$TimelinePostsDataArgumentsToJson(this);
}

final TIMELINE_POSTS_DATA_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'timelinePostsData'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'postDataRequests')),
            type: ListTypeNode(
                type: NamedTypeNode(
                    name: NameNode(value: 'TimelinePostDataRequestInput'),
                    isNonNull: true),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'timelinePostsData'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'postDataRequests'),
                  value:
                      VariableNode(name: NameNode(value: 'postDataRequests')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'activityId'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'poster'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'TimelinePostObjectDataUser'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'creator'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'TimelinePostObjectDataUser'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'object'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'TimelinePostObjectDataObject'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'TimelinePostObjectDataUser'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'TimelinePostObjectDataUser'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'TimelinePostObjectDataObject'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'TimelinePostObjectDataObject'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'type'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class TimelinePostsDataQuery
    extends GraphQLQuery<TimelinePostsData$Query, TimelinePostsDataArguments> {
  TimelinePostsDataQuery({required this.variables});

  @override
  final DocumentNode document = TIMELINE_POSTS_DATA_QUERY_DOCUMENT;

  @override
  final String operationName = 'timelinePostsData';

  @override
  final TimelinePostsDataArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  TimelinePostsData$Query parse(Map<String, dynamic> json) =>
      TimelinePostsData$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ClubMembersFeedPostsArguments extends JsonSerializable
    with EquatableMixin {
  ClubMembersFeedPostsArguments(
      {required this.clubId, required this.limit, required this.offset});

  @override
  factory ClubMembersFeedPostsArguments.fromJson(Map<String, dynamic> json) =>
      _$ClubMembersFeedPostsArgumentsFromJson(json);

  late String clubId;

  late int limit;

  late int offset;

  @override
  List<Object?> get props => [clubId, limit, offset];
  @override
  Map<String, dynamic> toJson() => _$ClubMembersFeedPostsArgumentsToJson(this);
}

final CLUB_MEMBERS_FEED_POSTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'clubMembersFeedPosts'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'limit')),
            type: NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'offset')),
            type: NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clubMembersFeedPosts'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId'))),
              ArgumentNode(
                  name: NameNode(value: 'limit'),
                  value: VariableNode(name: NameNode(value: 'limit'))),
              ArgumentNode(
                  name: NameNode(value: 'offset'),
                  value: VariableNode(name: NameNode(value: 'offset')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: 'activityId'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'postedAt'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'caption'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'tags'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              FieldNode(
                  name: NameNode(value: 'poster'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'TimelinePostObjectDataUser'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'creator'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'TimelinePostObjectDataUser'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'object'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'TimelinePostObjectDataObject'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'TimelinePostObjectDataUser'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'TimelinePostObjectDataUser'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'TimelinePostObjectDataObject'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'TimelinePostObjectDataObject'),
              isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'type'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClubMembersFeedPostsQuery extends GraphQLQuery<ClubMembersFeedPosts$Query,
    ClubMembersFeedPostsArguments> {
  ClubMembersFeedPostsQuery({required this.variables});

  @override
  final DocumentNode document = CLUB_MEMBERS_FEED_POSTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'clubMembersFeedPosts';

  @override
  final ClubMembersFeedPostsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClubMembersFeedPosts$Query parse(Map<String, dynamic> json) =>
      ClubMembersFeedPosts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class PublicWorkoutsArguments extends JsonSerializable with EquatableMixin {
  PublicWorkoutsArguments({this.cursor, this.filters, this.take});

  @override
  factory PublicWorkoutsArguments.fromJson(Map<String, dynamic> json) =>
      _$PublicWorkoutsArgumentsFromJson(json);

  final String? cursor;

  final WorkoutFiltersInput? filters;

  final int? take;

  @override
  List<Object?> get props => [cursor, filters, take];
  @override
  Map<String, dynamic> toJson() => _$PublicWorkoutsArgumentsToJson(this);
}

final PUBLIC_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'publicWorkouts'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'cursor')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'filters')),
            type: NamedTypeNode(
                name: NameNode(value: 'WorkoutFiltersInput'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'take')),
            type: NamedTypeNode(name: NameNode(value: 'Int'), isNonNull: false),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'publicWorkouts'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'cursor'),
                  value: VariableNode(name: NameNode(value: 'cursor'))),
              ArgumentNode(
                  name: NameNode(value: 'filters'),
                  value: VariableNode(name: NameNode(value: 'filters'))),
              ArgumentNode(
                  name: NameNode(value: 'take'),
                  value: VariableNode(name: NameNode(value: 'take')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class PublicWorkoutsQuery
    extends GraphQLQuery<PublicWorkouts$Query, PublicWorkoutsArguments> {
  PublicWorkoutsQuery({required this.variables});

  @override
  final DocumentNode document = PUBLIC_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'publicWorkouts';

  @override
  final PublicWorkoutsArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  PublicWorkouts$Query parse(Map<String, dynamic> json) =>
      PublicWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateWorkoutArguments extends JsonSerializable with EquatableMixin {
  UpdateWorkoutArguments({required this.data});

  @override
  factory UpdateWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateWorkoutArgumentsFromJson(json);

  late UpdateWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateWorkoutArgumentsToJson(this);
}

final UPDATE_WORKOUT_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateWorkoutInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateWorkout'),
            alias: NameNode(value: 'updateWorkout'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'Workout'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutGoals'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutGoal'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutTags'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutTag'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Workout'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateWorkoutMutation
    extends GraphQLQuery<UpdateWorkout$Mutation, UpdateWorkoutArguments> {
  UpdateWorkoutMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateWorkout';

  @override
  final UpdateWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateWorkout$Mutation parse(Map<String, dynamic> json) =>
      UpdateWorkout$Mutation.fromJson(json);
}

final USER_WORKOUTS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'userWorkouts'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userWorkouts'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSummary'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserWorkoutsQuery
    extends GraphQLQuery<UserWorkouts$Query, JsonSerializable> {
  UserWorkoutsQuery();

  @override
  final DocumentNode document = USER_WORKOUTS_QUERY_DOCUMENT;

  @override
  final String operationName = 'userWorkouts';

  @override
  List<Object?> get props => [document, operationName];
  @override
  UserWorkouts$Query parse(Map<String, dynamic> json) =>
      UserWorkouts$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DuplicateWorkoutByIdArguments extends JsonSerializable
    with EquatableMixin {
  DuplicateWorkoutByIdArguments({required this.id});

  @override
  factory DuplicateWorkoutByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$DuplicateWorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$DuplicateWorkoutByIdArgumentsToJson(this);
}

final DUPLICATE_WORKOUT_BY_ID_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'duplicateWorkoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'duplicateWorkoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class DuplicateWorkoutByIdMutation extends GraphQLQuery<
    DuplicateWorkoutById$Mutation, DuplicateWorkoutByIdArguments> {
  DuplicateWorkoutByIdMutation({required this.variables});

  @override
  final DocumentNode document = DUPLICATE_WORKOUT_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'duplicateWorkoutById';

  @override
  final DuplicateWorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DuplicateWorkoutById$Mutation parse(Map<String, dynamic> json) =>
      DuplicateWorkoutById$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateWorkoutArguments extends JsonSerializable with EquatableMixin {
  CreateWorkoutArguments({required this.data});

  @override
  factory CreateWorkoutArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateWorkoutArgumentsFromJson(json);

  late CreateWorkoutInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateWorkoutArgumentsToJson(this);
}

final CREATE_WORKOUT_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createWorkout'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateWorkoutInput'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createWorkout'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateWorkoutMutation
    extends GraphQLQuery<CreateWorkout$Mutation, CreateWorkoutArguments> {
  CreateWorkoutMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_WORKOUT_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createWorkout';

  @override
  final CreateWorkoutArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateWorkout$Mutation parse(Map<String, dynamic> json) =>
      CreateWorkout$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class WorkoutByIdArguments extends JsonSerializable with EquatableMixin {
  WorkoutByIdArguments({required this.id});

  @override
  factory WorkoutByIdArguments.fromJson(Map<String, dynamic> json) =>
      _$WorkoutByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$WorkoutByIdArgumentsToJson(this);
}

final WORKOUT_BY_ID_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'workoutById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'workoutById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutData'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Workout'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutGoals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutTags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutTag'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'WorkoutSections'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutSection'), directives: []),
              FieldNode(
                  name: NameNode(value: 'WorkoutSectionType'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSectionType'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutSets'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSet'), directives: []),
                    FieldNode(
                        name: NameNode(value: 'WorkoutMoves'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'WorkoutMove'),
                              directives: []),
                          FieldNode(
                              name: NameNode(value: 'Equipment'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Equipment'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Move'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'Move'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'MoveType'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'MoveType'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'BodyAreaMoveScores'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FieldNode(
                                          name: NameNode(value: 'score'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet: null),
                                      FieldNode(
                                          name: NameNode(value: 'BodyArea'),
                                          alias: null,
                                          arguments: [],
                                          directives: [],
                                          selectionSet:
                                              SelectionSetNode(selections: [
                                            FragmentSpreadNode(
                                                name:
                                                    NameNode(value: 'BodyArea'),
                                                directives: [])
                                          ]))
                                    ])),
                                FieldNode(
                                    name: NameNode(value: 'RequiredEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ])),
                                FieldNode(
                                    name:
                                        NameNode(value: 'SelectableEquipments'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'Equipment'),
                                          directives: [])
                                    ]))
                              ]))
                        ]))
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutTag'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutTag'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tag'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSectionType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSectionType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Equipment'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'Equipment'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAdjustable'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'MoveType'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'MoveType'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'imageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyArea'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyArea'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'frontBack'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'upperLower'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Move'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Move'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'searchTerms'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'demoVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'scope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'validRepTypes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutMove'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutMove'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reps'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'repType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'distanceUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadAmount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loadUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timeUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSet'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSet'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'duration'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSection'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSection'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'rounds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'timecap'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'sortPosition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'classAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class WorkoutByIdQuery
    extends GraphQLQuery<WorkoutById$Query, WorkoutByIdArguments> {
  WorkoutByIdQuery({required this.variables});

  @override
  final DocumentNode document = WORKOUT_BY_ID_QUERY_DOCUMENT;

  @override
  final String operationName = 'workoutById';

  @override
  final WorkoutByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  WorkoutById$Query parse(Map<String, dynamic> json) =>
      WorkoutById$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateBodyTrackingEntryArguments extends JsonSerializable
    with EquatableMixin {
  CreateBodyTrackingEntryArguments({required this.data});

  @override
  factory CreateBodyTrackingEntryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$CreateBodyTrackingEntryArgumentsFromJson(json);

  late CreateBodyTrackingEntryInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$CreateBodyTrackingEntryArgumentsToJson(this);
}

final CREATE_BODY_TRACKING_ENTRY_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createBodyTrackingEntry'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateBodyTrackingEntryInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createBodyTrackingEntry'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'BodyTrackingEntry'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyTrackingEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyTrackingEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyweightUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyweight'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'fatPercent'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'photoUris'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateBodyTrackingEntryMutation extends GraphQLQuery<
    CreateBodyTrackingEntry$Mutation, CreateBodyTrackingEntryArguments> {
  CreateBodyTrackingEntryMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_BODY_TRACKING_ENTRY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createBodyTrackingEntry';

  @override
  final CreateBodyTrackingEntryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateBodyTrackingEntry$Mutation parse(Map<String, dynamic> json) =>
      CreateBodyTrackingEntry$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateBodyTrackingEntryArguments extends JsonSerializable
    with EquatableMixin {
  UpdateBodyTrackingEntryArguments({required this.data});

  @override
  factory UpdateBodyTrackingEntryArguments.fromJson(
          Map<String, dynamic> json) =>
      _$UpdateBodyTrackingEntryArgumentsFromJson(json);

  late UpdateBodyTrackingEntryInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() =>
      _$UpdateBodyTrackingEntryArgumentsToJson(this);
}

final UPDATE_BODY_TRACKING_ENTRY_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateBodyTrackingEntry'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateBodyTrackingEntryInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateBodyTrackingEntry'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'BodyTrackingEntry'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyTrackingEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyTrackingEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyweightUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyweight'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'fatPercent'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'photoUris'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateBodyTrackingEntryMutation extends GraphQLQuery<
    UpdateBodyTrackingEntry$Mutation, UpdateBodyTrackingEntryArguments> {
  UpdateBodyTrackingEntryMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_BODY_TRACKING_ENTRY_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateBodyTrackingEntry';

  @override
  final UpdateBodyTrackingEntryArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateBodyTrackingEntry$Mutation parse(Map<String, dynamic> json) =>
      UpdateBodyTrackingEntry$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteBodyTrackingEntryByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteBodyTrackingEntryByIdArguments({required this.id});

  @override
  factory DeleteBodyTrackingEntryByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteBodyTrackingEntryByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteBodyTrackingEntryByIdArgumentsToJson(this);
}

final DELETE_BODY_TRACKING_ENTRY_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteBodyTrackingEntryById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteBodyTrackingEntryById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteBodyTrackingEntryByIdMutation extends GraphQLQuery<
    DeleteBodyTrackingEntryById$Mutation,
    DeleteBodyTrackingEntryByIdArguments> {
  DeleteBodyTrackingEntryByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_BODY_TRACKING_ENTRY_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteBodyTrackingEntryById';

  @override
  final DeleteBodyTrackingEntryByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteBodyTrackingEntryById$Mutation parse(Map<String, dynamic> json) =>
      DeleteBodyTrackingEntryById$Mutation.fromJson(json);
}

final BODY_TRACKING_ENTRIES_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'bodyTrackingEntries'),
      variableDefinitions: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'bodyTrackingEntries'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'BodyTrackingEntry'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'BodyTrackingEntry'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'BodyTrackingEntry'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyweightUnit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'bodyweight'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'fatPercent'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'note'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'photoUris'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class BodyTrackingEntriesQuery
    extends GraphQLQuery<BodyTrackingEntries$Query, JsonSerializable> {
  BodyTrackingEntriesQuery();

  @override
  final DocumentNode document = BODY_TRACKING_ENTRIES_QUERY_DOCUMENT;

  @override
  final String operationName = 'bodyTrackingEntries';

  @override
  List<Object?> get props => [document, operationName];
  @override
  BodyTrackingEntries$Query parse(Map<String, dynamic> json) =>
      BodyTrackingEntries$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveMemberAdminStatusArguments extends JsonSerializable
    with EquatableMixin {
  RemoveMemberAdminStatusArguments(
      {required this.userId, required this.clubId});

  @override
  factory RemoveMemberAdminStatusArguments.fromJson(
          Map<String, dynamic> json) =>
      _$RemoveMemberAdminStatusArgumentsFromJson(json);

  late String userId;

  late String clubId;

  @override
  List<Object?> get props => [userId, clubId];
  @override
  Map<String, dynamic> toJson() =>
      _$RemoveMemberAdminStatusArgumentsToJson(this);
}

final REMOVE_MEMBER_ADMIN_STATUS_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'removeMemberAdminStatus'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'removeMemberAdminStatus'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userId'),
                  value: VariableNode(name: NameNode(value: 'userId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Club'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ClubInviteTokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubInvites'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubInvite'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Invited'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubRequests'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubRequest'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Applicant'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubInvite'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubInvite'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubRequest'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubRequest'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Club'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Club'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class RemoveMemberAdminStatusMutation extends GraphQLQuery<
    RemoveMemberAdminStatus$Mutation, RemoveMemberAdminStatusArguments> {
  RemoveMemberAdminStatusMutation({required this.variables});

  @override
  final DocumentNode document = REMOVE_MEMBER_ADMIN_STATUS_MUTATION_DOCUMENT;

  @override
  final String operationName = 'removeMemberAdminStatus';

  @override
  final RemoveMemberAdminStatusArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  RemoveMemberAdminStatus$Mutation parse(Map<String, dynamic> json) =>
      RemoveMemberAdminStatus$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class AddUserToClubViaInviteTokenArguments extends JsonSerializable
    with EquatableMixin {
  AddUserToClubViaInviteTokenArguments(
      {required this.userId, required this.clubInviteTokenId});

  @override
  factory AddUserToClubViaInviteTokenArguments.fromJson(
          Map<String, dynamic> json) =>
      _$AddUserToClubViaInviteTokenArgumentsFromJson(json);

  late String userId;

  late String clubInviteTokenId;

  @override
  List<Object?> get props => [userId, clubInviteTokenId];
  @override
  Map<String, dynamic> toJson() =>
      _$AddUserToClubViaInviteTokenArgumentsToJson(this);
}

final ADD_USER_TO_CLUB_VIA_INVITE_TOKEN_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'addUserToClubViaInviteToken'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubInviteTokenId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'addUserToClubViaInviteToken'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userId'),
                  value: VariableNode(name: NameNode(value: 'userId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubInviteTokenId'),
                  value:
                      VariableNode(name: NameNode(value: 'clubInviteTokenId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Club'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ClubInviteTokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubInvites'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubInvite'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Invited'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubRequests'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubRequest'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Applicant'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubInvite'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubInvite'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubRequest'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubRequest'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Club'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Club'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class AddUserToClubViaInviteTokenMutation extends GraphQLQuery<
    AddUserToClubViaInviteToken$Mutation,
    AddUserToClubViaInviteTokenArguments> {
  AddUserToClubViaInviteTokenMutation({required this.variables});

  @override
  final DocumentNode document =
      ADD_USER_TO_CLUB_VIA_INVITE_TOKEN_MUTATION_DOCUMENT;

  @override
  final String operationName = 'addUserToClubViaInviteToken';

  @override
  final AddUserToClubViaInviteTokenArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  AddUserToClubViaInviteToken$Mutation parse(Map<String, dynamic> json) =>
      AddUserToClubViaInviteToken$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UserJoinPublicClubArguments extends JsonSerializable with EquatableMixin {
  UserJoinPublicClubArguments({required this.clubId});

  @override
  factory UserJoinPublicClubArguments.fromJson(Map<String, dynamic> json) =>
      _$UserJoinPublicClubArgumentsFromJson(json);

  late String clubId;

  @override
  List<Object?> get props => [clubId];
  @override
  Map<String, dynamic> toJson() => _$UserJoinPublicClubArgumentsToJson(this);
}

final USER_JOIN_PUBLIC_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'userJoinPublicClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'userJoinPublicClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class UserJoinPublicClubMutation extends GraphQLQuery<
    UserJoinPublicClub$Mutation, UserJoinPublicClubArguments> {
  UserJoinPublicClubMutation({required this.variables});

  @override
  final DocumentNode document = USER_JOIN_PUBLIC_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'userJoinPublicClub';

  @override
  final UserJoinPublicClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UserJoinPublicClub$Mutation parse(Map<String, dynamic> json) =>
      UserJoinPublicClub$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CheckClubInviteTokenArguments extends JsonSerializable
    with EquatableMixin {
  CheckClubInviteTokenArguments({required this.id});

  @override
  factory CheckClubInviteTokenArguments.fromJson(Map<String, dynamic> json) =>
      _$CheckClubInviteTokenArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$CheckClubInviteTokenArgumentsToJson(this);
}

final CHECK_CLUB_INVITE_TOKEN_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'checkClubInviteToken'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'checkClubInviteToken'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null),
              InlineFragmentNode(
                  typeCondition: TypeConditionNode(
                      on: NamedTypeNode(
                          name: NameNode(value: 'ClubInviteTokenData'),
                          isNonNull: false)),
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteTokenData'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Club'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'Club'), directives: []),
                          FieldNode(
                              name: NameNode(value: 'Owner'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'UserSummary'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Admins'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'UserSummary'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Members'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'UserSummary'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'ClubInviteTokens'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'ClubInviteToken'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'JoinClubInvites'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'JoinClubInvite'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'Invited'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'UserSummary'),
                                          directives: [])
                                    ]))
                              ])),
                          FieldNode(
                              name: NameNode(value: 'JoinClubRequests'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'JoinClubRequest'),
                                    directives: []),
                                FieldNode(
                                    name: NameNode(value: 'Applicant'),
                                    alias: null,
                                    arguments: [],
                                    directives: [],
                                    selectionSet: SelectionSetNode(selections: [
                                      FragmentSpreadNode(
                                          name: NameNode(value: 'UserSummary'),
                                          directives: [])
                                    ]))
                              ])),
                          FieldNode(
                              name: NameNode(value: 'Workouts'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'WorkoutSummary'),
                                    directives: [])
                              ])),
                          FieldNode(
                              name: NameNode(value: 'WorkoutPlans'),
                              alias: null,
                              arguments: [],
                              directives: [],
                              selectionSet: SelectionSetNode(selections: [
                                FragmentSpreadNode(
                                    name: NameNode(value: 'WorkoutPlanSummary'),
                                    directives: [])
                              ]))
                        ]))
                  ])),
              InlineFragmentNode(
                  typeCondition: TypeConditionNode(
                      on: NamedTypeNode(
                          name: NameNode(value: 'InviteTokenError'),
                          isNonNull: false)),
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'InviteTokenError'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubInvite'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubInvite'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubRequest'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubRequest'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Club'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Club'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteTokenData'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteTokenData'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'token'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'InviteTokenError'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'InviteTokenError'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'message'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CheckClubInviteTokenQuery extends GraphQLQuery<CheckClubInviteToken$Query,
    CheckClubInviteTokenArguments> {
  CheckClubInviteTokenQuery({required this.variables});

  @override
  final DocumentNode document = CHECK_CLUB_INVITE_TOKEN_QUERY_DOCUMENT;

  @override
  final String operationName = 'checkClubInviteToken';

  @override
  final CheckClubInviteTokenArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CheckClubInviteToken$Query parse(Map<String, dynamic> json) =>
      CheckClubInviteToken$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class RemoveUserFromClubArguments extends JsonSerializable with EquatableMixin {
  RemoveUserFromClubArguments(
      {required this.userToRemoveId, required this.clubId});

  @override
  factory RemoveUserFromClubArguments.fromJson(Map<String, dynamic> json) =>
      _$RemoveUserFromClubArgumentsFromJson(json);

  late String userToRemoveId;

  late String clubId;

  @override
  List<Object?> get props => [userToRemoveId, clubId];
  @override
  Map<String, dynamic> toJson() => _$RemoveUserFromClubArgumentsToJson(this);
}

final REMOVE_USER_FROM_CLUB_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'removeUserFromClub'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userToRemoveId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'removeUserFromClub'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userToRemoveId'),
                  value: VariableNode(name: NameNode(value: 'userToRemoveId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Club'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ClubInviteTokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubInvites'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubInvite'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Invited'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubRequests'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubRequest'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Applicant'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubInvite'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubInvite'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubRequest'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubRequest'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Club'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Club'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class RemoveUserFromClubMutation extends GraphQLQuery<
    RemoveUserFromClub$Mutation, RemoveUserFromClubArguments> {
  RemoveUserFromClubMutation({required this.variables});

  @override
  final DocumentNode document = REMOVE_USER_FROM_CLUB_MUTATION_DOCUMENT;

  @override
  final String operationName = 'removeUserFromClub';

  @override
  final RemoveUserFromClubArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  RemoveUserFromClub$Mutation parse(Map<String, dynamic> json) =>
      RemoveUserFromClub$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class ClubMembersArguments extends JsonSerializable with EquatableMixin {
  ClubMembersArguments({required this.id});

  @override
  factory ClubMembersArguments.fromJson(Map<String, dynamic> json) =>
      _$ClubMembersArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() => _$ClubMembersArgumentsToJson(this);
}

final CLUB_MEMBERS_QUERY_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.query,
      name: NameNode(value: 'clubMembers'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'clubById'),
            alias: NameNode(value: 'clubMembers'),
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Club'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Club'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Club'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class ClubMembersQuery
    extends GraphQLQuery<ClubMembers$Query, ClubMembersArguments> {
  ClubMembersQuery({required this.variables});

  @override
  final DocumentNode document = CLUB_MEMBERS_QUERY_DOCUMENT;

  @override
  final String operationName = 'clubMembers';

  @override
  final ClubMembersArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  ClubMembers$Query parse(Map<String, dynamic> json) =>
      ClubMembers$Query.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class UpdateClubInviteTokenArguments extends JsonSerializable
    with EquatableMixin {
  UpdateClubInviteTokenArguments({required this.data});

  @override
  factory UpdateClubInviteTokenArguments.fromJson(Map<String, dynamic> json) =>
      _$UpdateClubInviteTokenArgumentsFromJson(json);

  late UpdateClubInviteTokenInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$UpdateClubInviteTokenArgumentsToJson(this);
}

final UPDATE_CLUB_INVITE_TOKEN_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'updateClubInviteToken'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'UpdateClubInviteTokenInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'updateClubInviteToken'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubInviteToken'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class UpdateClubInviteTokenMutation extends GraphQLQuery<
    UpdateClubInviteToken$Mutation, UpdateClubInviteTokenArguments> {
  UpdateClubInviteTokenMutation({required this.variables});

  @override
  final DocumentNode document = UPDATE_CLUB_INVITE_TOKEN_MUTATION_DOCUMENT;

  @override
  final String operationName = 'updateClubInviteToken';

  @override
  final UpdateClubInviteTokenArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  UpdateClubInviteToken$Mutation parse(Map<String, dynamic> json) =>
      UpdateClubInviteToken$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class GiveMemberAdminStatusArguments extends JsonSerializable
    with EquatableMixin {
  GiveMemberAdminStatusArguments({required this.userId, required this.clubId});

  @override
  factory GiveMemberAdminStatusArguments.fromJson(Map<String, dynamic> json) =>
      _$GiveMemberAdminStatusArgumentsFromJson(json);

  late String userId;

  late String clubId;

  @override
  List<Object?> get props => [userId, clubId];
  @override
  Map<String, dynamic> toJson() => _$GiveMemberAdminStatusArgumentsToJson(this);
}

final GIVE_MEMBER_ADMIN_STATUS_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'giveMemberAdminStatus'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'userId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: []),
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'clubId')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'giveMemberAdminStatus'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'userId'),
                  value: VariableNode(name: NameNode(value: 'userId'))),
              ArgumentNode(
                  name: NameNode(value: 'clubId'),
                  value: VariableNode(name: NameNode(value: 'clubId')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(name: NameNode(value: 'Club'), directives: []),
              FieldNode(
                  name: NameNode(value: 'Owner'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Admins'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'Members'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'UserSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'ClubInviteTokens'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'ClubInviteToken'),
                        directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubInvites'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubInvite'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Invited'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'JoinClubRequests'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'JoinClubRequest'),
                        directives: []),
                    FieldNode(
                        name: NameNode(value: 'Applicant'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: SelectionSetNode(selections: [
                          FragmentSpreadNode(
                              name: NameNode(value: 'UserSummary'),
                              directives: [])
                        ]))
                  ])),
              FieldNode(
                  name: NameNode(value: 'Workouts'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutSummary'), directives: [])
                  ])),
              FieldNode(
                  name: NameNode(value: 'WorkoutPlans'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FragmentSpreadNode(
                        name: NameNode(value: 'WorkoutPlanSummary'),
                        directives: [])
                  ]))
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'UserSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'UserSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'avatarUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'userProfileScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubInvite'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubInvite'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'JoinClubRequest'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'JoinClubRequest'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'respondedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'lengthMinutes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'difficultyLevel'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'loggedSessionsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassVideo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hasClassAudio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'equipments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutPlanSummary'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutPlanSummary'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'archived'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'lengthWeeks'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'daysPerWeek'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'workoutsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'User'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'UserSummary'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'enrolmentsCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'goals'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'WorkoutGoal'), directives: [])
            ])),
        FieldNode(
            name: NameNode(value: 'tags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'reviewCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'WorkoutGoal'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'WorkoutGoal'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'hexColor'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'Club'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(name: NameNode(value: 'Club'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'coverImageUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introVideoThumbUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'introAudioUri'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'contentAccessScope'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class GiveMemberAdminStatusMutation extends GraphQLQuery<
    GiveMemberAdminStatus$Mutation, GiveMemberAdminStatusArguments> {
  GiveMemberAdminStatusMutation({required this.variables});

  @override
  final DocumentNode document = GIVE_MEMBER_ADMIN_STATUS_MUTATION_DOCUMENT;

  @override
  final String operationName = 'giveMemberAdminStatus';

  @override
  final GiveMemberAdminStatusArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  GiveMemberAdminStatus$Mutation parse(Map<String, dynamic> json) =>
      GiveMemberAdminStatus$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class CreateClubInviteTokenArguments extends JsonSerializable
    with EquatableMixin {
  CreateClubInviteTokenArguments({required this.data});

  @override
  factory CreateClubInviteTokenArguments.fromJson(Map<String, dynamic> json) =>
      _$CreateClubInviteTokenArgumentsFromJson(json);

  late CreateClubInviteTokenInput data;

  @override
  List<Object?> get props => [data];
  @override
  Map<String, dynamic> toJson() => _$CreateClubInviteTokenArgumentsToJson(this);
}

final CREATE_CLUB_INVITE_TOKEN_MUTATION_DOCUMENT = DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'createClubInviteToken'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'data')),
            type: NamedTypeNode(
                name: NameNode(value: 'CreateClubInviteTokenInput'),
                isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'createClubInviteToken'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'data'),
                  value: VariableNode(name: NameNode(value: 'data')))
            ],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FragmentSpreadNode(
                  name: NameNode(value: 'ClubInviteToken'), directives: [])
            ]))
      ])),
  FragmentDefinitionNode(
      name: NameNode(value: 'ClubInviteToken'),
      typeCondition: TypeConditionNode(
          on: NamedTypeNode(
              name: NameNode(value: 'ClubInviteToken'), isNonNull: false)),
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'active'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'inviteLimit'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null),
        FieldNode(
            name: NameNode(value: 'joinedUserIds'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null)
      ]))
]);

class CreateClubInviteTokenMutation extends GraphQLQuery<
    CreateClubInviteToken$Mutation, CreateClubInviteTokenArguments> {
  CreateClubInviteTokenMutation({required this.variables});

  @override
  final DocumentNode document = CREATE_CLUB_INVITE_TOKEN_MUTATION_DOCUMENT;

  @override
  final String operationName = 'createClubInviteToken';

  @override
  final CreateClubInviteTokenArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  CreateClubInviteToken$Mutation parse(Map<String, dynamic> json) =>
      CreateClubInviteToken$Mutation.fromJson(json);
}

@JsonSerializable(explicitToJson: true)
class DeleteClubInviteTokenByIdArguments extends JsonSerializable
    with EquatableMixin {
  DeleteClubInviteTokenByIdArguments({required this.id});

  @override
  factory DeleteClubInviteTokenByIdArguments.fromJson(
          Map<String, dynamic> json) =>
      _$DeleteClubInviteTokenByIdArgumentsFromJson(json);

  late String id;

  @override
  List<Object?> get props => [id];
  @override
  Map<String, dynamic> toJson() =>
      _$DeleteClubInviteTokenByIdArgumentsToJson(this);
}

final DELETE_CLUB_INVITE_TOKEN_BY_ID_MUTATION_DOCUMENT =
    DocumentNode(definitions: [
  OperationDefinitionNode(
      type: OperationType.mutation,
      name: NameNode(value: 'deleteClubInviteTokenById'),
      variableDefinitions: [
        VariableDefinitionNode(
            variable: VariableNode(name: NameNode(value: 'id')),
            type: NamedTypeNode(name: NameNode(value: 'ID'), isNonNull: true),
            defaultValue: DefaultValueNode(value: null),
            directives: [])
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
            name: NameNode(value: 'deleteClubInviteTokenById'),
            alias: null,
            arguments: [
              ArgumentNode(
                  name: NameNode(value: 'id'),
                  value: VariableNode(name: NameNode(value: 'id')))
            ],
            directives: [],
            selectionSet: null)
      ]))
]);

class DeleteClubInviteTokenByIdMutation extends GraphQLQuery<
    DeleteClubInviteTokenById$Mutation, DeleteClubInviteTokenByIdArguments> {
  DeleteClubInviteTokenByIdMutation({required this.variables});

  @override
  final DocumentNode document =
      DELETE_CLUB_INVITE_TOKEN_BY_ID_MUTATION_DOCUMENT;

  @override
  final String operationName = 'deleteClubInviteTokenById';

  @override
  final DeleteClubInviteTokenByIdArguments variables;

  @override
  List<Object?> get props => [document, operationName, variables];
  @override
  DeleteClubInviteTokenById$Mutation parse(Map<String, dynamic> json) =>
      DeleteClubInviteTokenById$Mutation.fromJson(json);
}
